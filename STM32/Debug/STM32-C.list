
STM32-C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005294  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08005438  08005438  00015438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005500  08005500  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005500  08005500  00015500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005508  08005508  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005508  08005508  00015508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800550c  0800550c  0001550c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000070  08005580  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08005580  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013406  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025f1  00000000  00000000  000334a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00035a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e30  00000000  00000000  00036998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179e3  00000000  00000000  000377c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001329a  00000000  00000000  0004f1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090ac7  00000000  00000000  00062445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2f0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000455c  00000000  00000000  000f2f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800541c 	.word	0x0800541c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800541c 	.word	0x0800541c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2f>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b44:	bf24      	itt	cs
 8000b46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4e:	d90d      	bls.n	8000b6c <__aeabi_d2f+0x30>
 8000b50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b64:	bf08      	it	eq
 8000b66:	f020 0001 	biceq.w	r0, r0, #1
 8000b6a:	4770      	bx	lr
 8000b6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b70:	d121      	bne.n	8000bb6 <__aeabi_d2f+0x7a>
 8000b72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b76:	bfbc      	itt	lt
 8000b78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	4770      	bxlt	lr
 8000b7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b86:	f1c2 0218 	rsb	r2, r2, #24
 8000b8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b92:	fa20 f002 	lsr.w	r0, r0, r2
 8000b96:	bf18      	it	ne
 8000b98:	f040 0001 	orrne.w	r0, r0, #1
 8000b9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba8:	ea40 000c 	orr.w	r0, r0, ip
 8000bac:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb4:	e7cc      	b.n	8000b50 <__aeabi_d2f+0x14>
 8000bb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bba:	d107      	bne.n	8000bcc <__aeabi_d2f+0x90>
 8000bbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bca:	4770      	bxne	lr
 8000bcc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bf0:	f000 b96e 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9d08      	ldr	r5, [sp, #32]
 8000c12:	4604      	mov	r4, r0
 8000c14:	468c      	mov	ip, r1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 8083 	bne.w	8000d22 <__udivmoddi4+0x116>
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	4617      	mov	r7, r2
 8000c20:	d947      	bls.n	8000cb2 <__udivmoddi4+0xa6>
 8000c22:	fab2 f282 	clz	r2, r2
 8000c26:	b142      	cbz	r2, 8000c3a <__udivmoddi4+0x2e>
 8000c28:	f1c2 0020 	rsb	r0, r2, #32
 8000c2c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c30:	4091      	lsls	r1, r2
 8000c32:	4097      	lsls	r7, r2
 8000c34:	ea40 0c01 	orr.w	ip, r0, r1
 8000c38:	4094      	lsls	r4, r2
 8000c3a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fbbc f6f8 	udiv	r6, ip, r8
 8000c44:	fa1f fe87 	uxth.w	lr, r7
 8000c48:	fb08 c116 	mls	r1, r8, r6, ip
 8000c4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c50:	fb06 f10e 	mul.w	r1, r6, lr
 8000c54:	4299      	cmp	r1, r3
 8000c56:	d909      	bls.n	8000c6c <__udivmoddi4+0x60>
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 8119 	bcs.w	8000e94 <__udivmoddi4+0x288>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 8116 	bls.w	8000e94 <__udivmoddi4+0x288>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	443b      	add	r3, r7
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c80:	45a6      	cmp	lr, r4
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x8c>
 8000c84:	193c      	adds	r4, r7, r4
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8a:	f080 8105 	bcs.w	8000e98 <__udivmoddi4+0x28c>
 8000c8e:	45a6      	cmp	lr, r4
 8000c90:	f240 8102 	bls.w	8000e98 <__udivmoddi4+0x28c>
 8000c94:	3802      	subs	r0, #2
 8000c96:	443c      	add	r4, r7
 8000c98:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9c:	eba4 040e 	sub.w	r4, r4, lr
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa0>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	b902      	cbnz	r2, 8000cb6 <__udivmoddi4+0xaa>
 8000cb4:	deff      	udf	#255	; 0xff
 8000cb6:	fab2 f282 	clz	r2, r2
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	d150      	bne.n	8000d60 <__udivmoddi4+0x154>
 8000cbe:	1bcb      	subs	r3, r1, r7
 8000cc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc4:	fa1f f887 	uxth.w	r8, r7
 8000cc8:	2601      	movs	r6, #1
 8000cca:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cce:	0c21      	lsrs	r1, r4, #16
 8000cd0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	d907      	bls.n	8000cf0 <__udivmoddi4+0xe4>
 8000ce0:	1879      	adds	r1, r7, r1
 8000ce2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0xe2>
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	f200 80e9 	bhi.w	8000ec0 <__udivmoddi4+0x2b4>
 8000cee:	4684      	mov	ip, r0
 8000cf0:	1ac9      	subs	r1, r1, r3
 8000cf2:	b2a3      	uxth	r3, r4
 8000cf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cfc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d00:	fb08 f800 	mul.w	r8, r8, r0
 8000d04:	45a0      	cmp	r8, r4
 8000d06:	d907      	bls.n	8000d18 <__udivmoddi4+0x10c>
 8000d08:	193c      	adds	r4, r7, r4
 8000d0a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x10a>
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	f200 80d9 	bhi.w	8000ec8 <__udivmoddi4+0x2bc>
 8000d16:	4618      	mov	r0, r3
 8000d18:	eba4 0408 	sub.w	r4, r4, r8
 8000d1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d20:	e7bf      	b.n	8000ca2 <__udivmoddi4+0x96>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0x12e>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80b1 	beq.w	8000e8e <__udivmoddi4+0x282>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x1cc>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0x140>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80b8 	bhi.w	8000ebc <__udivmoddi4+0x2b0>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	468c      	mov	ip, r1
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0a8      	beq.n	8000cac <__udivmoddi4+0xa0>
 8000d5a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d5e:	e7a5      	b.n	8000cac <__udivmoddi4+0xa0>
 8000d60:	f1c2 0320 	rsb	r3, r2, #32
 8000d64:	fa20 f603 	lsr.w	r6, r0, r3
 8000d68:	4097      	lsls	r7, r2
 8000d6a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d72:	40d9      	lsrs	r1, r3
 8000d74:	4330      	orrs	r0, r6
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d7c:	fa1f f887 	uxth.w	r8, r7
 8000d80:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f108 	mul.w	r1, r6, r8
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x19c>
 8000d94:	18fb      	adds	r3, r7, r3
 8000d96:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d9a:	f080 808d 	bcs.w	8000eb8 <__udivmoddi4+0x2ac>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 808a 	bls.w	8000eb8 <__udivmoddi4+0x2ac>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	443b      	add	r3, r7
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b281      	uxth	r1, r0
 8000dac:	fbb3 f0fe 	udiv	r0, r3, lr
 8000db0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db8:	fb00 f308 	mul.w	r3, r0, r8
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	d907      	bls.n	8000dd0 <__udivmoddi4+0x1c4>
 8000dc0:	1879      	adds	r1, r7, r1
 8000dc2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dc6:	d273      	bcs.n	8000eb0 <__udivmoddi4+0x2a4>
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d971      	bls.n	8000eb0 <__udivmoddi4+0x2a4>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4439      	add	r1, r7
 8000dd0:	1acb      	subs	r3, r1, r3
 8000dd2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dd6:	e778      	b.n	8000cca <__udivmoddi4+0xbe>
 8000dd8:	f1c6 0c20 	rsb	ip, r6, #32
 8000ddc:	fa03 f406 	lsl.w	r4, r3, r6
 8000de0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000de4:	431c      	orrs	r4, r3
 8000de6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000df2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000df6:	431f      	orrs	r7, r3
 8000df8:	0c3b      	lsrs	r3, r7, #16
 8000dfa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfe:	fa1f f884 	uxth.w	r8, r4
 8000e02:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e06:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e0a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	fa02 f206 	lsl.w	r2, r2, r6
 8000e14:	fa00 f306 	lsl.w	r3, r0, r6
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x220>
 8000e1a:	1861      	adds	r1, r4, r1
 8000e1c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e20:	d248      	bcs.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e22:	458a      	cmp	sl, r1
 8000e24:	d946      	bls.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e26:	f1a9 0902 	sub.w	r9, r9, #2
 8000e2a:	4421      	add	r1, r4
 8000e2c:	eba1 010a 	sub.w	r1, r1, sl
 8000e30:	b2bf      	uxth	r7, r7
 8000e32:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e36:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e3a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e3e:	fb00 f808 	mul.w	r8, r0, r8
 8000e42:	45b8      	cmp	r8, r7
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x24a>
 8000e46:	19e7      	adds	r7, r4, r7
 8000e48:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e4c:	d22e      	bcs.n	8000eac <__udivmoddi4+0x2a0>
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d92c      	bls.n	8000eac <__udivmoddi4+0x2a0>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4427      	add	r7, r4
 8000e56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e5a:	eba7 0708 	sub.w	r7, r7, r8
 8000e5e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e62:	454f      	cmp	r7, r9
 8000e64:	46c6      	mov	lr, r8
 8000e66:	4649      	mov	r1, r9
 8000e68:	d31a      	bcc.n	8000ea0 <__udivmoddi4+0x294>
 8000e6a:	d017      	beq.n	8000e9c <__udivmoddi4+0x290>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x27a>
 8000e6e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e72:	eb67 0701 	sbc.w	r7, r7, r1
 8000e76:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e7a:	40f2      	lsrs	r2, r6
 8000e7c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e80:	40f7      	lsrs	r7, r6
 8000e82:	e9c5 2700 	strd	r2, r7, [r5]
 8000e86:	2600      	movs	r6, #0
 8000e88:	4631      	mov	r1, r6
 8000e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8e:	462e      	mov	r6, r5
 8000e90:	4628      	mov	r0, r5
 8000e92:	e70b      	b.n	8000cac <__udivmoddi4+0xa0>
 8000e94:	4606      	mov	r6, r0
 8000e96:	e6e9      	b.n	8000c6c <__udivmoddi4+0x60>
 8000e98:	4618      	mov	r0, r3
 8000e9a:	e6fd      	b.n	8000c98 <__udivmoddi4+0x8c>
 8000e9c:	4543      	cmp	r3, r8
 8000e9e:	d2e5      	bcs.n	8000e6c <__udivmoddi4+0x260>
 8000ea0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	e7df      	b.n	8000e6c <__udivmoddi4+0x260>
 8000eac:	4608      	mov	r0, r1
 8000eae:	e7d2      	b.n	8000e56 <__udivmoddi4+0x24a>
 8000eb0:	4660      	mov	r0, ip
 8000eb2:	e78d      	b.n	8000dd0 <__udivmoddi4+0x1c4>
 8000eb4:	4681      	mov	r9, r0
 8000eb6:	e7b9      	b.n	8000e2c <__udivmoddi4+0x220>
 8000eb8:	4666      	mov	r6, ip
 8000eba:	e775      	b.n	8000da8 <__udivmoddi4+0x19c>
 8000ebc:	4630      	mov	r0, r6
 8000ebe:	e74a      	b.n	8000d56 <__udivmoddi4+0x14a>
 8000ec0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec4:	4439      	add	r1, r7
 8000ec6:	e713      	b.n	8000cf0 <__udivmoddi4+0xe4>
 8000ec8:	3802      	subs	r0, #2
 8000eca:	443c      	add	r4, r7
 8000ecc:	e724      	b.n	8000d18 <__udivmoddi4+0x10c>
 8000ece:	bf00      	nop

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <IMU_init>:
/// @brief Set the IMU address and full scale ranges.
/// @param addr Hex address based on AD0 pin - 0x68 low or 0x69 high.
/// @param aScale Set accelerometer full scale range: 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
/// @param gScale Set gyroscope full scale range: 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
void IMU_init(uint8_t addr, uint8_t aScale, uint8_t gScale)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	71bb      	strb	r3, [r7, #6]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	717b      	strb	r3, [r7, #5]
	// Save values
	_addr = addr << 1;
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <IMU_init+0x34>)
 8000eee:	701a      	strb	r2, [r3, #0]
	_aScale = aScale;
 8000ef0:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <IMU_init+0x38>)
 8000ef2:	79bb      	ldrb	r3, [r7, #6]
 8000ef4:	7013      	strb	r3, [r2, #0]
	_gScale = gScale;
 8000ef6:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <IMU_init+0x3c>)
 8000ef8:	797b      	ldrb	r3, [r7, #5]
 8000efa:	7013      	strb	r3, [r2, #0]

	// Start up I2C
	MX_I2C1_Init();
 8000efc:	f000 fbe6 	bl	80016cc <MX_I2C1_Init>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	200000c0 	.word	0x200000c0
 8000f0c:	20000098 	.word	0x20000098
 8000f10:	200000e8 	.word	0x200000e8

08000f14 <IMU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale.
void IMU_begin(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af02      	add	r7, sp, #8
	// Find who the IMU is
	buf[0] = WHO_AM_I;
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <IMU_begin+0x84>)
 8000f1c:	2275      	movs	r2, #117	; 0x75
 8000f1e:	701a      	strb	r2, [r3, #0]
    ret = HAL_I2C_Master_Transmit(&hi2c1, _addr, buf, 1, HAL_MAX_DELAY);
 8000f20:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <IMU_begin+0x88>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b299      	uxth	r1, r3
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	4a1a      	ldr	r2, [pc, #104]	; (8000f98 <IMU_begin+0x84>)
 8000f30:	481b      	ldr	r0, [pc, #108]	; (8000fa0 <IMU_begin+0x8c>)
 8000f32:	f001 fbab 	bl	800268c <HAL_I2C_Master_Transmit>
 8000f36:	4603      	mov	r3, r0
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <IMU_begin+0x90>)
 8000f3c:	701a      	strb	r2, [r3, #0]

    if ( ret == HAL_OK ) {
 8000f3e:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <IMU_begin+0x90>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d124      	bne.n	8000f90 <IMU_begin+0x7c>
    	ret = HAL_I2C_Master_Receive(&hi2c1, _addr, buf, 1, HAL_MAX_DELAY);
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <IMU_begin+0x88>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b299      	uxth	r1, r3
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2301      	movs	r3, #1
 8000f54:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <IMU_begin+0x84>)
 8000f56:	4812      	ldr	r0, [pc, #72]	; (8000fa0 <IMU_begin+0x8c>)
 8000f58:	f001 fc96 	bl	8002888 <HAL_I2C_Master_Receive>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <IMU_begin+0x90>)
 8000f62:	701a      	strb	r2, [r3, #0]
    	if ( ret == HAL_OK ) {
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <IMU_begin+0x90>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d111      	bne.n	8000f90 <IMU_begin+0x7c>
    	    if (buf[0] == WHO_AM_I_ANS)
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <IMU_begin+0x84>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b98      	cmp	r3, #152	; 0x98
 8000f72:	d10d      	bne.n	8000f90 <IMU_begin+0x7c>
    	    {
    	        write2bytes(PWR_MGMT_1, 0x00);
 8000f74:	2100      	movs	r1, #0
 8000f76:	206b      	movs	r0, #107	; 0x6b
 8000f78:	f000 f8ac 	bl	80010d4 <write2bytes>
    	        setAccFullScaleRange(_aScale);
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <IMU_begin+0x94>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 f815 	bl	8000fb0 <setAccFullScaleRange>
    	        setGyroFullScaleRange(_gScale);
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <IMU_begin+0x98>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f858 	bl	8001040 <setGyroFullScaleRange>
    	    }
    	}
    }
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200000d4 	.word	0x200000d4
 8000f9c:	200000c0 	.word	0x200000c0
 8000fa0:	20000104 	.word	0x20000104
 8000fa4:	200000e9 	.word	0x200000e9
 8000fa8:	20000098 	.word	0x20000098
 8000fac:	200000e8 	.word	0x200000e8

08000fb0 <setAccFullScaleRange>:

/// @brief Set the accelerometer full scale range.
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
void setAccFullScaleRange(uint8_t aScale)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
    switch (aScale)
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d82f      	bhi.n	8001020 <setAccFullScaleRange+0x70>
 8000fc0:	a201      	add	r2, pc, #4	; (adr r2, 8000fc8 <setAccFullScaleRange+0x18>)
 8000fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc6:	bf00      	nop
 8000fc8:	08000fd9 	.word	0x08000fd9
 8000fcc:	08000feb 	.word	0x08000feb
 8000fd0:	08000ffd 	.word	0x08000ffd
 8000fd4:	0800100f 	.word	0x0800100f
    {
    case AFS_2G:
        aRes = 16384.0;
 8000fd8:	4b18      	ldr	r3, [pc, #96]	; (800103c <setAccFullScaleRange+0x8c>)
 8000fda:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8000fde:	601a      	str	r2, [r3, #0]
        write2bytes(ACCEL_CONFIG, 0x00);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	201c      	movs	r0, #28
 8000fe4:	f000 f876 	bl	80010d4 <write2bytes>
        break;
 8000fe8:	e023      	b.n	8001032 <setAccFullScaleRange+0x82>
    case AFS_4G:
        aRes = 8192.0;
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <setAccFullScaleRange+0x8c>)
 8000fec:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000ff0:	601a      	str	r2, [r3, #0]
        write2bytes(ACCEL_CONFIG, 0x08);
 8000ff2:	2108      	movs	r1, #8
 8000ff4:	201c      	movs	r0, #28
 8000ff6:	f000 f86d 	bl	80010d4 <write2bytes>
        break;
 8000ffa:	e01a      	b.n	8001032 <setAccFullScaleRange+0x82>
    case AFS_8G:
        aRes = 4096.0;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <setAccFullScaleRange+0x8c>)
 8000ffe:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8001002:	601a      	str	r2, [r3, #0]
        write2bytes(ACCEL_CONFIG, 0x10);
 8001004:	2110      	movs	r1, #16
 8001006:	201c      	movs	r0, #28
 8001008:	f000 f864 	bl	80010d4 <write2bytes>
        break;
 800100c:	e011      	b.n	8001032 <setAccFullScaleRange+0x82>
    case AFS_16G:
        aRes = 2048.0;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <setAccFullScaleRange+0x8c>)
 8001010:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001014:	601a      	str	r2, [r3, #0]
        write2bytes(ACCEL_CONFIG, 0x18);
 8001016:	2118      	movs	r1, #24
 8001018:	201c      	movs	r0, #28
 800101a:	f000 f85b 	bl	80010d4 <write2bytes>
        break;
 800101e:	e008      	b.n	8001032 <setAccFullScaleRange+0x82>
    default:
        aRes = 8192.0;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <setAccFullScaleRange+0x8c>)
 8001022:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001026:	601a      	str	r2, [r3, #0]
        write2bytes(ACCEL_CONFIG, 0x08);
 8001028:	2108      	movs	r1, #8
 800102a:	201c      	movs	r0, #28
 800102c:	f000 f852 	bl	80010d4 <write2bytes>
        break;
 8001030:	bf00      	nop
    }
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000c4 	.word	0x200000c4

08001040 <setGyroFullScaleRange>:

/// @brief Set the gyroscope full scale range.
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
void setGyroFullScaleRange(uint8_t gScale)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
    switch (gScale)
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b03      	cmp	r3, #3
 800104e:	d82b      	bhi.n	80010a8 <setGyroFullScaleRange+0x68>
 8001050:	a201      	add	r2, pc, #4	; (adr r2, 8001058 <setGyroFullScaleRange+0x18>)
 8001052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001056:	bf00      	nop
 8001058:	08001069 	.word	0x08001069
 800105c:	08001079 	.word	0x08001079
 8001060:	08001089 	.word	0x08001089
 8001064:	08001099 	.word	0x08001099
    {
    case GFS_250DPS:
        gRes = 131.0;
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <setGyroFullScaleRange+0x80>)
 800106a:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <setGyroFullScaleRange+0x84>)
 800106c:	601a      	str	r2, [r3, #0]
        write2bytes(GYRO_CONFIG, 0x00);
 800106e:	2100      	movs	r1, #0
 8001070:	201b      	movs	r0, #27
 8001072:	f000 f82f 	bl	80010d4 <write2bytes>
        break;
 8001076:	e01f      	b.n	80010b8 <setGyroFullScaleRange+0x78>
    case GFS_500DPS:
        gRes = 65.5;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <setGyroFullScaleRange+0x80>)
 800107a:	4a13      	ldr	r2, [pc, #76]	; (80010c8 <setGyroFullScaleRange+0x88>)
 800107c:	601a      	str	r2, [r3, #0]
        write2bytes(GYRO_CONFIG, 0x08);
 800107e:	2108      	movs	r1, #8
 8001080:	201b      	movs	r0, #27
 8001082:	f000 f827 	bl	80010d4 <write2bytes>
        break;
 8001086:	e017      	b.n	80010b8 <setGyroFullScaleRange+0x78>
    case GFS_1000DPS:
        gRes = 32.8;
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <setGyroFullScaleRange+0x80>)
 800108a:	4a10      	ldr	r2, [pc, #64]	; (80010cc <setGyroFullScaleRange+0x8c>)
 800108c:	601a      	str	r2, [r3, #0]
        write2bytes(GYRO_CONFIG, 0x10);
 800108e:	2110      	movs	r1, #16
 8001090:	201b      	movs	r0, #27
 8001092:	f000 f81f 	bl	80010d4 <write2bytes>
        break;
 8001096:	e00f      	b.n	80010b8 <setGyroFullScaleRange+0x78>
    case GFS_2000DPS:
        gRes = 16.4;
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <setGyroFullScaleRange+0x80>)
 800109a:	4a0d      	ldr	r2, [pc, #52]	; (80010d0 <setGyroFullScaleRange+0x90>)
 800109c:	601a      	str	r2, [r3, #0]
        write2bytes(GYRO_CONFIG, 0x18);
 800109e:	2118      	movs	r1, #24
 80010a0:	201b      	movs	r0, #27
 80010a2:	f000 f817 	bl	80010d4 <write2bytes>
        break;
 80010a6:	e007      	b.n	80010b8 <setGyroFullScaleRange+0x78>
    default:
        gRes = 65.5;
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <setGyroFullScaleRange+0x80>)
 80010aa:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <setGyroFullScaleRange+0x88>)
 80010ac:	601a      	str	r2, [r3, #0]
        write2bytes(GYRO_CONFIG, 0x08);
 80010ae:	2108      	movs	r1, #8
 80010b0:	201b      	movs	r0, #27
 80010b2:	f000 f80f 	bl	80010d4 <write2bytes>
        break;
 80010b6:	bf00      	nop
    }
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200000e4 	.word	0x200000e4
 80010c4:	43030000 	.word	0x43030000
 80010c8:	42830000 	.word	0x42830000
 80010cc:	42033333 	.word	0x42033333
 80010d0:	41833333 	.word	0x41833333

080010d4 <write2bytes>:

/// @brief Write bytes to specific registers on the IMU.
/// @param byte0 The main register to be written.
/// @param byte1 The command to be written.
bool write2bytes(uint8_t byte0, uint8_t byte1)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af02      	add	r7, sp, #8
 80010da:	4603      	mov	r3, r0
 80010dc:	460a      	mov	r2, r1
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71bb      	strb	r3, [r7, #6]
	buf[0] = byte0;
 80010e4:	4a0f      	ldr	r2, [pc, #60]	; (8001124 <write2bytes+0x50>)
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	7013      	strb	r3, [r2, #0]
	buf[1] = byte1;
 80010ea:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <write2bytes+0x50>)
 80010ec:	79bb      	ldrb	r3, [r7, #6]
 80010ee:	7053      	strb	r3, [r2, #1]

    ret = HAL_I2C_Master_Transmit(&hi2c1, _addr, buf, 2, HAL_MAX_DELAY);
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <write2bytes+0x54>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b299      	uxth	r1, r3
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2302      	movs	r3, #2
 80010fe:	4a09      	ldr	r2, [pc, #36]	; (8001124 <write2bytes+0x50>)
 8001100:	480a      	ldr	r0, [pc, #40]	; (800112c <write2bytes+0x58>)
 8001102:	f001 fac3 	bl	800268c <HAL_I2C_Master_Transmit>
 8001106:	4603      	mov	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <write2bytes+0x5c>)
 800110c:	701a      	strb	r2, [r3, #0]

    if ( ret != HAL_OK ) {
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <write2bytes+0x5c>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <write2bytes+0x46>
    	return false;
 8001116:	2300      	movs	r3, #0
 8001118:	e000      	b.n	800111c <write2bytes+0x48>
    } else {
    	return true;
 800111a:	2301      	movs	r3, #1
    }
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200000d4 	.word	0x200000d4
 8001128:	200000c0 	.word	0x200000c0
 800112c:	20000104 	.word	0x20000104
 8001130:	200000e9 	.word	0x200000e9

08001134 <readRawData>:

/// @brief Read raw data from IMU
void readRawData()
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af02      	add	r7, sp, #8
    // Subroutine for reading the raw data
	buf[0] = ACCEL_XOUT_H;
 800113a:	4b3d      	ldr	r3, [pc, #244]	; (8001230 <readRawData+0xfc>)
 800113c:	223b      	movs	r2, #59	; 0x3b
 800113e:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, _addr, buf, 1, HAL_MAX_DELAY);
 8001140:	4b3c      	ldr	r3, [pc, #240]	; (8001234 <readRawData+0x100>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b299      	uxth	r1, r3
 8001146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2301      	movs	r3, #1
 800114e:	4a38      	ldr	r2, [pc, #224]	; (8001230 <readRawData+0xfc>)
 8001150:	4839      	ldr	r0, [pc, #228]	; (8001238 <readRawData+0x104>)
 8001152:	f001 fa9b 	bl	800268c <HAL_I2C_Master_Transmit>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	4b38      	ldr	r3, [pc, #224]	; (800123c <readRawData+0x108>)
 800115c:	701a      	strb	r2, [r3, #0]

    if ( ret == HAL_OK ) {
 800115e:	4b37      	ldr	r3, [pc, #220]	; (800123c <readRawData+0x108>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d160      	bne.n	8001228 <readRawData+0xf4>
    	ret = HAL_I2C_Master_Receive(&hi2c1, _addr, buf, 14, HAL_MAX_DELAY);
 8001166:	4b33      	ldr	r3, [pc, #204]	; (8001234 <readRawData+0x100>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b299      	uxth	r1, r3
 800116c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	230e      	movs	r3, #14
 8001174:	4a2e      	ldr	r2, [pc, #184]	; (8001230 <readRawData+0xfc>)
 8001176:	4830      	ldr	r0, [pc, #192]	; (8001238 <readRawData+0x104>)
 8001178:	f001 fb86 	bl	8002888 <HAL_I2C_Master_Receive>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	4b2e      	ldr	r3, [pc, #184]	; (800123c <readRawData+0x108>)
 8001182:	701a      	strb	r2, [r3, #0]
    	if ( ret == HAL_OK ) {
 8001184:	4b2d      	ldr	r3, [pc, #180]	; (800123c <readRawData+0x108>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d14d      	bne.n	8001228 <readRawData+0xf4>
    	    // Read raw data
    	    sensorRaw.ax = buf[0] << 8 | buf[1];
 800118c:	4b28      	ldr	r3, [pc, #160]	; (8001230 <readRawData+0xfc>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	4a27      	ldr	r2, [pc, #156]	; (8001230 <readRawData+0xfc>)
 8001194:	7852      	ldrb	r2, [r2, #1]
 8001196:	4313      	orrs	r3, r2
 8001198:	ee07 3a90 	vmov	s15, r3
 800119c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <readRawData+0x10c>)
 80011a2:	edc3 7a00 	vstr	s15, [r3]
    	    sensorRaw.ay = buf[2] << 8 | buf[3];
 80011a6:	4b22      	ldr	r3, [pc, #136]	; (8001230 <readRawData+0xfc>)
 80011a8:	789b      	ldrb	r3, [r3, #2]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	4a20      	ldr	r2, [pc, #128]	; (8001230 <readRawData+0xfc>)
 80011ae:	78d2      	ldrb	r2, [r2, #3]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ba:	4b21      	ldr	r3, [pc, #132]	; (8001240 <readRawData+0x10c>)
 80011bc:	edc3 7a01 	vstr	s15, [r3, #4]
    	    sensorRaw.az = buf[4] << 8 | buf[5];
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <readRawData+0xfc>)
 80011c2:	791b      	ldrb	r3, [r3, #4]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	4a1a      	ldr	r2, [pc, #104]	; (8001230 <readRawData+0xfc>)
 80011c8:	7952      	ldrb	r2, [r2, #5]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	ee07 3a90 	vmov	s15, r3
 80011d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <readRawData+0x10c>)
 80011d6:	edc3 7a02 	vstr	s15, [r3, #8]

    	    // temperature = buf[6] << 8 | buf[7];

    	    sensorRaw.gx = buf[8]  << 8 | buf[9];
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <readRawData+0xfc>)
 80011dc:	7a1b      	ldrb	r3, [r3, #8]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	4a13      	ldr	r2, [pc, #76]	; (8001230 <readRawData+0xfc>)
 80011e2:	7a52      	ldrb	r2, [r2, #9]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <readRawData+0x10c>)
 80011f0:	edc3 7a03 	vstr	s15, [r3, #12]
    	    sensorRaw.gy = buf[10] << 8 | buf[11];
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <readRawData+0xfc>)
 80011f6:	7a9b      	ldrb	r3, [r3, #10]
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <readRawData+0xfc>)
 80011fc:	7ad2      	ldrb	r2, [r2, #11]
 80011fe:	4313      	orrs	r3, r2
 8001200:	ee07 3a90 	vmov	s15, r3
 8001204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <readRawData+0x10c>)
 800120a:	edc3 7a04 	vstr	s15, [r3, #16]
    	    sensorRaw.gz = buf[12] << 8 | buf[13];
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <readRawData+0xfc>)
 8001210:	7b1b      	ldrb	r3, [r3, #12]
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <readRawData+0xfc>)
 8001216:	7b52      	ldrb	r2, [r2, #13]
 8001218:	4313      	orrs	r3, r2
 800121a:	ee07 3a90 	vmov	s15, r3
 800121e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <readRawData+0x10c>)
 8001224:	edc3 7a05 	vstr	s15, [r3, #20]
    	}
    }
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200000d4 	.word	0x200000d4
 8001234:	200000c0 	.word	0x200000c0
 8001238:	20000104 	.word	0x20000104
 800123c:	200000e9 	.word	0x200000e9
 8001240:	200000ec 	.word	0x200000ec

08001244 <IMU_calibrateGyro>:

/// @brief Find offsets for each axis of gyroscope.
/// @param numCalPoints Number of data points to average.
void IMU_calibrateGyro(uint16_t numCalPoints)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	80fb      	strh	r3, [r7, #6]
    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800124e:	2300      	movs	r3, #0
 8001250:	81fb      	strh	r3, [r7, #14]
 8001252:	e028      	b.n	80012a6 <IMU_calibrateGyro+0x62>
    {
        readRawData();
 8001254:	f7ff ff6e 	bl	8001134 <readRawData>
        gyroCal.x += sensorRaw.gx;
 8001258:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <IMU_calibrateGyro+0xc0>)
 800125a:	ed93 7a00 	vldr	s14, [r3]
 800125e:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <IMU_calibrateGyro+0xc4>)
 8001260:	edd3 7a03 	vldr	s15, [r3, #12]
 8001264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001268:	4b26      	ldr	r3, [pc, #152]	; (8001304 <IMU_calibrateGyro+0xc0>)
 800126a:	edc3 7a00 	vstr	s15, [r3]
        gyroCal.y += sensorRaw.gy;
 800126e:	4b25      	ldr	r3, [pc, #148]	; (8001304 <IMU_calibrateGyro+0xc0>)
 8001270:	ed93 7a01 	vldr	s14, [r3, #4]
 8001274:	4b24      	ldr	r3, [pc, #144]	; (8001308 <IMU_calibrateGyro+0xc4>)
 8001276:	edd3 7a04 	vldr	s15, [r3, #16]
 800127a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <IMU_calibrateGyro+0xc0>)
 8001280:	edc3 7a01 	vstr	s15, [r3, #4]
        gyroCal.z += sensorRaw.gz;
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <IMU_calibrateGyro+0xc0>)
 8001286:	ed93 7a02 	vldr	s14, [r3, #8]
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <IMU_calibrateGyro+0xc4>)
 800128c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <IMU_calibrateGyro+0xc0>)
 8001296:	edc3 7a02 	vstr	s15, [r3, #8]
        HAL_Delay(3);
 800129a:	2003      	movs	r0, #3
 800129c:	f000 fdde 	bl	8001e5c <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 80012a0:	89fb      	ldrh	r3, [r7, #14]
 80012a2:	3301      	adds	r3, #1
 80012a4:	81fb      	strh	r3, [r7, #14]
 80012a6:	89fa      	ldrh	r2, [r7, #14]
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d3d2      	bcc.n	8001254 <IMU_calibrateGyro+0x10>
    }

    // Average the saved data points to find the gyroscope offset
    gyroCal.x /= (float)numCalPoints;
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <IMU_calibrateGyro+0xc0>)
 80012b0:	edd3 6a00 	vldr	s13, [r3]
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	ee07 3a90 	vmov	s15, r3
 80012ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <IMU_calibrateGyro+0xc0>)
 80012c4:	edc3 7a00 	vstr	s15, [r3]
    gyroCal.y /= (float)numCalPoints;
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <IMU_calibrateGyro+0xc0>)
 80012ca:	edd3 6a01 	vldr	s13, [r3, #4]
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <IMU_calibrateGyro+0xc0>)
 80012de:	edc3 7a01 	vstr	s15, [r3, #4]
    gyroCal.z /= (float)numCalPoints;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <IMU_calibrateGyro+0xc0>)
 80012e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	ee07 3a90 	vmov	s15, r3
 80012ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f6:	4b03      	ldr	r3, [pc, #12]	; (8001304 <IMU_calibrateGyro+0xc0>)
 80012f8:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200000c8 	.word	0x200000c8
 8001308:	200000ec 	.word	0x200000ec

0800130c <readProcessedData>:

/// @brief Calculate the real world sensor values
void readProcessedData(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
    // Get raw values from the IMU
    readRawData();
 8001310:	f7ff ff10 	bl	8001134 <readRawData>

    // Convert accelerometer values to g's
    sensorProcessed.ax = sensorRaw.ax / aRes;
 8001314:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <readProcessedData+0xd4>)
 8001316:	edd3 6a00 	vldr	s13, [r3]
 800131a:	4b32      	ldr	r3, [pc, #200]	; (80013e4 <readProcessedData+0xd8>)
 800131c:	ed93 7a00 	vldr	s14, [r3]
 8001320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001324:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <readProcessedData+0xdc>)
 8001326:	edc3 7a00 	vstr	s15, [r3]
    sensorProcessed.ay = sensorRaw.ay / aRes;
 800132a:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <readProcessedData+0xd4>)
 800132c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001330:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <readProcessedData+0xd8>)
 8001332:	ed93 7a00 	vldr	s14, [r3]
 8001336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133a:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <readProcessedData+0xdc>)
 800133c:	edc3 7a01 	vstr	s15, [r3, #4]
    sensorProcessed.az = sensorRaw.az / aRes;
 8001340:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <readProcessedData+0xd4>)
 8001342:	edd3 6a02 	vldr	s13, [r3, #8]
 8001346:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <readProcessedData+0xd8>)
 8001348:	ed93 7a00 	vldr	s14, [r3]
 800134c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001350:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <readProcessedData+0xdc>)
 8001352:	edc3 7a02 	vstr	s15, [r3, #8]

    // Compensate for gyro offset
    sensorProcessed.gx = sensorRaw.gx - gyroCal.x;
 8001356:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <readProcessedData+0xd4>)
 8001358:	ed93 7a03 	vldr	s14, [r3, #12]
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <readProcessedData+0xe0>)
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <readProcessedData+0xdc>)
 8001368:	edc3 7a03 	vstr	s15, [r3, #12]
    sensorProcessed.gy = sensorRaw.gy - gyroCal.y;
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <readProcessedData+0xd4>)
 800136e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001372:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <readProcessedData+0xe0>)
 8001374:	edd3 7a01 	vldr	s15, [r3, #4]
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <readProcessedData+0xdc>)
 800137e:	edc3 7a04 	vstr	s15, [r3, #16]
    sensorProcessed.gz = sensorRaw.gz - gyroCal.z;
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <readProcessedData+0xd4>)
 8001384:	ed93 7a05 	vldr	s14, [r3, #20]
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <readProcessedData+0xe0>)
 800138a:	edd3 7a02 	vldr	s15, [r3, #8]
 800138e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <readProcessedData+0xdc>)
 8001394:	edc3 7a05 	vstr	s15, [r3, #20]

    // Convert gyro values to deg/s
    sensorProcessed.gx /= gRes;
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <readProcessedData+0xdc>)
 800139a:	edd3 6a03 	vldr	s13, [r3, #12]
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <readProcessedData+0xe4>)
 80013a0:	ed93 7a00 	vldr	s14, [r3]
 80013a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <readProcessedData+0xdc>)
 80013aa:	edc3 7a03 	vstr	s15, [r3, #12]
    sensorProcessed.gy /= gRes;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <readProcessedData+0xdc>)
 80013b0:	edd3 6a04 	vldr	s13, [r3, #16]
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <readProcessedData+0xe4>)
 80013b6:	ed93 7a00 	vldr	s14, [r3]
 80013ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <readProcessedData+0xdc>)
 80013c0:	edc3 7a04 	vstr	s15, [r3, #16]
    sensorProcessed.gz /= gRes;
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <readProcessedData+0xdc>)
 80013c6:	edd3 6a05 	vldr	s13, [r3, #20]
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <readProcessedData+0xe4>)
 80013cc:	ed93 7a00 	vldr	s14, [r3]
 80013d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <readProcessedData+0xdc>)
 80013d6:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200000ec 	.word	0x200000ec
 80013e4:	200000c4 	.word	0x200000c4
 80013e8:	2000009c 	.word	0x2000009c
 80013ec:	200000c8 	.word	0x200000c8
 80013f0:	200000e4 	.word	0x200000e4
 80013f4:	00000000 	.word	0x00000000

080013f8 <IMU_calcAttitude>:

/// @brief Calculate the attitude of the sensor in degrees using a complementary filter
/// @param tau Time constant relating to the weighting of gyroscope vs accelerometer.
void IMU_calcAttitude(void)
{
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
    // Read calibrated data
    readProcessedData();
 80013fe:	f7ff ff85 	bl	800130c <readProcessedData>

    // Complementary filter
    float accelPitch = atan2(sensorProcessed.ay, sensorProcessed.az) * (180 / PI);
 8001402:	4b79      	ldr	r3, [pc, #484]	; (80015e8 <IMU_calcAttitude+0x1f0>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f8a6 	bl	8000558 <__aeabi_f2d>
 800140c:	4604      	mov	r4, r0
 800140e:	460d      	mov	r5, r1
 8001410:	4b75      	ldr	r3, [pc, #468]	; (80015e8 <IMU_calcAttitude+0x1f0>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f89f 	bl	8000558 <__aeabi_f2d>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	ec43 2b11 	vmov	d1, r2, r3
 8001422:	ec45 4b10 	vmov	d0, r4, r5
 8001426:	f003 fd81 	bl	8004f2c <atan2>
 800142a:	ec51 0b10 	vmov	r0, r1, d0
 800142e:	a366      	add	r3, pc, #408	; (adr r3, 80015c8 <IMU_calcAttitude+0x1d0>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	f7ff f8e8 	bl	8000608 <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fb7c 	bl	8000b3c <__aeabi_d2f>
 8001444:	4603      	mov	r3, r0
 8001446:	607b      	str	r3, [r7, #4]
    float accelRoll = atan2(sensorProcessed.ax, sensorProcessed.az) * (180 / PI);
 8001448:	4b67      	ldr	r3, [pc, #412]	; (80015e8 <IMU_calcAttitude+0x1f0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f883 	bl	8000558 <__aeabi_f2d>
 8001452:	4604      	mov	r4, r0
 8001454:	460d      	mov	r5, r1
 8001456:	4b64      	ldr	r3, [pc, #400]	; (80015e8 <IMU_calcAttitude+0x1f0>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f87c 	bl	8000558 <__aeabi_f2d>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	ec43 2b11 	vmov	d1, r2, r3
 8001468:	ec45 4b10 	vmov	d0, r4, r5
 800146c:	f003 fd5e 	bl	8004f2c <atan2>
 8001470:	ec51 0b10 	vmov	r0, r1, d0
 8001474:	a354      	add	r3, pc, #336	; (adr r3, 80015c8 <IMU_calcAttitude+0x1d0>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7ff f8c5 	bl	8000608 <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fb59 	bl	8000b3c <__aeabi_d2f>
 800148a:	4603      	mov	r3, r0
 800148c:	603b      	str	r3, [r7, #0]

    attitude.r = tau * (attitude.r - sensorProcessed.gy * dt) + (1 - tau) * accelRoll;
 800148e:	4b57      	ldr	r3, [pc, #348]	; (80015ec <IMU_calcAttitude+0x1f4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f860 	bl	8000558 <__aeabi_f2d>
 8001498:	4604      	mov	r4, r0
 800149a:	460d      	mov	r5, r1
 800149c:	4b52      	ldr	r3, [pc, #328]	; (80015e8 <IMU_calcAttitude+0x1f0>)
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff f859 	bl	8000558 <__aeabi_f2d>
 80014a6:	a34a      	add	r3, pc, #296	; (adr r3, 80015d0 <IMU_calcAttitude+0x1d8>)
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	f7ff f8ac 	bl	8000608 <__aeabi_dmul>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4620      	mov	r0, r4
 80014b6:	4629      	mov	r1, r5
 80014b8:	f7fe feee 	bl	8000298 <__aeabi_dsub>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	a344      	add	r3, pc, #272	; (adr r3, 80015d8 <IMU_calcAttitude+0x1e0>)
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	f7ff f89d 	bl	8000608 <__aeabi_dmul>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4614      	mov	r4, r2
 80014d4:	461d      	mov	r5, r3
 80014d6:	6838      	ldr	r0, [r7, #0]
 80014d8:	f7ff f83e 	bl	8000558 <__aeabi_f2d>
 80014dc:	a340      	add	r3, pc, #256	; (adr r3, 80015e0 <IMU_calcAttitude+0x1e8>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	f7ff f891 	bl	8000608 <__aeabi_dmul>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4620      	mov	r0, r4
 80014ec:	4629      	mov	r1, r5
 80014ee:	f7fe fed5 	bl	800029c <__adddf3>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	f7ff fb1f 	bl	8000b3c <__aeabi_d2f>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a3a      	ldr	r2, [pc, #232]	; (80015ec <IMU_calcAttitude+0x1f4>)
 8001502:	6013      	str	r3, [r2, #0]
    attitude.p = tau * (attitude.p + sensorProcessed.gx * dt) + (1 - tau) * accelPitch;
 8001504:	4b39      	ldr	r3, [pc, #228]	; (80015ec <IMU_calcAttitude+0x1f4>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f825 	bl	8000558 <__aeabi_f2d>
 800150e:	4604      	mov	r4, r0
 8001510:	460d      	mov	r5, r1
 8001512:	4b35      	ldr	r3, [pc, #212]	; (80015e8 <IMU_calcAttitude+0x1f0>)
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f81e 	bl	8000558 <__aeabi_f2d>
 800151c:	a32c      	add	r3, pc, #176	; (adr r3, 80015d0 <IMU_calcAttitude+0x1d8>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7ff f871 	bl	8000608 <__aeabi_dmul>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4620      	mov	r0, r4
 800152c:	4629      	mov	r1, r5
 800152e:	f7fe feb5 	bl	800029c <__adddf3>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	a327      	add	r3, pc, #156	; (adr r3, 80015d8 <IMU_calcAttitude+0x1e0>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	f7ff f862 	bl	8000608 <__aeabi_dmul>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4614      	mov	r4, r2
 800154a:	461d      	mov	r5, r3
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff f803 	bl	8000558 <__aeabi_f2d>
 8001552:	a323      	add	r3, pc, #140	; (adr r3, 80015e0 <IMU_calcAttitude+0x1e8>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff f856 	bl	8000608 <__aeabi_dmul>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4620      	mov	r0, r4
 8001562:	4629      	mov	r1, r5
 8001564:	f7fe fe9a 	bl	800029c <__adddf3>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	f7ff fae4 	bl	8000b3c <__aeabi_d2f>
 8001574:	4603      	mov	r3, r0
 8001576:	4a1d      	ldr	r2, [pc, #116]	; (80015ec <IMU_calcAttitude+0x1f4>)
 8001578:	6053      	str	r3, [r2, #4]
    attitude.y += sensorProcessed.gz * dt;
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <IMU_calcAttitude+0x1f4>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ffea 	bl	8000558 <__aeabi_f2d>
 8001584:	4604      	mov	r4, r0
 8001586:	460d      	mov	r5, r1
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <IMU_calcAttitude+0x1f0>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ffe3 	bl	8000558 <__aeabi_f2d>
 8001592:	a30f      	add	r3, pc, #60	; (adr r3, 80015d0 <IMU_calcAttitude+0x1d8>)
 8001594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001598:	f7ff f836 	bl	8000608 <__aeabi_dmul>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4620      	mov	r0, r4
 80015a2:	4629      	mov	r1, r5
 80015a4:	f7fe fe7a 	bl	800029c <__adddf3>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff fac4 	bl	8000b3c <__aeabi_d2f>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <IMU_calcAttitude+0x1f4>)
 80015b8:	6093      	str	r3, [r2, #8]
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bdb0      	pop	{r4, r5, r7, pc}
 80015c2:	bf00      	nop
 80015c4:	f3af 8000 	nop.w
 80015c8:	1a53b118 	.word	0x1a53b118
 80015cc:	404ca5dc 	.word	0x404ca5dc
 80015d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80015d4:	3f70624d 	.word	0x3f70624d
 80015d8:	f5c28f5c 	.word	0xf5c28f5c
 80015dc:	3fef5c28 	.word	0x3fef5c28
 80015e0:	47ae1480 	.word	0x47ae1480
 80015e4:	3f947ae1 	.word	0x3f947ae1
 80015e8:	2000009c 	.word	0x2000009c
 80015ec:	200000b4 	.word	0x200000b4

080015f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <MX_GPIO_Init+0xd0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a2c      	ldr	r2, [pc, #176]	; (80016c0 <MX_GPIO_Init+0xd0>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <MX_GPIO_Init+0xd0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <MX_GPIO_Init+0xd0>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a25      	ldr	r2, [pc, #148]	; (80016c0 <MX_GPIO_Init+0xd0>)
 800162c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b23      	ldr	r3, [pc, #140]	; (80016c0 <MX_GPIO_Init+0xd0>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <MX_GPIO_Init+0xd0>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a1e      	ldr	r2, [pc, #120]	; (80016c0 <MX_GPIO_Init+0xd0>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <MX_GPIO_Init+0xd0>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <MX_GPIO_Init+0xd0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <MX_GPIO_Init+0xd0>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <MX_GPIO_Init+0xd0>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001676:	2200      	movs	r2, #0
 8001678:	2120      	movs	r1, #32
 800167a:	4812      	ldr	r0, [pc, #72]	; (80016c4 <MX_GPIO_Init+0xd4>)
 800167c:	f000 fea8 	bl	80023d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001686:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800168a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4619      	mov	r1, r3
 8001696:	480c      	ldr	r0, [pc, #48]	; (80016c8 <MX_GPIO_Init+0xd8>)
 8001698:	f000 fd16 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800169c:	2320      	movs	r3, #32
 800169e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a0:	2301      	movs	r3, #1
 80016a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	4804      	ldr	r0, [pc, #16]	; (80016c4 <MX_GPIO_Init+0xd4>)
 80016b4:	f000 fd08 	bl	80020c8 <HAL_GPIO_Init>

}
 80016b8:	bf00      	nop
 80016ba:	3728      	adds	r7, #40	; 0x28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020000 	.word	0x40020000
 80016c8:	40020800 	.word	0x40020800

080016cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <MX_I2C1_Init+0x50>)
 80016d2:	4a13      	ldr	r2, [pc, #76]	; (8001720 <MX_I2C1_Init+0x54>)
 80016d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_I2C1_Init+0x50>)
 80016d8:	4a12      	ldr	r2, [pc, #72]	; (8001724 <MX_I2C1_Init+0x58>)
 80016da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_I2C1_Init+0x50>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_I2C1_Init+0x50>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_I2C1_Init+0x50>)
 80016ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016f0:	4b0a      	ldr	r3, [pc, #40]	; (800171c <MX_I2C1_Init+0x50>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_I2C1_Init+0x50>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <MX_I2C1_Init+0x50>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_I2C1_Init+0x50>)
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001708:	4804      	ldr	r0, [pc, #16]	; (800171c <MX_I2C1_Init+0x50>)
 800170a:	f000 fe7b 	bl	8002404 <HAL_I2C_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001714:	f000 f99e 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000104 	.word	0x20000104
 8001720:	40005400 	.word	0x40005400
 8001724:	000186a0 	.word	0x000186a0

08001728 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a19      	ldr	r2, [pc, #100]	; (80017ac <HAL_I2C_MspInit+0x84>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d12b      	bne.n	80017a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a17      	ldr	r2, [pc, #92]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001766:	23c0      	movs	r3, #192	; 0xc0
 8001768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176a:	2312      	movs	r3, #18
 800176c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001776:	2304      	movs	r3, #4
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	480c      	ldr	r0, [pc, #48]	; (80017b4 <HAL_I2C_MspInit+0x8c>)
 8001782:	f000 fca1 	bl	80020c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a08      	ldr	r2, [pc, #32]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 8001790:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017a2:	bf00      	nop
 80017a4:	3728      	adds	r7, #40	; 0x28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40005400 	.word	0x40005400
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020400 	.word	0x40020400

080017b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017be:	f000 fadb 	bl	8001d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c2:	f000 f887 	bl	80018d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c6:	f7ff ff13 	bl	80015f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017ca:	f000 fa39 	bl	8001c40 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80017ce:	f7ff ff7d 	bl	80016cc <MX_I2C1_Init>
  MX_TIM11_Init();
 80017d2:	f000 f9e9 	bl	8001ba8 <MX_TIM11_Init>


  sprintf((char*)serialBuf, "%d,%d,%d\r\n", 0, 0, 1);
 80017d6:	2301      	movs	r3, #1
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2300      	movs	r3, #0
 80017dc:	2200      	movs	r2, #0
 80017de:	4939      	ldr	r1, [pc, #228]	; (80018c4 <main+0x10c>)
 80017e0:	4839      	ldr	r0, [pc, #228]	; (80018c8 <main+0x110>)
 80017e2:	f002 ff75 	bl	80046d0 <siprintf>
  HAL_UART_Transmit(&huart2, serialBuf, strlen((char*)serialBuf), HAL_MAX_DELAY);
 80017e6:	4838      	ldr	r0, [pc, #224]	; (80018c8 <main+0x110>)
 80017e8:	f7fe fcfa 	bl	80001e0 <strlen>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017f4:	4934      	ldr	r1, [pc, #208]	; (80018c8 <main+0x110>)
 80017f6:	4835      	ldr	r0, [pc, #212]	; (80018cc <main+0x114>)
 80017f8:	f002 fc6f 	bl	80040da <HAL_UART_Transmit>



  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80017fc:	2201      	movs	r2, #1
 80017fe:	2120      	movs	r1, #32
 8001800:	4833      	ldr	r0, [pc, #204]	; (80018d0 <main+0x118>)
 8001802:	f000 fde5 	bl	80023d0 <HAL_GPIO_WritePin>

  IMU_init(AD0_LOW, AFS_4G, GFS_500DPS);
 8001806:	2201      	movs	r2, #1
 8001808:	2101      	movs	r1, #1
 800180a:	2068      	movs	r0, #104	; 0x68
 800180c:	f7ff fb62 	bl	8000ed4 <IMU_init>

  sprintf((char*)serialBuf, "%d,%d,%d\r\n", 0, 0, 2);
 8001810:	2302      	movs	r3, #2
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2300      	movs	r3, #0
 8001816:	2200      	movs	r2, #0
 8001818:	492a      	ldr	r1, [pc, #168]	; (80018c4 <main+0x10c>)
 800181a:	482b      	ldr	r0, [pc, #172]	; (80018c8 <main+0x110>)
 800181c:	f002 ff58 	bl	80046d0 <siprintf>
  HAL_UART_Transmit(&huart2, serialBuf, strlen((char*)serialBuf), HAL_MAX_DELAY);
 8001820:	4829      	ldr	r0, [pc, #164]	; (80018c8 <main+0x110>)
 8001822:	f7fe fcdd 	bl	80001e0 <strlen>
 8001826:	4603      	mov	r3, r0
 8001828:	b29a      	uxth	r2, r3
 800182a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800182e:	4926      	ldr	r1, [pc, #152]	; (80018c8 <main+0x110>)
 8001830:	4826      	ldr	r0, [pc, #152]	; (80018cc <main+0x114>)
 8001832:	f002 fc52 	bl	80040da <HAL_UART_Transmit>


  IMU_begin();
 8001836:	f7ff fb6d 	bl	8000f14 <IMU_begin>


  sprintf((char*)serialBuf, "%d,%d,%d\r\n", 0, 0, 3);
 800183a:	2303      	movs	r3, #3
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	2300      	movs	r3, #0
 8001840:	2200      	movs	r2, #0
 8001842:	4920      	ldr	r1, [pc, #128]	; (80018c4 <main+0x10c>)
 8001844:	4820      	ldr	r0, [pc, #128]	; (80018c8 <main+0x110>)
 8001846:	f002 ff43 	bl	80046d0 <siprintf>
  HAL_UART_Transmit(&huart2, serialBuf, strlen((char*)serialBuf), HAL_MAX_DELAY);
 800184a:	481f      	ldr	r0, [pc, #124]	; (80018c8 <main+0x110>)
 800184c:	f7fe fcc8 	bl	80001e0 <strlen>
 8001850:	4603      	mov	r3, r0
 8001852:	b29a      	uxth	r2, r3
 8001854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001858:	491b      	ldr	r1, [pc, #108]	; (80018c8 <main+0x110>)
 800185a:	481c      	ldr	r0, [pc, #112]	; (80018cc <main+0x114>)
 800185c:	f002 fc3d 	bl	80040da <HAL_UART_Transmit>

  readRawData();
 8001860:	f7ff fc68 	bl	8001134 <readRawData>

  sprintf((char*)serialBuf, "%d,%d,%d\r\n", 0, 0, 4);
 8001864:	2304      	movs	r3, #4
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2300      	movs	r3, #0
 800186a:	2200      	movs	r2, #0
 800186c:	4915      	ldr	r1, [pc, #84]	; (80018c4 <main+0x10c>)
 800186e:	4816      	ldr	r0, [pc, #88]	; (80018c8 <main+0x110>)
 8001870:	f002 ff2e 	bl	80046d0 <siprintf>
   HAL_UART_Transmit(&huart2, serialBuf, strlen((char*)serialBuf), HAL_MAX_DELAY);
 8001874:	4814      	ldr	r0, [pc, #80]	; (80018c8 <main+0x110>)
 8001876:	f7fe fcb3 	bl	80001e0 <strlen>
 800187a:	4603      	mov	r3, r0
 800187c:	b29a      	uxth	r2, r3
 800187e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001882:	4911      	ldr	r1, [pc, #68]	; (80018c8 <main+0x110>)
 8001884:	4811      	ldr	r0, [pc, #68]	; (80018cc <main+0x114>)
 8001886:	f002 fc28 	bl	80040da <HAL_UART_Transmit>

  IMU_calibrateGyro(10);
 800188a:	200a      	movs	r0, #10
 800188c:	f7ff fcda 	bl	8001244 <IMU_calibrateGyro>

  sprintf((char*)serialBuf, "%d,%d,%d\r\n", 0, 0, 5);
 8001890:	2305      	movs	r3, #5
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2300      	movs	r3, #0
 8001896:	2200      	movs	r2, #0
 8001898:	490a      	ldr	r1, [pc, #40]	; (80018c4 <main+0x10c>)
 800189a:	480b      	ldr	r0, [pc, #44]	; (80018c8 <main+0x110>)
 800189c:	f002 ff18 	bl	80046d0 <siprintf>
  HAL_UART_Transmit(&huart2, serialBuf, strlen((char*)serialBuf), HAL_MAX_DELAY);
 80018a0:	4809      	ldr	r0, [pc, #36]	; (80018c8 <main+0x110>)
 80018a2:	f7fe fc9d 	bl	80001e0 <strlen>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ae:	4906      	ldr	r1, [pc, #24]	; (80018c8 <main+0x110>)
 80018b0:	4806      	ldr	r0, [pc, #24]	; (80018cc <main+0x114>)
 80018b2:	f002 fc12 	bl	80040da <HAL_UART_Transmit>


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2120      	movs	r1, #32
 80018ba:	4805      	ldr	r0, [pc, #20]	; (80018d0 <main+0x118>)
 80018bc:	f000 fd88 	bl	80023d0 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <main+0x108>
 80018c2:	bf00      	nop
 80018c4:	08005438 	.word	0x08005438
 80018c8:	20000158 	.word	0x20000158
 80018cc:	200001bc 	.word	0x200001bc
 80018d0:	40020000 	.word	0x40020000

080018d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b094      	sub	sp, #80	; 0x50
 80018d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018da:	f107 0320 	add.w	r3, r7, #32
 80018de:	2230      	movs	r2, #48	; 0x30
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 feec 	bl	80046c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	4b29      	ldr	r3, [pc, #164]	; (80019a4 <SystemClock_Config+0xd0>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	4a28      	ldr	r2, [pc, #160]	; (80019a4 <SystemClock_Config+0xd0>)
 8001902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001906:	6413      	str	r3, [r2, #64]	; 0x40
 8001908:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <SystemClock_Config+0xd0>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001914:	2300      	movs	r3, #0
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <SystemClock_Config+0xd4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001920:	4a21      	ldr	r2, [pc, #132]	; (80019a8 <SystemClock_Config+0xd4>)
 8001922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <SystemClock_Config+0xd4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001934:	2302      	movs	r3, #2
 8001936:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001938:	2301      	movs	r3, #1
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800193c:	2310      	movs	r3, #16
 800193e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001940:	2302      	movs	r3, #2
 8001942:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001944:	2300      	movs	r3, #0
 8001946:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001948:	2310      	movs	r3, #16
 800194a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800194c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001950:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001952:	2304      	movs	r3, #4
 8001954:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001956:	2307      	movs	r3, #7
 8001958:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800195a:	f107 0320 	add.w	r3, r7, #32
 800195e:	4618      	mov	r0, r3
 8001960:	f001 fce6 	bl	8003330 <HAL_RCC_OscConfig>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800196a:	f000 f873 	bl	8001a54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800196e:	230f      	movs	r3, #15
 8001970:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001972:	2302      	movs	r3, #2
 8001974:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800197a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800197e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	2102      	movs	r1, #2
 800198a:	4618      	mov	r0, r3
 800198c:	f001 ff48 	bl	8003820 <HAL_RCC_ClockConfig>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001996:	f000 f85d 	bl	8001a54 <Error_Handler>
  }
}
 800199a:	bf00      	nop
 800199c:	3750      	adds	r7, #80	; 0x50
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40007000 	.word	0x40007000

080019ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim11 )
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a22      	ldr	r2, [pc, #136]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d13c      	bne.n	8001a36 <HAL_TIM_PeriodElapsedCallback+0x8a>
  {
	  IMU_calcAttitude();
 80019bc:	f7ff fd1c 	bl	80013f8 <IMU_calcAttitude>

	  int16_t R = attitude.r * 10;
 80019c0:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d2:	ee17 3a90 	vmov	r3, s15
 80019d6:	81fb      	strh	r3, [r7, #14]
	  int16_t P = attitude.r * 10;
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ea:	ee17 3a90 	vmov	r3, s15
 80019ee:	81bb      	strh	r3, [r7, #12]
	  int16_t Y = attitude.r * 10;
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a02:	ee17 3a90 	vmov	r3, s15
 8001a06:	817b      	strh	r3, [r7, #10]

      sprintf((char*)serialBuf, "%d,%d,%d\r\n", R, P, Y);
 8001a08:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a0c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001a10:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	460b      	mov	r3, r1
 8001a18:	490b      	ldr	r1, [pc, #44]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001a1a:	480c      	ldr	r0, [pc, #48]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001a1c:	f002 fe58 	bl	80046d0 <siprintf>
      HAL_UART_Transmit(&huart2, serialBuf, strlen((char*)serialBuf), HAL_MAX_DELAY);
 8001a20:	480a      	ldr	r0, [pc, #40]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001a22:	f7fe fbdd 	bl	80001e0 <strlen>
 8001a26:	4603      	mov	r3, r0
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a2e:	4907      	ldr	r1, [pc, #28]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001a30:	4807      	ldr	r0, [pc, #28]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001a32:	f002 fb52 	bl	80040da <HAL_UART_Transmit>

//    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  }
}
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000174 	.word	0x20000174
 8001a44:	200000b4 	.word	0x200000b4
 8001a48:	08005438 	.word	0x08005438
 8001a4c:	20000158 	.word	0x20000158
 8001a50:	200001bc 	.word	0x200001bc

08001a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a58:	b672      	cpsid	i
}
 8001a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <Error_Handler+0x8>
	...

08001a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_MspInit+0x4c>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <HAL_MspInit+0x4c>)
 8001a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a74:	6453      	str	r3, [r2, #68]	; 0x44
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_MspInit+0x4c>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_MspInit+0x4c>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	4a08      	ldr	r2, [pc, #32]	; (8001aac <HAL_MspInit+0x4c>)
 8001a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a90:	6413      	str	r3, [r2, #64]	; 0x40
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_MspInit+0x4c>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a9e:	2007      	movs	r0, #7
 8001aa0:	f000 fad0 	bl	8002044 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40023800 	.word	0x40023800

08001ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <NMI_Handler+0x4>

08001ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <HardFault_Handler+0x4>

08001abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <MemManage_Handler+0x4>

08001ac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <BusFault_Handler+0x4>

08001ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <UsageFault_Handler+0x4>

08001ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001afc:	f000 f98e 	bl	8001e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001b08:	4802      	ldr	r0, [pc, #8]	; (8001b14 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001b0a:	f002 f8d4 	bl	8003cb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000174 	.word	0x20000174

08001b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b20:	4a14      	ldr	r2, [pc, #80]	; (8001b74 <_sbrk+0x5c>)
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <_sbrk+0x60>)
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d102      	bne.n	8001b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <_sbrk+0x64>)
 8001b36:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <_sbrk+0x68>)
 8001b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <_sbrk+0x64>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d207      	bcs.n	8001b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b48:	f002 fd90 	bl	800466c <__errno>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	220c      	movs	r2, #12
 8001b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b56:	e009      	b.n	8001b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <_sbrk+0x64>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <_sbrk+0x64>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <_sbrk+0x64>)
 8001b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20018000 	.word	0x20018000
 8001b78:	00000400 	.word	0x00000400
 8001b7c:	2000008c 	.word	0x2000008c
 8001b80:	20000218 	.word	0x20000218

08001b84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <SystemInit+0x20>)
 8001b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b8e:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <SystemInit+0x20>)
 8001b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <MX_TIM11_Init+0x40>)
 8001bae:	4a0f      	ldr	r2, [pc, #60]	; (8001bec <MX_TIM11_Init+0x44>)
 8001bb0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8400-1;
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <MX_TIM11_Init+0x40>)
 8001bb4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001bb8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <MX_TIM11_Init+0x40>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 40-1;
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <MX_TIM11_Init+0x40>)
 8001bc2:	2227      	movs	r2, #39	; 0x27
 8001bc4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <MX_TIM11_Init+0x40>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <MX_TIM11_Init+0x40>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001bd2:	4805      	ldr	r0, [pc, #20]	; (8001be8 <MX_TIM11_Init+0x40>)
 8001bd4:	f002 f820 	bl	8003c18 <HAL_TIM_Base_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001bde:	f7ff ff39 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000174 	.word	0x20000174
 8001bec:	40014800 	.word	0x40014800

08001bf0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0e      	ldr	r2, [pc, #56]	; (8001c38 <HAL_TIM_Base_MspInit+0x48>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d115      	bne.n	8001c2e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <HAL_TIM_Base_MspInit+0x4c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	4a0c      	ldr	r2, [pc, #48]	; (8001c3c <HAL_TIM_Base_MspInit+0x4c>)
 8001c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c10:	6453      	str	r3, [r2, #68]	; 0x44
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_TIM_Base_MspInit+0x4c>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	201a      	movs	r0, #26
 8001c24:	f000 fa19 	bl	800205a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001c28:	201a      	movs	r0, #26
 8001c2a:	f000 fa32 	bl	8002092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40014800 	.word	0x40014800
 8001c3c:	40023800 	.word	0x40023800

08001c40 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <MX_USART2_UART_Init+0x4c>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <MX_USART2_UART_Init+0x50>)
 8001c48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <MX_USART2_UART_Init+0x4c>)
 8001c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <MX_USART2_UART_Init+0x4c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <MX_USART2_UART_Init+0x4c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <MX_USART2_UART_Init+0x4c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MX_USART2_UART_Init+0x4c>)
 8001c66:	220c      	movs	r2, #12
 8001c68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <MX_USART2_UART_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <MX_USART2_UART_Init+0x4c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c76:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_USART2_UART_Init+0x4c>)
 8001c78:	f002 f9e2 	bl	8004040 <HAL_UART_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c82:	f7ff fee7 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200001bc 	.word	0x200001bc
 8001c90:	40004400 	.word	0x40004400

08001c94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a19      	ldr	r2, [pc, #100]	; (8001d18 <HAL_UART_MspInit+0x84>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d12b      	bne.n	8001d0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_UART_MspInit+0x88>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <HAL_UART_MspInit+0x88>)
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <HAL_UART_MspInit+0x88>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_UART_MspInit+0x88>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a10      	ldr	r2, [pc, #64]	; (8001d1c <HAL_UART_MspInit+0x88>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <HAL_UART_MspInit+0x88>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cee:	230c      	movs	r3, #12
 8001cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cfe:	2307      	movs	r3, #7
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	4619      	mov	r1, r3
 8001d08:	4805      	ldr	r0, [pc, #20]	; (8001d20 <HAL_UART_MspInit+0x8c>)
 8001d0a:	f000 f9dd 	bl	80020c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d0e:	bf00      	nop
 8001d10:	3728      	adds	r7, #40	; 0x28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40004400 	.word	0x40004400
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40020000 	.word	0x40020000

08001d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d28:	480d      	ldr	r0, [pc, #52]	; (8001d60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d2a:	490e      	ldr	r1, [pc, #56]	; (8001d64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d30:	e002      	b.n	8001d38 <LoopCopyDataInit>

08001d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d36:	3304      	adds	r3, #4

08001d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d3c:	d3f9      	bcc.n	8001d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3e:	4a0b      	ldr	r2, [pc, #44]	; (8001d6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d40:	4c0b      	ldr	r4, [pc, #44]	; (8001d70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d44:	e001      	b.n	8001d4a <LoopFillZerobss>

08001d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d48:	3204      	adds	r2, #4

08001d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d4c:	d3fb      	bcc.n	8001d46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d4e:	f7ff ff19 	bl	8001b84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d52:	f002 fc91 	bl	8004678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d56:	f7ff fd2f 	bl	80017b8 <main>
  bx  lr    
 8001d5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d68:	08005510 	.word	0x08005510
  ldr r2, =_sbss
 8001d6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d70:	20000214 	.word	0x20000214

08001d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d74:	e7fe      	b.n	8001d74 <ADC_IRQHandler>
	...

08001d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d7c:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0d      	ldr	r2, [pc, #52]	; (8001db8 <HAL_Init+0x40>)
 8001d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_Init+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <HAL_Init+0x40>)
 8001d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_Init+0x40>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a07      	ldr	r2, [pc, #28]	; (8001db8 <HAL_Init+0x40>)
 8001d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da0:	2003      	movs	r0, #3
 8001da2:	f000 f94f 	bl	8002044 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da6:	2000      	movs	r0, #0
 8001da8:	f000 f808 	bl	8001dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dac:	f7ff fe58 	bl	8001a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023c00 	.word	0x40023c00

08001dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_InitTick+0x54>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_InitTick+0x58>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 f967 	bl	80020ae <HAL_SYSTICK_Config>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00e      	b.n	8001e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b0f      	cmp	r3, #15
 8001dee:	d80a      	bhi.n	8001e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df0:	2200      	movs	r2, #0
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001df8:	f000 f92f 	bl	800205a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dfc:	4a06      	ldr	r2, [pc, #24]	; (8001e18 <HAL_InitTick+0x5c>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e000      	b.n	8001e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000000 	.word	0x20000000
 8001e14:	20000008 	.word	0x20000008
 8001e18:	20000004 	.word	0x20000004

08001e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_IncTick+0x20>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_IncTick+0x24>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <HAL_IncTick+0x24>)
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20000008 	.word	0x20000008
 8001e40:	20000200 	.word	0x20000200

08001e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return uwTick;
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <HAL_GetTick+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000200 	.word	0x20000200

08001e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e64:	f7ff ffee 	bl	8001e44 <HAL_GetTick>
 8001e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e74:	d005      	beq.n	8001e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <HAL_Delay+0x44>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e82:	bf00      	nop
 8001e84:	f7ff ffde 	bl	8001e44 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d8f7      	bhi.n	8001e84 <HAL_Delay+0x28>
  {
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000008 	.word	0x20000008

08001ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ed6:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	60d3      	str	r3, [r2, #12]
}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	0a1b      	lsrs	r3, r3, #8
 8001ef6:	f003 0307 	and.w	r3, r3, #7
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	db0b      	blt.n	8001f32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	f003 021f 	and.w	r2, r3, #31
 8001f20:	4907      	ldr	r1, [pc, #28]	; (8001f40 <__NVIC_EnableIRQ+0x38>)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	095b      	lsrs	r3, r3, #5
 8001f28:	2001      	movs	r0, #1
 8001f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000e100 	.word	0xe000e100

08001f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	6039      	str	r1, [r7, #0]
 8001f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	db0a      	blt.n	8001f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	490c      	ldr	r1, [pc, #48]	; (8001f90 <__NVIC_SetPriority+0x4c>)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	0112      	lsls	r2, r2, #4
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	440b      	add	r3, r1
 8001f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f6c:	e00a      	b.n	8001f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4908      	ldr	r1, [pc, #32]	; (8001f94 <__NVIC_SetPriority+0x50>)
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	3b04      	subs	r3, #4
 8001f7c:	0112      	lsls	r2, r2, #4
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	440b      	add	r3, r1
 8001f82:	761a      	strb	r2, [r3, #24]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000e100 	.word	0xe000e100
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b089      	sub	sp, #36	; 0x24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f1c3 0307 	rsb	r3, r3, #7
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	bf28      	it	cs
 8001fb6:	2304      	movcs	r3, #4
 8001fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	2b06      	cmp	r3, #6
 8001fc0:	d902      	bls.n	8001fc8 <NVIC_EncodePriority+0x30>
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3b03      	subs	r3, #3
 8001fc6:	e000      	b.n	8001fca <NVIC_EncodePriority+0x32>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	401a      	ands	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	43d9      	mvns	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	4313      	orrs	r3, r2
         );
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3724      	adds	r7, #36	; 0x24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002010:	d301      	bcc.n	8002016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002012:	2301      	movs	r3, #1
 8002014:	e00f      	b.n	8002036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002016:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <SysTick_Config+0x40>)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3b01      	subs	r3, #1
 800201c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201e:	210f      	movs	r1, #15
 8002020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002024:	f7ff ff8e 	bl	8001f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <SysTick_Config+0x40>)
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202e:	4b04      	ldr	r3, [pc, #16]	; (8002040 <SysTick_Config+0x40>)
 8002030:	2207      	movs	r2, #7
 8002032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	e000e010 	.word	0xe000e010

08002044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ff29 	bl	8001ea4 <__NVIC_SetPriorityGrouping>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800205a:	b580      	push	{r7, lr}
 800205c:	b086      	sub	sp, #24
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800206c:	f7ff ff3e 	bl	8001eec <__NVIC_GetPriorityGrouping>
 8002070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	6978      	ldr	r0, [r7, #20]
 8002078:	f7ff ff8e 	bl	8001f98 <NVIC_EncodePriority>
 800207c:	4602      	mov	r2, r0
 800207e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff5d 	bl	8001f44 <__NVIC_SetPriority>
}
 800208a:	bf00      	nop
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	4603      	mov	r3, r0
 800209a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff31 	bl	8001f08 <__NVIC_EnableIRQ>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff ffa2 	bl	8002000 <SysTick_Config>
 80020bc:	4603      	mov	r3, r0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	; 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020da:	2300      	movs	r3, #0
 80020dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	e159      	b.n	8002398 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020e4:	2201      	movs	r2, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	f040 8148 	bne.w	8002392 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	2b01      	cmp	r3, #1
 800210c:	d005      	beq.n	800211a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002116:	2b02      	cmp	r3, #2
 8002118:	d130      	bne.n	800217c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	2203      	movs	r2, #3
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002150:	2201      	movs	r2, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 0201 	and.w	r2, r3, #1
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b03      	cmp	r3, #3
 8002186:	d017      	beq.n	80021b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d123      	bne.n	800220c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	08da      	lsrs	r2, r3, #3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3208      	adds	r2, #8
 80021cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	220f      	movs	r2, #15
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	08da      	lsrs	r2, r3, #3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3208      	adds	r2, #8
 8002206:	69b9      	ldr	r1, [r7, #24]
 8002208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	2203      	movs	r2, #3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0203 	and.w	r2, r3, #3
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 80a2 	beq.w	8002392 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	4b57      	ldr	r3, [pc, #348]	; (80023b0 <HAL_GPIO_Init+0x2e8>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	4a56      	ldr	r2, [pc, #344]	; (80023b0 <HAL_GPIO_Init+0x2e8>)
 8002258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800225c:	6453      	str	r3, [r2, #68]	; 0x44
 800225e:	4b54      	ldr	r3, [pc, #336]	; (80023b0 <HAL_GPIO_Init+0x2e8>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800226a:	4a52      	ldr	r2, [pc, #328]	; (80023b4 <HAL_GPIO_Init+0x2ec>)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	089b      	lsrs	r3, r3, #2
 8002270:	3302      	adds	r3, #2
 8002272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	220f      	movs	r2, #15
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a49      	ldr	r2, [pc, #292]	; (80023b8 <HAL_GPIO_Init+0x2f0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d019      	beq.n	80022ca <HAL_GPIO_Init+0x202>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a48      	ldr	r2, [pc, #288]	; (80023bc <HAL_GPIO_Init+0x2f4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d013      	beq.n	80022c6 <HAL_GPIO_Init+0x1fe>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a47      	ldr	r2, [pc, #284]	; (80023c0 <HAL_GPIO_Init+0x2f8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00d      	beq.n	80022c2 <HAL_GPIO_Init+0x1fa>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a46      	ldr	r2, [pc, #280]	; (80023c4 <HAL_GPIO_Init+0x2fc>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d007      	beq.n	80022be <HAL_GPIO_Init+0x1f6>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a45      	ldr	r2, [pc, #276]	; (80023c8 <HAL_GPIO_Init+0x300>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_GPIO_Init+0x1f2>
 80022b6:	2304      	movs	r3, #4
 80022b8:	e008      	b.n	80022cc <HAL_GPIO_Init+0x204>
 80022ba:	2307      	movs	r3, #7
 80022bc:	e006      	b.n	80022cc <HAL_GPIO_Init+0x204>
 80022be:	2303      	movs	r3, #3
 80022c0:	e004      	b.n	80022cc <HAL_GPIO_Init+0x204>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e002      	b.n	80022cc <HAL_GPIO_Init+0x204>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <HAL_GPIO_Init+0x204>
 80022ca:	2300      	movs	r3, #0
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	f002 0203 	and.w	r2, r2, #3
 80022d2:	0092      	lsls	r2, r2, #2
 80022d4:	4093      	lsls	r3, r2
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022dc:	4935      	ldr	r1, [pc, #212]	; (80023b4 <HAL_GPIO_Init+0x2ec>)
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	089b      	lsrs	r3, r3, #2
 80022e2:	3302      	adds	r3, #2
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ea:	4b38      	ldr	r3, [pc, #224]	; (80023cc <HAL_GPIO_Init+0x304>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800230e:	4a2f      	ldr	r2, [pc, #188]	; (80023cc <HAL_GPIO_Init+0x304>)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002314:	4b2d      	ldr	r3, [pc, #180]	; (80023cc <HAL_GPIO_Init+0x304>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002338:	4a24      	ldr	r2, [pc, #144]	; (80023cc <HAL_GPIO_Init+0x304>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800233e:	4b23      	ldr	r3, [pc, #140]	; (80023cc <HAL_GPIO_Init+0x304>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002362:	4a1a      	ldr	r2, [pc, #104]	; (80023cc <HAL_GPIO_Init+0x304>)
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002368:	4b18      	ldr	r3, [pc, #96]	; (80023cc <HAL_GPIO_Init+0x304>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800238c:	4a0f      	ldr	r2, [pc, #60]	; (80023cc <HAL_GPIO_Init+0x304>)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3301      	adds	r3, #1
 8002396:	61fb      	str	r3, [r7, #28]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	2b0f      	cmp	r3, #15
 800239c:	f67f aea2 	bls.w	80020e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	3724      	adds	r7, #36	; 0x24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40013800 	.word	0x40013800
 80023b8:	40020000 	.word	0x40020000
 80023bc:	40020400 	.word	0x40020400
 80023c0:	40020800 	.word	0x40020800
 80023c4:	40020c00 	.word	0x40020c00
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40013c00 	.word	0x40013c00

080023d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	807b      	strh	r3, [r7, #2]
 80023dc:	4613      	mov	r3, r2
 80023de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023e0:	787b      	ldrb	r3, [r7, #1]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023e6:	887a      	ldrh	r2, [r7, #2]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023ec:	e003      	b.n	80023f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ee:	887b      	ldrh	r3, [r7, #2]
 80023f0:	041a      	lsls	r2, r3, #16
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	619a      	str	r2, [r3, #24]
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e12b      	b.n	800266e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff f97c 	bl	8001728 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2224      	movs	r2, #36	; 0x24
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002456:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002466:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002468:	f001 fbae 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 800246c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4a81      	ldr	r2, [pc, #516]	; (8002678 <HAL_I2C_Init+0x274>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d807      	bhi.n	8002488 <HAL_I2C_Init+0x84>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4a80      	ldr	r2, [pc, #512]	; (800267c <HAL_I2C_Init+0x278>)
 800247c:	4293      	cmp	r3, r2
 800247e:	bf94      	ite	ls
 8002480:	2301      	movls	r3, #1
 8002482:	2300      	movhi	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	e006      	b.n	8002496 <HAL_I2C_Init+0x92>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4a7d      	ldr	r2, [pc, #500]	; (8002680 <HAL_I2C_Init+0x27c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	bf94      	ite	ls
 8002490:	2301      	movls	r3, #1
 8002492:	2300      	movhi	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0e7      	b.n	800266e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4a78      	ldr	r2, [pc, #480]	; (8002684 <HAL_I2C_Init+0x280>)
 80024a2:	fba2 2303 	umull	r2, r3, r2, r3
 80024a6:	0c9b      	lsrs	r3, r3, #18
 80024a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4a6a      	ldr	r2, [pc, #424]	; (8002678 <HAL_I2C_Init+0x274>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d802      	bhi.n	80024d8 <HAL_I2C_Init+0xd4>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	3301      	adds	r3, #1
 80024d6:	e009      	b.n	80024ec <HAL_I2C_Init+0xe8>
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024de:	fb02 f303 	mul.w	r3, r2, r3
 80024e2:	4a69      	ldr	r2, [pc, #420]	; (8002688 <HAL_I2C_Init+0x284>)
 80024e4:	fba2 2303 	umull	r2, r3, r2, r3
 80024e8:	099b      	lsrs	r3, r3, #6
 80024ea:	3301      	adds	r3, #1
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	430b      	orrs	r3, r1
 80024f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	495c      	ldr	r1, [pc, #368]	; (8002678 <HAL_I2C_Init+0x274>)
 8002508:	428b      	cmp	r3, r1
 800250a:	d819      	bhi.n	8002540 <HAL_I2C_Init+0x13c>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1e59      	subs	r1, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fbb1 f3f3 	udiv	r3, r1, r3
 800251a:	1c59      	adds	r1, r3, #1
 800251c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002520:	400b      	ands	r3, r1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <HAL_I2C_Init+0x138>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1e59      	subs	r1, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	fbb1 f3f3 	udiv	r3, r1, r3
 8002534:	3301      	adds	r3, #1
 8002536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800253a:	e051      	b.n	80025e0 <HAL_I2C_Init+0x1dc>
 800253c:	2304      	movs	r3, #4
 800253e:	e04f      	b.n	80025e0 <HAL_I2C_Init+0x1dc>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d111      	bne.n	800256c <HAL_I2C_Init+0x168>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1e58      	subs	r0, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6859      	ldr	r1, [r3, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	440b      	add	r3, r1
 8002556:	fbb0 f3f3 	udiv	r3, r0, r3
 800255a:	3301      	adds	r3, #1
 800255c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002560:	2b00      	cmp	r3, #0
 8002562:	bf0c      	ite	eq
 8002564:	2301      	moveq	r3, #1
 8002566:	2300      	movne	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	e012      	b.n	8002592 <HAL_I2C_Init+0x18e>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	1e58      	subs	r0, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6859      	ldr	r1, [r3, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	0099      	lsls	r1, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002582:	3301      	adds	r3, #1
 8002584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_I2C_Init+0x196>
 8002596:	2301      	movs	r3, #1
 8002598:	e022      	b.n	80025e0 <HAL_I2C_Init+0x1dc>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10e      	bne.n	80025c0 <HAL_I2C_Init+0x1bc>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1e58      	subs	r0, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6859      	ldr	r1, [r3, #4]
 80025aa:	460b      	mov	r3, r1
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	440b      	add	r3, r1
 80025b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b4:	3301      	adds	r3, #1
 80025b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025be:	e00f      	b.n	80025e0 <HAL_I2C_Init+0x1dc>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1e58      	subs	r0, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6859      	ldr	r1, [r3, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	0099      	lsls	r1, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d6:	3301      	adds	r3, #1
 80025d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	6809      	ldr	r1, [r1, #0]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69da      	ldr	r2, [r3, #28]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800260e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6911      	ldr	r1, [r2, #16]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68d2      	ldr	r2, [r2, #12]
 800261a:	4311      	orrs	r1, r2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	430b      	orrs	r3, r1
 8002622:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2220      	movs	r2, #32
 800265a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	000186a0 	.word	0x000186a0
 800267c:	001e847f 	.word	0x001e847f
 8002680:	003d08ff 	.word	0x003d08ff
 8002684:	431bde83 	.word	0x431bde83
 8002688:	10624dd3 	.word	0x10624dd3

0800268c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af02      	add	r7, sp, #8
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	461a      	mov	r2, r3
 8002698:	460b      	mov	r3, r1
 800269a:	817b      	strh	r3, [r7, #10]
 800269c:	4613      	mov	r3, r2
 800269e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026a0:	f7ff fbd0 	bl	8001e44 <HAL_GetTick>
 80026a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b20      	cmp	r3, #32
 80026b0:	f040 80e0 	bne.w	8002874 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	2319      	movs	r3, #25
 80026ba:	2201      	movs	r2, #1
 80026bc:	4970      	ldr	r1, [pc, #448]	; (8002880 <HAL_I2C_Master_Transmit+0x1f4>)
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 fc58 	bl	8002f74 <I2C_WaitOnFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026ca:	2302      	movs	r3, #2
 80026cc:	e0d3      	b.n	8002876 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_I2C_Master_Transmit+0x50>
 80026d8:	2302      	movs	r3, #2
 80026da:	e0cc      	b.n	8002876 <HAL_I2C_Master_Transmit+0x1ea>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d007      	beq.n	8002702 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0201 	orr.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002710:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2221      	movs	r2, #33	; 0x21
 8002716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2210      	movs	r2, #16
 800271e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	893a      	ldrh	r2, [r7, #8]
 8002732:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4a50      	ldr	r2, [pc, #320]	; (8002884 <HAL_I2C_Master_Transmit+0x1f8>)
 8002742:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002744:	8979      	ldrh	r1, [r7, #10]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	6a3a      	ldr	r2, [r7, #32]
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 fac2 	bl	8002cd4 <I2C_MasterRequestWrite>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e08d      	b.n	8002876 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002770:	e066      	b.n	8002840 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	6a39      	ldr	r1, [r7, #32]
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 fcd2 	bl	8003120 <I2C_WaitOnTXEFlagUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00d      	beq.n	800279e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	2b04      	cmp	r3, #4
 8002788:	d107      	bne.n	800279a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002798:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e06b      	b.n	8002876 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	781a      	ldrb	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d11b      	bne.n	8002814 <HAL_I2C_Master_Transmit+0x188>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d017      	beq.n	8002814 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	781a      	ldrb	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	6a39      	ldr	r1, [r7, #32]
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fcc2 	bl	80031a2 <I2C_WaitOnBTFFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00d      	beq.n	8002840 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	2b04      	cmp	r3, #4
 800282a:	d107      	bne.n	800283c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e01a      	b.n	8002876 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002844:	2b00      	cmp	r3, #0
 8002846:	d194      	bne.n	8002772 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	e000      	b.n	8002876 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002874:	2302      	movs	r3, #2
  }
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	00100002 	.word	0x00100002
 8002884:	ffff0000 	.word	0xffff0000

08002888 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08c      	sub	sp, #48	; 0x30
 800288c:	af02      	add	r7, sp, #8
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	607a      	str	r2, [r7, #4]
 8002892:	461a      	mov	r2, r3
 8002894:	460b      	mov	r3, r1
 8002896:	817b      	strh	r3, [r7, #10]
 8002898:	4613      	mov	r3, r2
 800289a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800289c:	f7ff fad2 	bl	8001e44 <HAL_GetTick>
 80028a0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	f040 820b 	bne.w	8002cc6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	2319      	movs	r3, #25
 80028b6:	2201      	movs	r2, #1
 80028b8:	497c      	ldr	r1, [pc, #496]	; (8002aac <HAL_I2C_Master_Receive+0x224>)
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 fb5a 	bl	8002f74 <I2C_WaitOnFlagUntilTimeout>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80028c6:	2302      	movs	r3, #2
 80028c8:	e1fe      	b.n	8002cc8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_I2C_Master_Receive+0x50>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e1f7      	b.n	8002cc8 <HAL_I2C_Master_Receive+0x440>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d007      	beq.n	80028fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0201 	orr.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800290c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2222      	movs	r2, #34	; 0x22
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2210      	movs	r2, #16
 800291a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	893a      	ldrh	r2, [r7, #8]
 800292e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4a5c      	ldr	r2, [pc, #368]	; (8002ab0 <HAL_I2C_Master_Receive+0x228>)
 800293e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002940:	8979      	ldrh	r1, [r7, #10]
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 fa46 	bl	8002dd8 <I2C_MasterRequestRead>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e1b8      	b.n	8002cc8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295a:	2b00      	cmp	r3, #0
 800295c:	d113      	bne.n	8002986 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800295e:	2300      	movs	r3, #0
 8002960:	623b      	str	r3, [r7, #32]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	623b      	str	r3, [r7, #32]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	623b      	str	r3, [r7, #32]
 8002972:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	e18c      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298a:	2b01      	cmp	r3, #1
 800298c:	d11b      	bne.n	80029c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800299c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	e16c      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d11b      	bne.n	8002a06 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ee:	2300      	movs	r3, #0
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	61bb      	str	r3, [r7, #24]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	e14c      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a2c:	e138      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	f200 80f1 	bhi.w	8002c1a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d123      	bne.n	8002a88 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 fbed 	bl	8003224 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e139      	b.n	8002cc8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a86:	e10b      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d14e      	bne.n	8002b2e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	2200      	movs	r2, #0
 8002a98:	4906      	ldr	r1, [pc, #24]	; (8002ab4 <HAL_I2C_Master_Receive+0x22c>)
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 fa6a 	bl	8002f74 <I2C_WaitOnFlagUntilTimeout>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d008      	beq.n	8002ab8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e10e      	b.n	8002cc8 <HAL_I2C_Master_Receive+0x440>
 8002aaa:	bf00      	nop
 8002aac:	00100002 	.word	0x00100002
 8002ab0:	ffff0000 	.word	0xffff0000
 8002ab4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691a      	ldr	r2, [r3, #16]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b2c:	e0b8      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b34:	2200      	movs	r2, #0
 8002b36:	4966      	ldr	r1, [pc, #408]	; (8002cd0 <HAL_I2C_Master_Receive+0x448>)
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 fa1b 	bl	8002f74 <I2C_WaitOnFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0bf      	b.n	8002cc8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b90:	2200      	movs	r2, #0
 8002b92:	494f      	ldr	r1, [pc, #316]	; (8002cd0 <HAL_I2C_Master_Receive+0x448>)
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 f9ed 	bl	8002f74 <I2C_WaitOnFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e091      	b.n	8002cc8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c18:	e042      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 fb00 	bl	8003224 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e04c      	b.n	8002cc8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d118      	bne.n	8002ca0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f47f aec2 	bne.w	8002a2e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2220      	movs	r2, #32
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e000      	b.n	8002cc8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002cc6:	2302      	movs	r3, #2
  }
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3728      	adds	r7, #40	; 0x28
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	00010004 	.word	0x00010004

08002cd4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d006      	beq.n	8002cfe <I2C_MasterRequestWrite+0x2a>
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d003      	beq.n	8002cfe <I2C_MasterRequestWrite+0x2a>
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cfc:	d108      	bne.n	8002d10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	e00b      	b.n	8002d28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	2b12      	cmp	r3, #18
 8002d16:	d107      	bne.n	8002d28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f91d 	bl	8002f74 <I2C_WaitOnFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00d      	beq.n	8002d5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d4e:	d103      	bne.n	8002d58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e035      	b.n	8002dc8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d64:	d108      	bne.n	8002d78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d66:	897b      	ldrh	r3, [r7, #10]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d74:	611a      	str	r2, [r3, #16]
 8002d76:	e01b      	b.n	8002db0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d78:	897b      	ldrh	r3, [r7, #10]
 8002d7a:	11db      	asrs	r3, r3, #7
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	f003 0306 	and.w	r3, r3, #6
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f063 030f 	orn	r3, r3, #15
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	490e      	ldr	r1, [pc, #56]	; (8002dd0 <I2C_MasterRequestWrite+0xfc>)
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f943 	bl	8003022 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e010      	b.n	8002dc8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002da6:	897b      	ldrh	r3, [r7, #10]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	4907      	ldr	r1, [pc, #28]	; (8002dd4 <I2C_MasterRequestWrite+0x100>)
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f933 	bl	8003022 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	00010008 	.word	0x00010008
 8002dd4:	00010002 	.word	0x00010002

08002dd8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	460b      	mov	r3, r1
 8002de6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dfc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d006      	beq.n	8002e12 <I2C_MasterRequestRead+0x3a>
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d003      	beq.n	8002e12 <I2C_MasterRequestRead+0x3a>
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e10:	d108      	bne.n	8002e24 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	e00b      	b.n	8002e3c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	2b11      	cmp	r3, #17
 8002e2a:	d107      	bne.n	8002e3c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f893 	bl	8002f74 <I2C_WaitOnFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00d      	beq.n	8002e70 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e62:	d103      	bne.n	8002e6c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e079      	b.n	8002f64 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e78:	d108      	bne.n	8002e8c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e7a:	897b      	ldrh	r3, [r7, #10]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	611a      	str	r2, [r3, #16]
 8002e8a:	e05f      	b.n	8002f4c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e8c:	897b      	ldrh	r3, [r7, #10]
 8002e8e:	11db      	asrs	r3, r3, #7
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f003 0306 	and.w	r3, r3, #6
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	f063 030f 	orn	r3, r3, #15
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4930      	ldr	r1, [pc, #192]	; (8002f6c <I2C_MasterRequestRead+0x194>)
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f8b9 	bl	8003022 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e054      	b.n	8002f64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002eba:	897b      	ldrh	r3, [r7, #10]
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	4929      	ldr	r1, [pc, #164]	; (8002f70 <I2C_MasterRequestRead+0x198>)
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f8a9 	bl	8003022 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e044      	b.n	8002f64 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002efe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 f831 	bl	8002f74 <I2C_WaitOnFlagUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00d      	beq.n	8002f34 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f26:	d103      	bne.n	8002f30 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e017      	b.n	8002f64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f34:	897b      	ldrh	r3, [r7, #10]
 8002f36:	11db      	asrs	r3, r3, #7
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f003 0306 	and.w	r3, r3, #6
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	f063 030e 	orn	r3, r3, #14
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	4907      	ldr	r1, [pc, #28]	; (8002f70 <I2C_MasterRequestRead+0x198>)
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 f865 	bl	8003022 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	00010008 	.word	0x00010008
 8002f70:	00010002 	.word	0x00010002

08002f74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f84:	e025      	b.n	8002fd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f8c:	d021      	beq.n	8002fd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8e:	f7fe ff59 	bl	8001e44 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d302      	bcc.n	8002fa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d116      	bne.n	8002fd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f043 0220 	orr.w	r2, r3, #32
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e023      	b.n	800301a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	0c1b      	lsrs	r3, r3, #16
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d10d      	bne.n	8002ff8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bf0c      	ite	eq
 8002fee:	2301      	moveq	r3, #1
 8002ff0:	2300      	movne	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	e00c      	b.n	8003012 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	43da      	mvns	r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4013      	ands	r3, r2
 8003004:	b29b      	uxth	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	bf0c      	ite	eq
 800300a:	2301      	moveq	r3, #1
 800300c:	2300      	movne	r3, #0
 800300e:	b2db      	uxtb	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	429a      	cmp	r2, r3
 8003016:	d0b6      	beq.n	8002f86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003030:	e051      	b.n	80030d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003040:	d123      	bne.n	800308a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003050:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800305a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f043 0204 	orr.w	r2, r3, #4
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e046      	b.n	8003118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003090:	d021      	beq.n	80030d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003092:	f7fe fed7 	bl	8001e44 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d302      	bcc.n	80030a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d116      	bne.n	80030d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f043 0220 	orr.w	r2, r3, #32
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e020      	b.n	8003118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d10c      	bne.n	80030fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	43da      	mvns	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4013      	ands	r3, r2
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	bf14      	ite	ne
 80030f2:	2301      	movne	r3, #1
 80030f4:	2300      	moveq	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	e00b      	b.n	8003112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	43da      	mvns	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	4013      	ands	r3, r2
 8003106:	b29b      	uxth	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf14      	ite	ne
 800310c:	2301      	movne	r3, #1
 800310e:	2300      	moveq	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d18d      	bne.n	8003032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800312c:	e02d      	b.n	800318a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 f8ce 	bl	80032d0 <I2C_IsAcknowledgeFailed>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e02d      	b.n	800319a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003144:	d021      	beq.n	800318a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003146:	f7fe fe7d 	bl	8001e44 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	429a      	cmp	r2, r3
 8003154:	d302      	bcc.n	800315c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d116      	bne.n	800318a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f043 0220 	orr.w	r2, r3, #32
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e007      	b.n	800319a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003194:	2b80      	cmp	r3, #128	; 0x80
 8003196:	d1ca      	bne.n	800312e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031ae:	e02d      	b.n	800320c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 f88d 	bl	80032d0 <I2C_IsAcknowledgeFailed>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e02d      	b.n	800321c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031c6:	d021      	beq.n	800320c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c8:	f7fe fe3c 	bl	8001e44 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d302      	bcc.n	80031de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d116      	bne.n	800320c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	f043 0220 	orr.w	r2, r3, #32
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e007      	b.n	800321c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b04      	cmp	r3, #4
 8003218:	d1ca      	bne.n	80031b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003230:	e042      	b.n	80032b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b10      	cmp	r3, #16
 800323e:	d119      	bne.n	8003274 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 0210 	mvn.w	r2, #16
 8003248:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e029      	b.n	80032c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003274:	f7fe fde6 	bl	8001e44 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	429a      	cmp	r2, r3
 8003282:	d302      	bcc.n	800328a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d116      	bne.n	80032b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	f043 0220 	orr.w	r2, r3, #32
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e007      	b.n	80032c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c2:	2b40      	cmp	r3, #64	; 0x40
 80032c4:	d1b5      	bne.n	8003232 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e6:	d11b      	bne.n	8003320 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	f043 0204 	orr.w	r2, r3, #4
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
	...

08003330 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e264      	b.n	800380c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d075      	beq.n	800343a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800334e:	4ba3      	ldr	r3, [pc, #652]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b04      	cmp	r3, #4
 8003358:	d00c      	beq.n	8003374 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800335a:	4ba0      	ldr	r3, [pc, #640]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003362:	2b08      	cmp	r3, #8
 8003364:	d112      	bne.n	800338c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003366:	4b9d      	ldr	r3, [pc, #628]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800336e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003372:	d10b      	bne.n	800338c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003374:	4b99      	ldr	r3, [pc, #612]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d05b      	beq.n	8003438 <HAL_RCC_OscConfig+0x108>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d157      	bne.n	8003438 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e23f      	b.n	800380c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003394:	d106      	bne.n	80033a4 <HAL_RCC_OscConfig+0x74>
 8003396:	4b91      	ldr	r3, [pc, #580]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a90      	ldr	r2, [pc, #576]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 800339c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	e01d      	b.n	80033e0 <HAL_RCC_OscConfig+0xb0>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCC_OscConfig+0x98>
 80033ae:	4b8b      	ldr	r3, [pc, #556]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a8a      	ldr	r2, [pc, #552]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4b88      	ldr	r3, [pc, #544]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a87      	ldr	r2, [pc, #540]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e00b      	b.n	80033e0 <HAL_RCC_OscConfig+0xb0>
 80033c8:	4b84      	ldr	r3, [pc, #528]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a83      	ldr	r2, [pc, #524]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 80033ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	4b81      	ldr	r3, [pc, #516]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a80      	ldr	r2, [pc, #512]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 80033da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d013      	beq.n	8003410 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fe fd2c 	bl	8001e44 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f0:	f7fe fd28 	bl	8001e44 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	; 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e204      	b.n	800380c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003402:	4b76      	ldr	r3, [pc, #472]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0xc0>
 800340e:	e014      	b.n	800343a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003410:	f7fe fd18 	bl	8001e44 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003418:	f7fe fd14 	bl	8001e44 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b64      	cmp	r3, #100	; 0x64
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e1f0      	b.n	800380c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342a:	4b6c      	ldr	r3, [pc, #432]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0xe8>
 8003436:	e000      	b.n	800343a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d063      	beq.n	800350e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003446:	4b65      	ldr	r3, [pc, #404]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00b      	beq.n	800346a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003452:	4b62      	ldr	r3, [pc, #392]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800345a:	2b08      	cmp	r3, #8
 800345c:	d11c      	bne.n	8003498 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800345e:	4b5f      	ldr	r3, [pc, #380]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d116      	bne.n	8003498 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346a:	4b5c      	ldr	r3, [pc, #368]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <HAL_RCC_OscConfig+0x152>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d001      	beq.n	8003482 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e1c4      	b.n	800380c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003482:	4b56      	ldr	r3, [pc, #344]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	4952      	ldr	r1, [pc, #328]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 8003492:	4313      	orrs	r3, r2
 8003494:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003496:	e03a      	b.n	800350e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d020      	beq.n	80034e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a0:	4b4f      	ldr	r3, [pc, #316]	; (80035e0 <HAL_RCC_OscConfig+0x2b0>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a6:	f7fe fccd 	bl	8001e44 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ae:	f7fe fcc9 	bl	8001e44 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e1a5      	b.n	800380c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c0:	4b46      	ldr	r3, [pc, #280]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f0      	beq.n	80034ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034cc:	4b43      	ldr	r3, [pc, #268]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4940      	ldr	r1, [pc, #256]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	600b      	str	r3, [r1, #0]
 80034e0:	e015      	b.n	800350e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e2:	4b3f      	ldr	r3, [pc, #252]	; (80035e0 <HAL_RCC_OscConfig+0x2b0>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7fe fcac 	bl	8001e44 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034f0:	f7fe fca8 	bl	8001e44 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e184      	b.n	800380c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003502:	4b36      	ldr	r3, [pc, #216]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d030      	beq.n	800357c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d016      	beq.n	8003550 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003522:	4b30      	ldr	r3, [pc, #192]	; (80035e4 <HAL_RCC_OscConfig+0x2b4>)
 8003524:	2201      	movs	r2, #1
 8003526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003528:	f7fe fc8c 	bl	8001e44 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003530:	f7fe fc88 	bl	8001e44 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e164      	b.n	800380c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003542:	4b26      	ldr	r3, [pc, #152]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 8003544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCC_OscConfig+0x200>
 800354e:	e015      	b.n	800357c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003550:	4b24      	ldr	r3, [pc, #144]	; (80035e4 <HAL_RCC_OscConfig+0x2b4>)
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003556:	f7fe fc75 	bl	8001e44 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800355e:	f7fe fc71 	bl	8001e44 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e14d      	b.n	800380c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003570:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 8003572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f0      	bne.n	800355e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 80a0 	beq.w	80036ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358a:	2300      	movs	r3, #0
 800358c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800358e:	4b13      	ldr	r3, [pc, #76]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10f      	bne.n	80035ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	4a0e      	ldr	r2, [pc, #56]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 80035a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a8:	6413      	str	r3, [r2, #64]	; 0x40
 80035aa:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b6:	2301      	movs	r3, #1
 80035b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ba:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_RCC_OscConfig+0x2b8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d121      	bne.n	800360a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c6:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <HAL_RCC_OscConfig+0x2b8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a07      	ldr	r2, [pc, #28]	; (80035e8 <HAL_RCC_OscConfig+0x2b8>)
 80035cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d2:	f7fe fc37 	bl	8001e44 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d8:	e011      	b.n	80035fe <HAL_RCC_OscConfig+0x2ce>
 80035da:	bf00      	nop
 80035dc:	40023800 	.word	0x40023800
 80035e0:	42470000 	.word	0x42470000
 80035e4:	42470e80 	.word	0x42470e80
 80035e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ec:	f7fe fc2a 	bl	8001e44 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e106      	b.n	800380c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fe:	4b85      	ldr	r3, [pc, #532]	; (8003814 <HAL_RCC_OscConfig+0x4e4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d106      	bne.n	8003620 <HAL_RCC_OscConfig+0x2f0>
 8003612:	4b81      	ldr	r3, [pc, #516]	; (8003818 <HAL_RCC_OscConfig+0x4e8>)
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	4a80      	ldr	r2, [pc, #512]	; (8003818 <HAL_RCC_OscConfig+0x4e8>)
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	6713      	str	r3, [r2, #112]	; 0x70
 800361e:	e01c      	b.n	800365a <HAL_RCC_OscConfig+0x32a>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b05      	cmp	r3, #5
 8003626:	d10c      	bne.n	8003642 <HAL_RCC_OscConfig+0x312>
 8003628:	4b7b      	ldr	r3, [pc, #492]	; (8003818 <HAL_RCC_OscConfig+0x4e8>)
 800362a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362c:	4a7a      	ldr	r2, [pc, #488]	; (8003818 <HAL_RCC_OscConfig+0x4e8>)
 800362e:	f043 0304 	orr.w	r3, r3, #4
 8003632:	6713      	str	r3, [r2, #112]	; 0x70
 8003634:	4b78      	ldr	r3, [pc, #480]	; (8003818 <HAL_RCC_OscConfig+0x4e8>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	4a77      	ldr	r2, [pc, #476]	; (8003818 <HAL_RCC_OscConfig+0x4e8>)
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	6713      	str	r3, [r2, #112]	; 0x70
 8003640:	e00b      	b.n	800365a <HAL_RCC_OscConfig+0x32a>
 8003642:	4b75      	ldr	r3, [pc, #468]	; (8003818 <HAL_RCC_OscConfig+0x4e8>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	4a74      	ldr	r2, [pc, #464]	; (8003818 <HAL_RCC_OscConfig+0x4e8>)
 8003648:	f023 0301 	bic.w	r3, r3, #1
 800364c:	6713      	str	r3, [r2, #112]	; 0x70
 800364e:	4b72      	ldr	r3, [pc, #456]	; (8003818 <HAL_RCC_OscConfig+0x4e8>)
 8003650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003652:	4a71      	ldr	r2, [pc, #452]	; (8003818 <HAL_RCC_OscConfig+0x4e8>)
 8003654:	f023 0304 	bic.w	r3, r3, #4
 8003658:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d015      	beq.n	800368e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003662:	f7fe fbef 	bl	8001e44 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003668:	e00a      	b.n	8003680 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800366a:	f7fe fbeb 	bl	8001e44 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	f241 3288 	movw	r2, #5000	; 0x1388
 8003678:	4293      	cmp	r3, r2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e0c5      	b.n	800380c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003680:	4b65      	ldr	r3, [pc, #404]	; (8003818 <HAL_RCC_OscConfig+0x4e8>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0ee      	beq.n	800366a <HAL_RCC_OscConfig+0x33a>
 800368c:	e014      	b.n	80036b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800368e:	f7fe fbd9 	bl	8001e44 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003694:	e00a      	b.n	80036ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003696:	f7fe fbd5 	bl	8001e44 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e0af      	b.n	800380c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ac:	4b5a      	ldr	r3, [pc, #360]	; (8003818 <HAL_RCC_OscConfig+0x4e8>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1ee      	bne.n	8003696 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036b8:	7dfb      	ldrb	r3, [r7, #23]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d105      	bne.n	80036ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036be:	4b56      	ldr	r3, [pc, #344]	; (8003818 <HAL_RCC_OscConfig+0x4e8>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	4a55      	ldr	r2, [pc, #340]	; (8003818 <HAL_RCC_OscConfig+0x4e8>)
 80036c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 809b 	beq.w	800380a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036d4:	4b50      	ldr	r3, [pc, #320]	; (8003818 <HAL_RCC_OscConfig+0x4e8>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 030c 	and.w	r3, r3, #12
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d05c      	beq.n	800379a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d141      	bne.n	800376c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e8:	4b4c      	ldr	r3, [pc, #304]	; (800381c <HAL_RCC_OscConfig+0x4ec>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ee:	f7fe fba9 	bl	8001e44 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f6:	f7fe fba5 	bl	8001e44 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e081      	b.n	800380c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003708:	4b43      	ldr	r3, [pc, #268]	; (8003818 <HAL_RCC_OscConfig+0x4e8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1f0      	bne.n	80036f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69da      	ldr	r2, [r3, #28]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	019b      	lsls	r3, r3, #6
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372a:	085b      	lsrs	r3, r3, #1
 800372c:	3b01      	subs	r3, #1
 800372e:	041b      	lsls	r3, r3, #16
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	061b      	lsls	r3, r3, #24
 8003738:	4937      	ldr	r1, [pc, #220]	; (8003818 <HAL_RCC_OscConfig+0x4e8>)
 800373a:	4313      	orrs	r3, r2
 800373c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800373e:	4b37      	ldr	r3, [pc, #220]	; (800381c <HAL_RCC_OscConfig+0x4ec>)
 8003740:	2201      	movs	r2, #1
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fe fb7e 	bl	8001e44 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374c:	f7fe fb7a 	bl	8001e44 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e056      	b.n	800380c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375e:	4b2e      	ldr	r3, [pc, #184]	; (8003818 <HAL_RCC_OscConfig+0x4e8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <HAL_RCC_OscConfig+0x41c>
 800376a:	e04e      	b.n	800380a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376c:	4b2b      	ldr	r3, [pc, #172]	; (800381c <HAL_RCC_OscConfig+0x4ec>)
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003772:	f7fe fb67 	bl	8001e44 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800377a:	f7fe fb63 	bl	8001e44 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e03f      	b.n	800380c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378c:	4b22      	ldr	r3, [pc, #136]	; (8003818 <HAL_RCC_OscConfig+0x4e8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1f0      	bne.n	800377a <HAL_RCC_OscConfig+0x44a>
 8003798:	e037      	b.n	800380a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e032      	b.n	800380c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037a6:	4b1c      	ldr	r3, [pc, #112]	; (8003818 <HAL_RCC_OscConfig+0x4e8>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d028      	beq.n	8003806 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037be:	429a      	cmp	r2, r3
 80037c0:	d121      	bne.n	8003806 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d11a      	bne.n	8003806 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037d6:	4013      	ands	r3, r2
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037de:	4293      	cmp	r3, r2
 80037e0:	d111      	bne.n	8003806 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ec:	085b      	lsrs	r3, r3, #1
 80037ee:	3b01      	subs	r3, #1
 80037f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d107      	bne.n	8003806 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003802:	429a      	cmp	r2, r3
 8003804:	d001      	beq.n	800380a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40007000 	.word	0x40007000
 8003818:	40023800 	.word	0x40023800
 800381c:	42470060 	.word	0x42470060

08003820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0cc      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003834:	4b68      	ldr	r3, [pc, #416]	; (80039d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d90c      	bls.n	800385c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b65      	ldr	r3, [pc, #404]	; (80039d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384a:	4b63      	ldr	r3, [pc, #396]	; (80039d8 <HAL_RCC_ClockConfig+0x1b8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0b8      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d020      	beq.n	80038aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003874:	4b59      	ldr	r3, [pc, #356]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	4a58      	ldr	r2, [pc, #352]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800387e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800388c:	4b53      	ldr	r3, [pc, #332]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	4a52      	ldr	r2, [pc, #328]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003896:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003898:	4b50      	ldr	r3, [pc, #320]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	494d      	ldr	r1, [pc, #308]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d044      	beq.n	8003940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d107      	bne.n	80038ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038be:	4b47      	ldr	r3, [pc, #284]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d119      	bne.n	80038fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e07f      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d003      	beq.n	80038de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038de:	4b3f      	ldr	r3, [pc, #252]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e06f      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ee:	4b3b      	ldr	r3, [pc, #236]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e067      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038fe:	4b37      	ldr	r3, [pc, #220]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f023 0203 	bic.w	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	4934      	ldr	r1, [pc, #208]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 800390c:	4313      	orrs	r3, r2
 800390e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003910:	f7fe fa98 	bl	8001e44 <HAL_GetTick>
 8003914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	e00a      	b.n	800392e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003918:	f7fe fa94 	bl	8001e44 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	; 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e04f      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	4b2b      	ldr	r3, [pc, #172]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 020c 	and.w	r2, r3, #12
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	429a      	cmp	r2, r3
 800393e:	d1eb      	bne.n	8003918 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003940:	4b25      	ldr	r3, [pc, #148]	; (80039d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d20c      	bcs.n	8003968 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394e:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003956:	4b20      	ldr	r3, [pc, #128]	; (80039d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e032      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003974:	4b19      	ldr	r3, [pc, #100]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	4916      	ldr	r1, [pc, #88]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	4313      	orrs	r3, r2
 8003984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d009      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003992:	4b12      	ldr	r3, [pc, #72]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	490e      	ldr	r1, [pc, #56]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039a6:	f000 f821 	bl	80039ec <HAL_RCC_GetSysClockFreq>
 80039aa:	4602      	mov	r2, r0
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	490a      	ldr	r1, [pc, #40]	; (80039e0 <HAL_RCC_ClockConfig+0x1c0>)
 80039b8:	5ccb      	ldrb	r3, [r1, r3]
 80039ba:	fa22 f303 	lsr.w	r3, r2, r3
 80039be:	4a09      	ldr	r2, [pc, #36]	; (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 80039c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039c2:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <HAL_RCC_ClockConfig+0x1c8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe f9f8 	bl	8001dbc <HAL_InitTick>

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023c00 	.word	0x40023c00
 80039dc:	40023800 	.word	0x40023800
 80039e0:	08005444 	.word	0x08005444
 80039e4:	20000000 	.word	0x20000000
 80039e8:	20000004 	.word	0x20000004

080039ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	607b      	str	r3, [r7, #4]
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	2300      	movs	r3, #0
 80039fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a04:	4b67      	ldr	r3, [pc, #412]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 030c 	and.w	r3, r3, #12
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d00d      	beq.n	8003a2c <HAL_RCC_GetSysClockFreq+0x40>
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	f200 80bd 	bhi.w	8003b90 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0x34>
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d003      	beq.n	8003a26 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a1e:	e0b7      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a20:	4b61      	ldr	r3, [pc, #388]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a22:	60bb      	str	r3, [r7, #8]
       break;
 8003a24:	e0b7      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a26:	4b61      	ldr	r3, [pc, #388]	; (8003bac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003a28:	60bb      	str	r3, [r7, #8]
      break;
 8003a2a:	e0b4      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a2c:	4b5d      	ldr	r3, [pc, #372]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a36:	4b5b      	ldr	r3, [pc, #364]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d04d      	beq.n	8003ade <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a42:	4b58      	ldr	r3, [pc, #352]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	099b      	lsrs	r3, r3, #6
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a52:	f04f 0100 	mov.w	r1, #0
 8003a56:	ea02 0800 	and.w	r8, r2, r0
 8003a5a:	ea03 0901 	and.w	r9, r3, r1
 8003a5e:	4640      	mov	r0, r8
 8003a60:	4649      	mov	r1, r9
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	014b      	lsls	r3, r1, #5
 8003a6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a70:	0142      	lsls	r2, r0, #5
 8003a72:	4610      	mov	r0, r2
 8003a74:	4619      	mov	r1, r3
 8003a76:	ebb0 0008 	subs.w	r0, r0, r8
 8003a7a:	eb61 0109 	sbc.w	r1, r1, r9
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	018b      	lsls	r3, r1, #6
 8003a88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a8c:	0182      	lsls	r2, r0, #6
 8003a8e:	1a12      	subs	r2, r2, r0
 8003a90:	eb63 0301 	sbc.w	r3, r3, r1
 8003a94:	f04f 0000 	mov.w	r0, #0
 8003a98:	f04f 0100 	mov.w	r1, #0
 8003a9c:	00d9      	lsls	r1, r3, #3
 8003a9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003aa2:	00d0      	lsls	r0, r2, #3
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	eb12 0208 	adds.w	r2, r2, r8
 8003aac:	eb43 0309 	adc.w	r3, r3, r9
 8003ab0:	f04f 0000 	mov.w	r0, #0
 8003ab4:	f04f 0100 	mov.w	r1, #0
 8003ab8:	0259      	lsls	r1, r3, #9
 8003aba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003abe:	0250      	lsls	r0, r2, #9
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	461a      	mov	r2, r3
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	f7fd f884 	bl	8000bdc <__aeabi_uldivmod>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4613      	mov	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	e04a      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ade:	4b31      	ldr	r3, [pc, #196]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	099b      	lsrs	r3, r3, #6
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003aee:	f04f 0100 	mov.w	r1, #0
 8003af2:	ea02 0400 	and.w	r4, r2, r0
 8003af6:	ea03 0501 	and.w	r5, r3, r1
 8003afa:	4620      	mov	r0, r4
 8003afc:	4629      	mov	r1, r5
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	014b      	lsls	r3, r1, #5
 8003b08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b0c:	0142      	lsls	r2, r0, #5
 8003b0e:	4610      	mov	r0, r2
 8003b10:	4619      	mov	r1, r3
 8003b12:	1b00      	subs	r0, r0, r4
 8003b14:	eb61 0105 	sbc.w	r1, r1, r5
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	018b      	lsls	r3, r1, #6
 8003b22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b26:	0182      	lsls	r2, r0, #6
 8003b28:	1a12      	subs	r2, r2, r0
 8003b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b2e:	f04f 0000 	mov.w	r0, #0
 8003b32:	f04f 0100 	mov.w	r1, #0
 8003b36:	00d9      	lsls	r1, r3, #3
 8003b38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b3c:	00d0      	lsls	r0, r2, #3
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	1912      	adds	r2, r2, r4
 8003b44:	eb45 0303 	adc.w	r3, r5, r3
 8003b48:	f04f 0000 	mov.w	r0, #0
 8003b4c:	f04f 0100 	mov.w	r1, #0
 8003b50:	0299      	lsls	r1, r3, #10
 8003b52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b56:	0290      	lsls	r0, r2, #10
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	4619      	mov	r1, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	f7fd f838 	bl	8000bdc <__aeabi_uldivmod>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4613      	mov	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b74:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	0c1b      	lsrs	r3, r3, #16
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	3301      	adds	r3, #1
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8c:	60bb      	str	r3, [r7, #8]
      break;
 8003b8e:	e002      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b92:	60bb      	str	r3, [r7, #8]
      break;
 8003b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b96:	68bb      	ldr	r3, [r7, #8]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	00f42400 	.word	0x00f42400
 8003bac:	007a1200 	.word	0x007a1200

08003bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb4:	4b03      	ldr	r3, [pc, #12]	; (8003bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000000 	.word	0x20000000

08003bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bcc:	f7ff fff0 	bl	8003bb0 <HAL_RCC_GetHCLKFreq>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	0a9b      	lsrs	r3, r3, #10
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	4903      	ldr	r1, [pc, #12]	; (8003bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bde:	5ccb      	ldrb	r3, [r1, r3]
 8003be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40023800 	.word	0x40023800
 8003bec:	08005454 	.word	0x08005454

08003bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bf4:	f7ff ffdc 	bl	8003bb0 <HAL_RCC_GetHCLKFreq>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	0b5b      	lsrs	r3, r3, #13
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	4903      	ldr	r1, [pc, #12]	; (8003c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c06:	5ccb      	ldrb	r3, [r1, r3]
 8003c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40023800 	.word	0x40023800
 8003c14:	08005454 	.word	0x08005454

08003c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e041      	b.n	8003cae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fd ffd6 	bl	8001bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3304      	adds	r3, #4
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f000 f95e 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d122      	bne.n	8003d12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d11b      	bne.n	8003d12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f06f 0202 	mvn.w	r2, #2
 8003ce2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	f003 0303 	and.w	r3, r3, #3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f8ee 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003cfe:	e005      	b.n	8003d0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f8e0 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f8f1 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d122      	bne.n	8003d66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d11b      	bne.n	8003d66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f06f 0204 	mvn.w	r2, #4
 8003d36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f8c4 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003d52:	e005      	b.n	8003d60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f8b6 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f8c7 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d122      	bne.n	8003dba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d11b      	bne.n	8003dba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f06f 0208 	mvn.w	r2, #8
 8003d8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2204      	movs	r2, #4
 8003d90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f89a 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003da6:	e005      	b.n	8003db4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f88c 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f89d 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	f003 0310 	and.w	r3, r3, #16
 8003dc4:	2b10      	cmp	r3, #16
 8003dc6:	d122      	bne.n	8003e0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	2b10      	cmp	r3, #16
 8003dd4:	d11b      	bne.n	8003e0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f06f 0210 	mvn.w	r2, #16
 8003dde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2208      	movs	r2, #8
 8003de4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f870 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003dfa:	e005      	b.n	8003e08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f862 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f873 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d10e      	bne.n	8003e3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d107      	bne.n	8003e3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f06f 0201 	mvn.w	r2, #1
 8003e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7fd fdb9 	bl	80019ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e44:	2b80      	cmp	r3, #128	; 0x80
 8003e46:	d10e      	bne.n	8003e66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e52:	2b80      	cmp	r3, #128	; 0x80
 8003e54:	d107      	bne.n	8003e66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f8e3 	bl	800402c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e70:	2b40      	cmp	r3, #64	; 0x40
 8003e72:	d10e      	bne.n	8003e92 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7e:	2b40      	cmp	r3, #64	; 0x40
 8003e80:	d107      	bne.n	8003e92 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f838 	bl	8003f02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d10e      	bne.n	8003ebe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	2b20      	cmp	r3, #32
 8003eac:	d107      	bne.n	8003ebe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f06f 0220 	mvn.w	r2, #32
 8003eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f8ad 	bl	8004018 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a34      	ldr	r2, [pc, #208]	; (8003ffc <TIM_Base_SetConfig+0xe4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00f      	beq.n	8003f50 <TIM_Base_SetConfig+0x38>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d00b      	beq.n	8003f50 <TIM_Base_SetConfig+0x38>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a31      	ldr	r2, [pc, #196]	; (8004000 <TIM_Base_SetConfig+0xe8>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d007      	beq.n	8003f50 <TIM_Base_SetConfig+0x38>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a30      	ldr	r2, [pc, #192]	; (8004004 <TIM_Base_SetConfig+0xec>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d003      	beq.n	8003f50 <TIM_Base_SetConfig+0x38>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a2f      	ldr	r2, [pc, #188]	; (8004008 <TIM_Base_SetConfig+0xf0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d108      	bne.n	8003f62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a25      	ldr	r2, [pc, #148]	; (8003ffc <TIM_Base_SetConfig+0xe4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d01b      	beq.n	8003fa2 <TIM_Base_SetConfig+0x8a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f70:	d017      	beq.n	8003fa2 <TIM_Base_SetConfig+0x8a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a22      	ldr	r2, [pc, #136]	; (8004000 <TIM_Base_SetConfig+0xe8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d013      	beq.n	8003fa2 <TIM_Base_SetConfig+0x8a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a21      	ldr	r2, [pc, #132]	; (8004004 <TIM_Base_SetConfig+0xec>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00f      	beq.n	8003fa2 <TIM_Base_SetConfig+0x8a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a20      	ldr	r2, [pc, #128]	; (8004008 <TIM_Base_SetConfig+0xf0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00b      	beq.n	8003fa2 <TIM_Base_SetConfig+0x8a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a1f      	ldr	r2, [pc, #124]	; (800400c <TIM_Base_SetConfig+0xf4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d007      	beq.n	8003fa2 <TIM_Base_SetConfig+0x8a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a1e      	ldr	r2, [pc, #120]	; (8004010 <TIM_Base_SetConfig+0xf8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d003      	beq.n	8003fa2 <TIM_Base_SetConfig+0x8a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a1d      	ldr	r2, [pc, #116]	; (8004014 <TIM_Base_SetConfig+0xfc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d108      	bne.n	8003fb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a08      	ldr	r2, [pc, #32]	; (8003ffc <TIM_Base_SetConfig+0xe4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d103      	bne.n	8003fe8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	615a      	str	r2, [r3, #20]
}
 8003fee:	bf00      	nop
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40010000 	.word	0x40010000
 8004000:	40000400 	.word	0x40000400
 8004004:	40000800 	.word	0x40000800
 8004008:	40000c00 	.word	0x40000c00
 800400c:	40014000 	.word	0x40014000
 8004010:	40014400 	.word	0x40014400
 8004014:	40014800 	.word	0x40014800

08004018 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e03f      	b.n	80040d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7fd fe14 	bl	8001c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2224      	movs	r2, #36	; 0x24
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004082:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f929 	bl	80042dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004098:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695a      	ldr	r2, [r3, #20]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b08a      	sub	sp, #40	; 0x28
 80040de:	af02      	add	r7, sp, #8
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	603b      	str	r3, [r7, #0]
 80040e6:	4613      	mov	r3, r2
 80040e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d17c      	bne.n	80041f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <HAL_UART_Transmit+0x2c>
 8004100:	88fb      	ldrh	r3, [r7, #6]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e075      	b.n	80041f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_UART_Transmit+0x3e>
 8004114:	2302      	movs	r3, #2
 8004116:	e06e      	b.n	80041f6 <HAL_UART_Transmit+0x11c>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2221      	movs	r2, #33	; 0x21
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800412e:	f7fd fe89 	bl	8001e44 <HAL_GetTick>
 8004132:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	88fa      	ldrh	r2, [r7, #6]
 8004138:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	88fa      	ldrh	r2, [r7, #6]
 800413e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004148:	d108      	bne.n	800415c <HAL_UART_Transmit+0x82>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d104      	bne.n	800415c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004152:	2300      	movs	r3, #0
 8004154:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	61bb      	str	r3, [r7, #24]
 800415a:	e003      	b.n	8004164 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004160:	2300      	movs	r3, #0
 8004162:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800416c:	e02a      	b.n	80041c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2200      	movs	r2, #0
 8004176:	2180      	movs	r1, #128	; 0x80
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f840 	bl	80041fe <UART_WaitOnFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e036      	b.n	80041f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10b      	bne.n	80041a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800419c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	3302      	adds	r3, #2
 80041a2:	61bb      	str	r3, [r7, #24]
 80041a4:	e007      	b.n	80041b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	781a      	ldrb	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	3301      	adds	r3, #1
 80041b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1cf      	bne.n	800416e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2200      	movs	r2, #0
 80041d6:	2140      	movs	r1, #64	; 0x40
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f810 	bl	80041fe <UART_WaitOnFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e006      	b.n	80041f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	e000      	b.n	80041f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041f4:	2302      	movs	r3, #2
  }
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3720      	adds	r7, #32
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b090      	sub	sp, #64	; 0x40
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	603b      	str	r3, [r7, #0]
 800420a:	4613      	mov	r3, r2
 800420c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800420e:	e050      	b.n	80042b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004212:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004216:	d04c      	beq.n	80042b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800421a:	2b00      	cmp	r3, #0
 800421c:	d007      	beq.n	800422e <UART_WaitOnFlagUntilTimeout+0x30>
 800421e:	f7fd fe11 	bl	8001e44 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800422a:	429a      	cmp	r2, r3
 800422c:	d241      	bcs.n	80042b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	330c      	adds	r3, #12
 8004234:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	e853 3f00 	ldrex	r3, [r3]
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004244:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	330c      	adds	r3, #12
 800424c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800424e:	637a      	str	r2, [r7, #52]	; 0x34
 8004250:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004252:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004254:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004256:	e841 2300 	strex	r3, r2, [r1]
 800425a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800425c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1e5      	bne.n	800422e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3314      	adds	r3, #20
 8004268:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	613b      	str	r3, [r7, #16]
   return(result);
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f023 0301 	bic.w	r3, r3, #1
 8004278:	63bb      	str	r3, [r7, #56]	; 0x38
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3314      	adds	r3, #20
 8004280:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004282:	623a      	str	r2, [r7, #32]
 8004284:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	69f9      	ldr	r1, [r7, #28]
 8004288:	6a3a      	ldr	r2, [r7, #32]
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e5      	bne.n	8004262 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e00f      	b.n	80042d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	4013      	ands	r3, r2
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	429a      	cmp	r2, r3
 80042c0:	bf0c      	ite	eq
 80042c2:	2301      	moveq	r3, #1
 80042c4:	2300      	movne	r3, #0
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	461a      	mov	r2, r3
 80042ca:	79fb      	ldrb	r3, [r7, #7]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d09f      	beq.n	8004210 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3740      	adds	r7, #64	; 0x40
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042e0:	b09f      	sub	sp, #124	; 0x7c
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f2:	68d9      	ldr	r1, [r3, #12]
 80042f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	ea40 0301 	orr.w	r3, r0, r1
 80042fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	431a      	orrs	r2, r3
 8004308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	431a      	orrs	r2, r3
 800430e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	4313      	orrs	r3, r2
 8004314:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004320:	f021 010c 	bic.w	r1, r1, #12
 8004324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800432a:	430b      	orrs	r3, r1
 800432c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800432e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433a:	6999      	ldr	r1, [r3, #24]
 800433c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	ea40 0301 	orr.w	r3, r0, r1
 8004344:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	4bc5      	ldr	r3, [pc, #788]	; (8004660 <UART_SetConfig+0x384>)
 800434c:	429a      	cmp	r2, r3
 800434e:	d004      	beq.n	800435a <UART_SetConfig+0x7e>
 8004350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4bc3      	ldr	r3, [pc, #780]	; (8004664 <UART_SetConfig+0x388>)
 8004356:	429a      	cmp	r2, r3
 8004358:	d103      	bne.n	8004362 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800435a:	f7ff fc49 	bl	8003bf0 <HAL_RCC_GetPCLK2Freq>
 800435e:	6778      	str	r0, [r7, #116]	; 0x74
 8004360:	e002      	b.n	8004368 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004362:	f7ff fc31 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 8004366:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004370:	f040 80b6 	bne.w	80044e0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004374:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004376:	461c      	mov	r4, r3
 8004378:	f04f 0500 	mov.w	r5, #0
 800437c:	4622      	mov	r2, r4
 800437e:	462b      	mov	r3, r5
 8004380:	1891      	adds	r1, r2, r2
 8004382:	6439      	str	r1, [r7, #64]	; 0x40
 8004384:	415b      	adcs	r3, r3
 8004386:	647b      	str	r3, [r7, #68]	; 0x44
 8004388:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800438c:	1912      	adds	r2, r2, r4
 800438e:	eb45 0303 	adc.w	r3, r5, r3
 8004392:	f04f 0000 	mov.w	r0, #0
 8004396:	f04f 0100 	mov.w	r1, #0
 800439a:	00d9      	lsls	r1, r3, #3
 800439c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043a0:	00d0      	lsls	r0, r2, #3
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	1911      	adds	r1, r2, r4
 80043a8:	6639      	str	r1, [r7, #96]	; 0x60
 80043aa:	416b      	adcs	r3, r5
 80043ac:	667b      	str	r3, [r7, #100]	; 0x64
 80043ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	461a      	mov	r2, r3
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	1891      	adds	r1, r2, r2
 80043ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80043bc:	415b      	adcs	r3, r3
 80043be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80043c8:	f7fc fc08 	bl	8000bdc <__aeabi_uldivmod>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4ba5      	ldr	r3, [pc, #660]	; (8004668 <UART_SetConfig+0x38c>)
 80043d2:	fba3 2302 	umull	r2, r3, r3, r2
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	011e      	lsls	r6, r3, #4
 80043da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043dc:	461c      	mov	r4, r3
 80043de:	f04f 0500 	mov.w	r5, #0
 80043e2:	4622      	mov	r2, r4
 80043e4:	462b      	mov	r3, r5
 80043e6:	1891      	adds	r1, r2, r2
 80043e8:	6339      	str	r1, [r7, #48]	; 0x30
 80043ea:	415b      	adcs	r3, r3
 80043ec:	637b      	str	r3, [r7, #52]	; 0x34
 80043ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80043f2:	1912      	adds	r2, r2, r4
 80043f4:	eb45 0303 	adc.w	r3, r5, r3
 80043f8:	f04f 0000 	mov.w	r0, #0
 80043fc:	f04f 0100 	mov.w	r1, #0
 8004400:	00d9      	lsls	r1, r3, #3
 8004402:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004406:	00d0      	lsls	r0, r2, #3
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	1911      	adds	r1, r2, r4
 800440e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004410:	416b      	adcs	r3, r5
 8004412:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	461a      	mov	r2, r3
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	1891      	adds	r1, r2, r2
 8004420:	62b9      	str	r1, [r7, #40]	; 0x28
 8004422:	415b      	adcs	r3, r3
 8004424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004426:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800442a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800442e:	f7fc fbd5 	bl	8000bdc <__aeabi_uldivmod>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4b8c      	ldr	r3, [pc, #560]	; (8004668 <UART_SetConfig+0x38c>)
 8004438:	fba3 1302 	umull	r1, r3, r3, r2
 800443c:	095b      	lsrs	r3, r3, #5
 800443e:	2164      	movs	r1, #100	; 0x64
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	3332      	adds	r3, #50	; 0x32
 800444a:	4a87      	ldr	r2, [pc, #540]	; (8004668 <UART_SetConfig+0x38c>)
 800444c:	fba2 2303 	umull	r2, r3, r2, r3
 8004450:	095b      	lsrs	r3, r3, #5
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004458:	441e      	add	r6, r3
 800445a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800445c:	4618      	mov	r0, r3
 800445e:	f04f 0100 	mov.w	r1, #0
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	1894      	adds	r4, r2, r2
 8004468:	623c      	str	r4, [r7, #32]
 800446a:	415b      	adcs	r3, r3
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
 800446e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004472:	1812      	adds	r2, r2, r0
 8004474:	eb41 0303 	adc.w	r3, r1, r3
 8004478:	f04f 0400 	mov.w	r4, #0
 800447c:	f04f 0500 	mov.w	r5, #0
 8004480:	00dd      	lsls	r5, r3, #3
 8004482:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004486:	00d4      	lsls	r4, r2, #3
 8004488:	4622      	mov	r2, r4
 800448a:	462b      	mov	r3, r5
 800448c:	1814      	adds	r4, r2, r0
 800448e:	653c      	str	r4, [r7, #80]	; 0x50
 8004490:	414b      	adcs	r3, r1
 8004492:	657b      	str	r3, [r7, #84]	; 0x54
 8004494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	461a      	mov	r2, r3
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	1891      	adds	r1, r2, r2
 80044a0:	61b9      	str	r1, [r7, #24]
 80044a2:	415b      	adcs	r3, r3
 80044a4:	61fb      	str	r3, [r7, #28]
 80044a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80044ae:	f7fc fb95 	bl	8000bdc <__aeabi_uldivmod>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4b6c      	ldr	r3, [pc, #432]	; (8004668 <UART_SetConfig+0x38c>)
 80044b8:	fba3 1302 	umull	r1, r3, r3, r2
 80044bc:	095b      	lsrs	r3, r3, #5
 80044be:	2164      	movs	r1, #100	; 0x64
 80044c0:	fb01 f303 	mul.w	r3, r1, r3
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	3332      	adds	r3, #50	; 0x32
 80044ca:	4a67      	ldr	r2, [pc, #412]	; (8004668 <UART_SetConfig+0x38c>)
 80044cc:	fba2 2303 	umull	r2, r3, r2, r3
 80044d0:	095b      	lsrs	r3, r3, #5
 80044d2:	f003 0207 	and.w	r2, r3, #7
 80044d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4432      	add	r2, r6
 80044dc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044de:	e0b9      	b.n	8004654 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044e2:	461c      	mov	r4, r3
 80044e4:	f04f 0500 	mov.w	r5, #0
 80044e8:	4622      	mov	r2, r4
 80044ea:	462b      	mov	r3, r5
 80044ec:	1891      	adds	r1, r2, r2
 80044ee:	6139      	str	r1, [r7, #16]
 80044f0:	415b      	adcs	r3, r3
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80044f8:	1912      	adds	r2, r2, r4
 80044fa:	eb45 0303 	adc.w	r3, r5, r3
 80044fe:	f04f 0000 	mov.w	r0, #0
 8004502:	f04f 0100 	mov.w	r1, #0
 8004506:	00d9      	lsls	r1, r3, #3
 8004508:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800450c:	00d0      	lsls	r0, r2, #3
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	eb12 0804 	adds.w	r8, r2, r4
 8004516:	eb43 0905 	adc.w	r9, r3, r5
 800451a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	4618      	mov	r0, r3
 8004520:	f04f 0100 	mov.w	r1, #0
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	008b      	lsls	r3, r1, #2
 800452e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004532:	0082      	lsls	r2, r0, #2
 8004534:	4640      	mov	r0, r8
 8004536:	4649      	mov	r1, r9
 8004538:	f7fc fb50 	bl	8000bdc <__aeabi_uldivmod>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4b49      	ldr	r3, [pc, #292]	; (8004668 <UART_SetConfig+0x38c>)
 8004542:	fba3 2302 	umull	r2, r3, r3, r2
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	011e      	lsls	r6, r3, #4
 800454a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800454c:	4618      	mov	r0, r3
 800454e:	f04f 0100 	mov.w	r1, #0
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	1894      	adds	r4, r2, r2
 8004558:	60bc      	str	r4, [r7, #8]
 800455a:	415b      	adcs	r3, r3
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004562:	1812      	adds	r2, r2, r0
 8004564:	eb41 0303 	adc.w	r3, r1, r3
 8004568:	f04f 0400 	mov.w	r4, #0
 800456c:	f04f 0500 	mov.w	r5, #0
 8004570:	00dd      	lsls	r5, r3, #3
 8004572:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004576:	00d4      	lsls	r4, r2, #3
 8004578:	4622      	mov	r2, r4
 800457a:	462b      	mov	r3, r5
 800457c:	1814      	adds	r4, r2, r0
 800457e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004580:	414b      	adcs	r3, r1
 8004582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	4618      	mov	r0, r3
 800458a:	f04f 0100 	mov.w	r1, #0
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	008b      	lsls	r3, r1, #2
 8004598:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800459c:	0082      	lsls	r2, r0, #2
 800459e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80045a2:	f7fc fb1b 	bl	8000bdc <__aeabi_uldivmod>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4b2f      	ldr	r3, [pc, #188]	; (8004668 <UART_SetConfig+0x38c>)
 80045ac:	fba3 1302 	umull	r1, r3, r3, r2
 80045b0:	095b      	lsrs	r3, r3, #5
 80045b2:	2164      	movs	r1, #100	; 0x64
 80045b4:	fb01 f303 	mul.w	r3, r1, r3
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	3332      	adds	r3, #50	; 0x32
 80045be:	4a2a      	ldr	r2, [pc, #168]	; (8004668 <UART_SetConfig+0x38c>)
 80045c0:	fba2 2303 	umull	r2, r3, r2, r3
 80045c4:	095b      	lsrs	r3, r3, #5
 80045c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ca:	441e      	add	r6, r3
 80045cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ce:	4618      	mov	r0, r3
 80045d0:	f04f 0100 	mov.w	r1, #0
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	1894      	adds	r4, r2, r2
 80045da:	603c      	str	r4, [r7, #0]
 80045dc:	415b      	adcs	r3, r3
 80045de:	607b      	str	r3, [r7, #4]
 80045e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045e4:	1812      	adds	r2, r2, r0
 80045e6:	eb41 0303 	adc.w	r3, r1, r3
 80045ea:	f04f 0400 	mov.w	r4, #0
 80045ee:	f04f 0500 	mov.w	r5, #0
 80045f2:	00dd      	lsls	r5, r3, #3
 80045f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045f8:	00d4      	lsls	r4, r2, #3
 80045fa:	4622      	mov	r2, r4
 80045fc:	462b      	mov	r3, r5
 80045fe:	eb12 0a00 	adds.w	sl, r2, r0
 8004602:	eb43 0b01 	adc.w	fp, r3, r1
 8004606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	4618      	mov	r0, r3
 800460c:	f04f 0100 	mov.w	r1, #0
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	008b      	lsls	r3, r1, #2
 800461a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800461e:	0082      	lsls	r2, r0, #2
 8004620:	4650      	mov	r0, sl
 8004622:	4659      	mov	r1, fp
 8004624:	f7fc fada 	bl	8000bdc <__aeabi_uldivmod>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4b0e      	ldr	r3, [pc, #56]	; (8004668 <UART_SetConfig+0x38c>)
 800462e:	fba3 1302 	umull	r1, r3, r3, r2
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	2164      	movs	r1, #100	; 0x64
 8004636:	fb01 f303 	mul.w	r3, r1, r3
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	3332      	adds	r3, #50	; 0x32
 8004640:	4a09      	ldr	r2, [pc, #36]	; (8004668 <UART_SetConfig+0x38c>)
 8004642:	fba2 2303 	umull	r2, r3, r2, r3
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	f003 020f 	and.w	r2, r3, #15
 800464c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4432      	add	r2, r6
 8004652:	609a      	str	r2, [r3, #8]
}
 8004654:	bf00      	nop
 8004656:	377c      	adds	r7, #124	; 0x7c
 8004658:	46bd      	mov	sp, r7
 800465a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800465e:	bf00      	nop
 8004660:	40011000 	.word	0x40011000
 8004664:	40011400 	.word	0x40011400
 8004668:	51eb851f 	.word	0x51eb851f

0800466c <__errno>:
 800466c:	4b01      	ldr	r3, [pc, #4]	; (8004674 <__errno+0x8>)
 800466e:	6818      	ldr	r0, [r3, #0]
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	2000000c 	.word	0x2000000c

08004678 <__libc_init_array>:
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	4d0d      	ldr	r5, [pc, #52]	; (80046b0 <__libc_init_array+0x38>)
 800467c:	4c0d      	ldr	r4, [pc, #52]	; (80046b4 <__libc_init_array+0x3c>)
 800467e:	1b64      	subs	r4, r4, r5
 8004680:	10a4      	asrs	r4, r4, #2
 8004682:	2600      	movs	r6, #0
 8004684:	42a6      	cmp	r6, r4
 8004686:	d109      	bne.n	800469c <__libc_init_array+0x24>
 8004688:	4d0b      	ldr	r5, [pc, #44]	; (80046b8 <__libc_init_array+0x40>)
 800468a:	4c0c      	ldr	r4, [pc, #48]	; (80046bc <__libc_init_array+0x44>)
 800468c:	f000 fec6 	bl	800541c <_init>
 8004690:	1b64      	subs	r4, r4, r5
 8004692:	10a4      	asrs	r4, r4, #2
 8004694:	2600      	movs	r6, #0
 8004696:	42a6      	cmp	r6, r4
 8004698:	d105      	bne.n	80046a6 <__libc_init_array+0x2e>
 800469a:	bd70      	pop	{r4, r5, r6, pc}
 800469c:	f855 3b04 	ldr.w	r3, [r5], #4
 80046a0:	4798      	blx	r3
 80046a2:	3601      	adds	r6, #1
 80046a4:	e7ee      	b.n	8004684 <__libc_init_array+0xc>
 80046a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046aa:	4798      	blx	r3
 80046ac:	3601      	adds	r6, #1
 80046ae:	e7f2      	b.n	8004696 <__libc_init_array+0x1e>
 80046b0:	08005508 	.word	0x08005508
 80046b4:	08005508 	.word	0x08005508
 80046b8:	08005508 	.word	0x08005508
 80046bc:	0800550c 	.word	0x0800550c

080046c0 <memset>:
 80046c0:	4402      	add	r2, r0
 80046c2:	4603      	mov	r3, r0
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d100      	bne.n	80046ca <memset+0xa>
 80046c8:	4770      	bx	lr
 80046ca:	f803 1b01 	strb.w	r1, [r3], #1
 80046ce:	e7f9      	b.n	80046c4 <memset+0x4>

080046d0 <siprintf>:
 80046d0:	b40e      	push	{r1, r2, r3}
 80046d2:	b500      	push	{lr}
 80046d4:	b09c      	sub	sp, #112	; 0x70
 80046d6:	ab1d      	add	r3, sp, #116	; 0x74
 80046d8:	9002      	str	r0, [sp, #8]
 80046da:	9006      	str	r0, [sp, #24]
 80046dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046e0:	4809      	ldr	r0, [pc, #36]	; (8004708 <siprintf+0x38>)
 80046e2:	9107      	str	r1, [sp, #28]
 80046e4:	9104      	str	r1, [sp, #16]
 80046e6:	4909      	ldr	r1, [pc, #36]	; (800470c <siprintf+0x3c>)
 80046e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80046ec:	9105      	str	r1, [sp, #20]
 80046ee:	6800      	ldr	r0, [r0, #0]
 80046f0:	9301      	str	r3, [sp, #4]
 80046f2:	a902      	add	r1, sp, #8
 80046f4:	f000 f868 	bl	80047c8 <_svfiprintf_r>
 80046f8:	9b02      	ldr	r3, [sp, #8]
 80046fa:	2200      	movs	r2, #0
 80046fc:	701a      	strb	r2, [r3, #0]
 80046fe:	b01c      	add	sp, #112	; 0x70
 8004700:	f85d eb04 	ldr.w	lr, [sp], #4
 8004704:	b003      	add	sp, #12
 8004706:	4770      	bx	lr
 8004708:	2000000c 	.word	0x2000000c
 800470c:	ffff0208 	.word	0xffff0208

08004710 <__ssputs_r>:
 8004710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004714:	688e      	ldr	r6, [r1, #8]
 8004716:	429e      	cmp	r6, r3
 8004718:	4682      	mov	sl, r0
 800471a:	460c      	mov	r4, r1
 800471c:	4690      	mov	r8, r2
 800471e:	461f      	mov	r7, r3
 8004720:	d838      	bhi.n	8004794 <__ssputs_r+0x84>
 8004722:	898a      	ldrh	r2, [r1, #12]
 8004724:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004728:	d032      	beq.n	8004790 <__ssputs_r+0x80>
 800472a:	6825      	ldr	r5, [r4, #0]
 800472c:	6909      	ldr	r1, [r1, #16]
 800472e:	eba5 0901 	sub.w	r9, r5, r1
 8004732:	6965      	ldr	r5, [r4, #20]
 8004734:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004738:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800473c:	3301      	adds	r3, #1
 800473e:	444b      	add	r3, r9
 8004740:	106d      	asrs	r5, r5, #1
 8004742:	429d      	cmp	r5, r3
 8004744:	bf38      	it	cc
 8004746:	461d      	movcc	r5, r3
 8004748:	0553      	lsls	r3, r2, #21
 800474a:	d531      	bpl.n	80047b0 <__ssputs_r+0xa0>
 800474c:	4629      	mov	r1, r5
 800474e:	f000 fb47 	bl	8004de0 <_malloc_r>
 8004752:	4606      	mov	r6, r0
 8004754:	b950      	cbnz	r0, 800476c <__ssputs_r+0x5c>
 8004756:	230c      	movs	r3, #12
 8004758:	f8ca 3000 	str.w	r3, [sl]
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004762:	81a3      	strh	r3, [r4, #12]
 8004764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800476c:	6921      	ldr	r1, [r4, #16]
 800476e:	464a      	mov	r2, r9
 8004770:	f000 fabe 	bl	8004cf0 <memcpy>
 8004774:	89a3      	ldrh	r3, [r4, #12]
 8004776:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800477a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477e:	81a3      	strh	r3, [r4, #12]
 8004780:	6126      	str	r6, [r4, #16]
 8004782:	6165      	str	r5, [r4, #20]
 8004784:	444e      	add	r6, r9
 8004786:	eba5 0509 	sub.w	r5, r5, r9
 800478a:	6026      	str	r6, [r4, #0]
 800478c:	60a5      	str	r5, [r4, #8]
 800478e:	463e      	mov	r6, r7
 8004790:	42be      	cmp	r6, r7
 8004792:	d900      	bls.n	8004796 <__ssputs_r+0x86>
 8004794:	463e      	mov	r6, r7
 8004796:	4632      	mov	r2, r6
 8004798:	6820      	ldr	r0, [r4, #0]
 800479a:	4641      	mov	r1, r8
 800479c:	f000 fab6 	bl	8004d0c <memmove>
 80047a0:	68a3      	ldr	r3, [r4, #8]
 80047a2:	6822      	ldr	r2, [r4, #0]
 80047a4:	1b9b      	subs	r3, r3, r6
 80047a6:	4432      	add	r2, r6
 80047a8:	60a3      	str	r3, [r4, #8]
 80047aa:	6022      	str	r2, [r4, #0]
 80047ac:	2000      	movs	r0, #0
 80047ae:	e7db      	b.n	8004768 <__ssputs_r+0x58>
 80047b0:	462a      	mov	r2, r5
 80047b2:	f000 fb6f 	bl	8004e94 <_realloc_r>
 80047b6:	4606      	mov	r6, r0
 80047b8:	2800      	cmp	r0, #0
 80047ba:	d1e1      	bne.n	8004780 <__ssputs_r+0x70>
 80047bc:	6921      	ldr	r1, [r4, #16]
 80047be:	4650      	mov	r0, sl
 80047c0:	f000 fabe 	bl	8004d40 <_free_r>
 80047c4:	e7c7      	b.n	8004756 <__ssputs_r+0x46>
	...

080047c8 <_svfiprintf_r>:
 80047c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047cc:	4698      	mov	r8, r3
 80047ce:	898b      	ldrh	r3, [r1, #12]
 80047d0:	061b      	lsls	r3, r3, #24
 80047d2:	b09d      	sub	sp, #116	; 0x74
 80047d4:	4607      	mov	r7, r0
 80047d6:	460d      	mov	r5, r1
 80047d8:	4614      	mov	r4, r2
 80047da:	d50e      	bpl.n	80047fa <_svfiprintf_r+0x32>
 80047dc:	690b      	ldr	r3, [r1, #16]
 80047de:	b963      	cbnz	r3, 80047fa <_svfiprintf_r+0x32>
 80047e0:	2140      	movs	r1, #64	; 0x40
 80047e2:	f000 fafd 	bl	8004de0 <_malloc_r>
 80047e6:	6028      	str	r0, [r5, #0]
 80047e8:	6128      	str	r0, [r5, #16]
 80047ea:	b920      	cbnz	r0, 80047f6 <_svfiprintf_r+0x2e>
 80047ec:	230c      	movs	r3, #12
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047f4:	e0d1      	b.n	800499a <_svfiprintf_r+0x1d2>
 80047f6:	2340      	movs	r3, #64	; 0x40
 80047f8:	616b      	str	r3, [r5, #20]
 80047fa:	2300      	movs	r3, #0
 80047fc:	9309      	str	r3, [sp, #36]	; 0x24
 80047fe:	2320      	movs	r3, #32
 8004800:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004804:	f8cd 800c 	str.w	r8, [sp, #12]
 8004808:	2330      	movs	r3, #48	; 0x30
 800480a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80049b4 <_svfiprintf_r+0x1ec>
 800480e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004812:	f04f 0901 	mov.w	r9, #1
 8004816:	4623      	mov	r3, r4
 8004818:	469a      	mov	sl, r3
 800481a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800481e:	b10a      	cbz	r2, 8004824 <_svfiprintf_r+0x5c>
 8004820:	2a25      	cmp	r2, #37	; 0x25
 8004822:	d1f9      	bne.n	8004818 <_svfiprintf_r+0x50>
 8004824:	ebba 0b04 	subs.w	fp, sl, r4
 8004828:	d00b      	beq.n	8004842 <_svfiprintf_r+0x7a>
 800482a:	465b      	mov	r3, fp
 800482c:	4622      	mov	r2, r4
 800482e:	4629      	mov	r1, r5
 8004830:	4638      	mov	r0, r7
 8004832:	f7ff ff6d 	bl	8004710 <__ssputs_r>
 8004836:	3001      	adds	r0, #1
 8004838:	f000 80aa 	beq.w	8004990 <_svfiprintf_r+0x1c8>
 800483c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800483e:	445a      	add	r2, fp
 8004840:	9209      	str	r2, [sp, #36]	; 0x24
 8004842:	f89a 3000 	ldrb.w	r3, [sl]
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 80a2 	beq.w	8004990 <_svfiprintf_r+0x1c8>
 800484c:	2300      	movs	r3, #0
 800484e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004852:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004856:	f10a 0a01 	add.w	sl, sl, #1
 800485a:	9304      	str	r3, [sp, #16]
 800485c:	9307      	str	r3, [sp, #28]
 800485e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004862:	931a      	str	r3, [sp, #104]	; 0x68
 8004864:	4654      	mov	r4, sl
 8004866:	2205      	movs	r2, #5
 8004868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800486c:	4851      	ldr	r0, [pc, #324]	; (80049b4 <_svfiprintf_r+0x1ec>)
 800486e:	f7fb fcbf 	bl	80001f0 <memchr>
 8004872:	9a04      	ldr	r2, [sp, #16]
 8004874:	b9d8      	cbnz	r0, 80048ae <_svfiprintf_r+0xe6>
 8004876:	06d0      	lsls	r0, r2, #27
 8004878:	bf44      	itt	mi
 800487a:	2320      	movmi	r3, #32
 800487c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004880:	0711      	lsls	r1, r2, #28
 8004882:	bf44      	itt	mi
 8004884:	232b      	movmi	r3, #43	; 0x2b
 8004886:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800488a:	f89a 3000 	ldrb.w	r3, [sl]
 800488e:	2b2a      	cmp	r3, #42	; 0x2a
 8004890:	d015      	beq.n	80048be <_svfiprintf_r+0xf6>
 8004892:	9a07      	ldr	r2, [sp, #28]
 8004894:	4654      	mov	r4, sl
 8004896:	2000      	movs	r0, #0
 8004898:	f04f 0c0a 	mov.w	ip, #10
 800489c:	4621      	mov	r1, r4
 800489e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048a2:	3b30      	subs	r3, #48	; 0x30
 80048a4:	2b09      	cmp	r3, #9
 80048a6:	d94e      	bls.n	8004946 <_svfiprintf_r+0x17e>
 80048a8:	b1b0      	cbz	r0, 80048d8 <_svfiprintf_r+0x110>
 80048aa:	9207      	str	r2, [sp, #28]
 80048ac:	e014      	b.n	80048d8 <_svfiprintf_r+0x110>
 80048ae:	eba0 0308 	sub.w	r3, r0, r8
 80048b2:	fa09 f303 	lsl.w	r3, r9, r3
 80048b6:	4313      	orrs	r3, r2
 80048b8:	9304      	str	r3, [sp, #16]
 80048ba:	46a2      	mov	sl, r4
 80048bc:	e7d2      	b.n	8004864 <_svfiprintf_r+0x9c>
 80048be:	9b03      	ldr	r3, [sp, #12]
 80048c0:	1d19      	adds	r1, r3, #4
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	9103      	str	r1, [sp, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	bfbb      	ittet	lt
 80048ca:	425b      	neglt	r3, r3
 80048cc:	f042 0202 	orrlt.w	r2, r2, #2
 80048d0:	9307      	strge	r3, [sp, #28]
 80048d2:	9307      	strlt	r3, [sp, #28]
 80048d4:	bfb8      	it	lt
 80048d6:	9204      	strlt	r2, [sp, #16]
 80048d8:	7823      	ldrb	r3, [r4, #0]
 80048da:	2b2e      	cmp	r3, #46	; 0x2e
 80048dc:	d10c      	bne.n	80048f8 <_svfiprintf_r+0x130>
 80048de:	7863      	ldrb	r3, [r4, #1]
 80048e0:	2b2a      	cmp	r3, #42	; 0x2a
 80048e2:	d135      	bne.n	8004950 <_svfiprintf_r+0x188>
 80048e4:	9b03      	ldr	r3, [sp, #12]
 80048e6:	1d1a      	adds	r2, r3, #4
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	9203      	str	r2, [sp, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	bfb8      	it	lt
 80048f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80048f4:	3402      	adds	r4, #2
 80048f6:	9305      	str	r3, [sp, #20]
 80048f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80049c4 <_svfiprintf_r+0x1fc>
 80048fc:	7821      	ldrb	r1, [r4, #0]
 80048fe:	2203      	movs	r2, #3
 8004900:	4650      	mov	r0, sl
 8004902:	f7fb fc75 	bl	80001f0 <memchr>
 8004906:	b140      	cbz	r0, 800491a <_svfiprintf_r+0x152>
 8004908:	2340      	movs	r3, #64	; 0x40
 800490a:	eba0 000a 	sub.w	r0, r0, sl
 800490e:	fa03 f000 	lsl.w	r0, r3, r0
 8004912:	9b04      	ldr	r3, [sp, #16]
 8004914:	4303      	orrs	r3, r0
 8004916:	3401      	adds	r4, #1
 8004918:	9304      	str	r3, [sp, #16]
 800491a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800491e:	4826      	ldr	r0, [pc, #152]	; (80049b8 <_svfiprintf_r+0x1f0>)
 8004920:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004924:	2206      	movs	r2, #6
 8004926:	f7fb fc63 	bl	80001f0 <memchr>
 800492a:	2800      	cmp	r0, #0
 800492c:	d038      	beq.n	80049a0 <_svfiprintf_r+0x1d8>
 800492e:	4b23      	ldr	r3, [pc, #140]	; (80049bc <_svfiprintf_r+0x1f4>)
 8004930:	bb1b      	cbnz	r3, 800497a <_svfiprintf_r+0x1b2>
 8004932:	9b03      	ldr	r3, [sp, #12]
 8004934:	3307      	adds	r3, #7
 8004936:	f023 0307 	bic.w	r3, r3, #7
 800493a:	3308      	adds	r3, #8
 800493c:	9303      	str	r3, [sp, #12]
 800493e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004940:	4433      	add	r3, r6
 8004942:	9309      	str	r3, [sp, #36]	; 0x24
 8004944:	e767      	b.n	8004816 <_svfiprintf_r+0x4e>
 8004946:	fb0c 3202 	mla	r2, ip, r2, r3
 800494a:	460c      	mov	r4, r1
 800494c:	2001      	movs	r0, #1
 800494e:	e7a5      	b.n	800489c <_svfiprintf_r+0xd4>
 8004950:	2300      	movs	r3, #0
 8004952:	3401      	adds	r4, #1
 8004954:	9305      	str	r3, [sp, #20]
 8004956:	4619      	mov	r1, r3
 8004958:	f04f 0c0a 	mov.w	ip, #10
 800495c:	4620      	mov	r0, r4
 800495e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004962:	3a30      	subs	r2, #48	; 0x30
 8004964:	2a09      	cmp	r2, #9
 8004966:	d903      	bls.n	8004970 <_svfiprintf_r+0x1a8>
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0c5      	beq.n	80048f8 <_svfiprintf_r+0x130>
 800496c:	9105      	str	r1, [sp, #20]
 800496e:	e7c3      	b.n	80048f8 <_svfiprintf_r+0x130>
 8004970:	fb0c 2101 	mla	r1, ip, r1, r2
 8004974:	4604      	mov	r4, r0
 8004976:	2301      	movs	r3, #1
 8004978:	e7f0      	b.n	800495c <_svfiprintf_r+0x194>
 800497a:	ab03      	add	r3, sp, #12
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	462a      	mov	r2, r5
 8004980:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <_svfiprintf_r+0x1f8>)
 8004982:	a904      	add	r1, sp, #16
 8004984:	4638      	mov	r0, r7
 8004986:	f3af 8000 	nop.w
 800498a:	1c42      	adds	r2, r0, #1
 800498c:	4606      	mov	r6, r0
 800498e:	d1d6      	bne.n	800493e <_svfiprintf_r+0x176>
 8004990:	89ab      	ldrh	r3, [r5, #12]
 8004992:	065b      	lsls	r3, r3, #25
 8004994:	f53f af2c 	bmi.w	80047f0 <_svfiprintf_r+0x28>
 8004998:	9809      	ldr	r0, [sp, #36]	; 0x24
 800499a:	b01d      	add	sp, #116	; 0x74
 800499c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a0:	ab03      	add	r3, sp, #12
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	462a      	mov	r2, r5
 80049a6:	4b06      	ldr	r3, [pc, #24]	; (80049c0 <_svfiprintf_r+0x1f8>)
 80049a8:	a904      	add	r1, sp, #16
 80049aa:	4638      	mov	r0, r7
 80049ac:	f000 f87a 	bl	8004aa4 <_printf_i>
 80049b0:	e7eb      	b.n	800498a <_svfiprintf_r+0x1c2>
 80049b2:	bf00      	nop
 80049b4:	0800545c 	.word	0x0800545c
 80049b8:	08005466 	.word	0x08005466
 80049bc:	00000000 	.word	0x00000000
 80049c0:	08004711 	.word	0x08004711
 80049c4:	08005462 	.word	0x08005462

080049c8 <_printf_common>:
 80049c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049cc:	4616      	mov	r6, r2
 80049ce:	4699      	mov	r9, r3
 80049d0:	688a      	ldr	r2, [r1, #8]
 80049d2:	690b      	ldr	r3, [r1, #16]
 80049d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049d8:	4293      	cmp	r3, r2
 80049da:	bfb8      	it	lt
 80049dc:	4613      	movlt	r3, r2
 80049de:	6033      	str	r3, [r6, #0]
 80049e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049e4:	4607      	mov	r7, r0
 80049e6:	460c      	mov	r4, r1
 80049e8:	b10a      	cbz	r2, 80049ee <_printf_common+0x26>
 80049ea:	3301      	adds	r3, #1
 80049ec:	6033      	str	r3, [r6, #0]
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	0699      	lsls	r1, r3, #26
 80049f2:	bf42      	ittt	mi
 80049f4:	6833      	ldrmi	r3, [r6, #0]
 80049f6:	3302      	addmi	r3, #2
 80049f8:	6033      	strmi	r3, [r6, #0]
 80049fa:	6825      	ldr	r5, [r4, #0]
 80049fc:	f015 0506 	ands.w	r5, r5, #6
 8004a00:	d106      	bne.n	8004a10 <_printf_common+0x48>
 8004a02:	f104 0a19 	add.w	sl, r4, #25
 8004a06:	68e3      	ldr	r3, [r4, #12]
 8004a08:	6832      	ldr	r2, [r6, #0]
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	42ab      	cmp	r3, r5
 8004a0e:	dc26      	bgt.n	8004a5e <_printf_common+0x96>
 8004a10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a14:	1e13      	subs	r3, r2, #0
 8004a16:	6822      	ldr	r2, [r4, #0]
 8004a18:	bf18      	it	ne
 8004a1a:	2301      	movne	r3, #1
 8004a1c:	0692      	lsls	r2, r2, #26
 8004a1e:	d42b      	bmi.n	8004a78 <_printf_common+0xb0>
 8004a20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a24:	4649      	mov	r1, r9
 8004a26:	4638      	mov	r0, r7
 8004a28:	47c0      	blx	r8
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	d01e      	beq.n	8004a6c <_printf_common+0xa4>
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	68e5      	ldr	r5, [r4, #12]
 8004a32:	6832      	ldr	r2, [r6, #0]
 8004a34:	f003 0306 	and.w	r3, r3, #6
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	bf08      	it	eq
 8004a3c:	1aad      	subeq	r5, r5, r2
 8004a3e:	68a3      	ldr	r3, [r4, #8]
 8004a40:	6922      	ldr	r2, [r4, #16]
 8004a42:	bf0c      	ite	eq
 8004a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a48:	2500      	movne	r5, #0
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	bfc4      	itt	gt
 8004a4e:	1a9b      	subgt	r3, r3, r2
 8004a50:	18ed      	addgt	r5, r5, r3
 8004a52:	2600      	movs	r6, #0
 8004a54:	341a      	adds	r4, #26
 8004a56:	42b5      	cmp	r5, r6
 8004a58:	d11a      	bne.n	8004a90 <_printf_common+0xc8>
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	e008      	b.n	8004a70 <_printf_common+0xa8>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	4652      	mov	r2, sl
 8004a62:	4649      	mov	r1, r9
 8004a64:	4638      	mov	r0, r7
 8004a66:	47c0      	blx	r8
 8004a68:	3001      	adds	r0, #1
 8004a6a:	d103      	bne.n	8004a74 <_printf_common+0xac>
 8004a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a74:	3501      	adds	r5, #1
 8004a76:	e7c6      	b.n	8004a06 <_printf_common+0x3e>
 8004a78:	18e1      	adds	r1, r4, r3
 8004a7a:	1c5a      	adds	r2, r3, #1
 8004a7c:	2030      	movs	r0, #48	; 0x30
 8004a7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a82:	4422      	add	r2, r4
 8004a84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a8c:	3302      	adds	r3, #2
 8004a8e:	e7c7      	b.n	8004a20 <_printf_common+0x58>
 8004a90:	2301      	movs	r3, #1
 8004a92:	4622      	mov	r2, r4
 8004a94:	4649      	mov	r1, r9
 8004a96:	4638      	mov	r0, r7
 8004a98:	47c0      	blx	r8
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	d0e6      	beq.n	8004a6c <_printf_common+0xa4>
 8004a9e:	3601      	adds	r6, #1
 8004aa0:	e7d9      	b.n	8004a56 <_printf_common+0x8e>
	...

08004aa4 <_printf_i>:
 8004aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa8:	460c      	mov	r4, r1
 8004aaa:	4691      	mov	r9, r2
 8004aac:	7e27      	ldrb	r7, [r4, #24]
 8004aae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ab0:	2f78      	cmp	r7, #120	; 0x78
 8004ab2:	4680      	mov	r8, r0
 8004ab4:	469a      	mov	sl, r3
 8004ab6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aba:	d807      	bhi.n	8004acc <_printf_i+0x28>
 8004abc:	2f62      	cmp	r7, #98	; 0x62
 8004abe:	d80a      	bhi.n	8004ad6 <_printf_i+0x32>
 8004ac0:	2f00      	cmp	r7, #0
 8004ac2:	f000 80d8 	beq.w	8004c76 <_printf_i+0x1d2>
 8004ac6:	2f58      	cmp	r7, #88	; 0x58
 8004ac8:	f000 80a3 	beq.w	8004c12 <_printf_i+0x16e>
 8004acc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ad0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ad4:	e03a      	b.n	8004b4c <_printf_i+0xa8>
 8004ad6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ada:	2b15      	cmp	r3, #21
 8004adc:	d8f6      	bhi.n	8004acc <_printf_i+0x28>
 8004ade:	a001      	add	r0, pc, #4	; (adr r0, 8004ae4 <_printf_i+0x40>)
 8004ae0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004ae4:	08004b3d 	.word	0x08004b3d
 8004ae8:	08004b51 	.word	0x08004b51
 8004aec:	08004acd 	.word	0x08004acd
 8004af0:	08004acd 	.word	0x08004acd
 8004af4:	08004acd 	.word	0x08004acd
 8004af8:	08004acd 	.word	0x08004acd
 8004afc:	08004b51 	.word	0x08004b51
 8004b00:	08004acd 	.word	0x08004acd
 8004b04:	08004acd 	.word	0x08004acd
 8004b08:	08004acd 	.word	0x08004acd
 8004b0c:	08004acd 	.word	0x08004acd
 8004b10:	08004c5d 	.word	0x08004c5d
 8004b14:	08004b81 	.word	0x08004b81
 8004b18:	08004c3f 	.word	0x08004c3f
 8004b1c:	08004acd 	.word	0x08004acd
 8004b20:	08004acd 	.word	0x08004acd
 8004b24:	08004c7f 	.word	0x08004c7f
 8004b28:	08004acd 	.word	0x08004acd
 8004b2c:	08004b81 	.word	0x08004b81
 8004b30:	08004acd 	.word	0x08004acd
 8004b34:	08004acd 	.word	0x08004acd
 8004b38:	08004c47 	.word	0x08004c47
 8004b3c:	680b      	ldr	r3, [r1, #0]
 8004b3e:	1d1a      	adds	r2, r3, #4
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	600a      	str	r2, [r1, #0]
 8004b44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0a3      	b.n	8004c98 <_printf_i+0x1f4>
 8004b50:	6825      	ldr	r5, [r4, #0]
 8004b52:	6808      	ldr	r0, [r1, #0]
 8004b54:	062e      	lsls	r6, r5, #24
 8004b56:	f100 0304 	add.w	r3, r0, #4
 8004b5a:	d50a      	bpl.n	8004b72 <_printf_i+0xce>
 8004b5c:	6805      	ldr	r5, [r0, #0]
 8004b5e:	600b      	str	r3, [r1, #0]
 8004b60:	2d00      	cmp	r5, #0
 8004b62:	da03      	bge.n	8004b6c <_printf_i+0xc8>
 8004b64:	232d      	movs	r3, #45	; 0x2d
 8004b66:	426d      	negs	r5, r5
 8004b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b6c:	485e      	ldr	r0, [pc, #376]	; (8004ce8 <_printf_i+0x244>)
 8004b6e:	230a      	movs	r3, #10
 8004b70:	e019      	b.n	8004ba6 <_printf_i+0x102>
 8004b72:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b76:	6805      	ldr	r5, [r0, #0]
 8004b78:	600b      	str	r3, [r1, #0]
 8004b7a:	bf18      	it	ne
 8004b7c:	b22d      	sxthne	r5, r5
 8004b7e:	e7ef      	b.n	8004b60 <_printf_i+0xbc>
 8004b80:	680b      	ldr	r3, [r1, #0]
 8004b82:	6825      	ldr	r5, [r4, #0]
 8004b84:	1d18      	adds	r0, r3, #4
 8004b86:	6008      	str	r0, [r1, #0]
 8004b88:	0628      	lsls	r0, r5, #24
 8004b8a:	d501      	bpl.n	8004b90 <_printf_i+0xec>
 8004b8c:	681d      	ldr	r5, [r3, #0]
 8004b8e:	e002      	b.n	8004b96 <_printf_i+0xf2>
 8004b90:	0669      	lsls	r1, r5, #25
 8004b92:	d5fb      	bpl.n	8004b8c <_printf_i+0xe8>
 8004b94:	881d      	ldrh	r5, [r3, #0]
 8004b96:	4854      	ldr	r0, [pc, #336]	; (8004ce8 <_printf_i+0x244>)
 8004b98:	2f6f      	cmp	r7, #111	; 0x6f
 8004b9a:	bf0c      	ite	eq
 8004b9c:	2308      	moveq	r3, #8
 8004b9e:	230a      	movne	r3, #10
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ba6:	6866      	ldr	r6, [r4, #4]
 8004ba8:	60a6      	str	r6, [r4, #8]
 8004baa:	2e00      	cmp	r6, #0
 8004bac:	bfa2      	ittt	ge
 8004bae:	6821      	ldrge	r1, [r4, #0]
 8004bb0:	f021 0104 	bicge.w	r1, r1, #4
 8004bb4:	6021      	strge	r1, [r4, #0]
 8004bb6:	b90d      	cbnz	r5, 8004bbc <_printf_i+0x118>
 8004bb8:	2e00      	cmp	r6, #0
 8004bba:	d04d      	beq.n	8004c58 <_printf_i+0x1b4>
 8004bbc:	4616      	mov	r6, r2
 8004bbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8004bc2:	fb03 5711 	mls	r7, r3, r1, r5
 8004bc6:	5dc7      	ldrb	r7, [r0, r7]
 8004bc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bcc:	462f      	mov	r7, r5
 8004bce:	42bb      	cmp	r3, r7
 8004bd0:	460d      	mov	r5, r1
 8004bd2:	d9f4      	bls.n	8004bbe <_printf_i+0x11a>
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d10b      	bne.n	8004bf0 <_printf_i+0x14c>
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	07df      	lsls	r7, r3, #31
 8004bdc:	d508      	bpl.n	8004bf0 <_printf_i+0x14c>
 8004bde:	6923      	ldr	r3, [r4, #16]
 8004be0:	6861      	ldr	r1, [r4, #4]
 8004be2:	4299      	cmp	r1, r3
 8004be4:	bfde      	ittt	le
 8004be6:	2330      	movle	r3, #48	; 0x30
 8004be8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bec:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004bf0:	1b92      	subs	r2, r2, r6
 8004bf2:	6122      	str	r2, [r4, #16]
 8004bf4:	f8cd a000 	str.w	sl, [sp]
 8004bf8:	464b      	mov	r3, r9
 8004bfa:	aa03      	add	r2, sp, #12
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	4640      	mov	r0, r8
 8004c00:	f7ff fee2 	bl	80049c8 <_printf_common>
 8004c04:	3001      	adds	r0, #1
 8004c06:	d14c      	bne.n	8004ca2 <_printf_i+0x1fe>
 8004c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c0c:	b004      	add	sp, #16
 8004c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c12:	4835      	ldr	r0, [pc, #212]	; (8004ce8 <_printf_i+0x244>)
 8004c14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	680e      	ldr	r6, [r1, #0]
 8004c1c:	061f      	lsls	r7, r3, #24
 8004c1e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004c22:	600e      	str	r6, [r1, #0]
 8004c24:	d514      	bpl.n	8004c50 <_printf_i+0x1ac>
 8004c26:	07d9      	lsls	r1, r3, #31
 8004c28:	bf44      	itt	mi
 8004c2a:	f043 0320 	orrmi.w	r3, r3, #32
 8004c2e:	6023      	strmi	r3, [r4, #0]
 8004c30:	b91d      	cbnz	r5, 8004c3a <_printf_i+0x196>
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	f023 0320 	bic.w	r3, r3, #32
 8004c38:	6023      	str	r3, [r4, #0]
 8004c3a:	2310      	movs	r3, #16
 8004c3c:	e7b0      	b.n	8004ba0 <_printf_i+0xfc>
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	f043 0320 	orr.w	r3, r3, #32
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	2378      	movs	r3, #120	; 0x78
 8004c48:	4828      	ldr	r0, [pc, #160]	; (8004cec <_printf_i+0x248>)
 8004c4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c4e:	e7e3      	b.n	8004c18 <_printf_i+0x174>
 8004c50:	065e      	lsls	r6, r3, #25
 8004c52:	bf48      	it	mi
 8004c54:	b2ad      	uxthmi	r5, r5
 8004c56:	e7e6      	b.n	8004c26 <_printf_i+0x182>
 8004c58:	4616      	mov	r6, r2
 8004c5a:	e7bb      	b.n	8004bd4 <_printf_i+0x130>
 8004c5c:	680b      	ldr	r3, [r1, #0]
 8004c5e:	6826      	ldr	r6, [r4, #0]
 8004c60:	6960      	ldr	r0, [r4, #20]
 8004c62:	1d1d      	adds	r5, r3, #4
 8004c64:	600d      	str	r5, [r1, #0]
 8004c66:	0635      	lsls	r5, r6, #24
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	d501      	bpl.n	8004c70 <_printf_i+0x1cc>
 8004c6c:	6018      	str	r0, [r3, #0]
 8004c6e:	e002      	b.n	8004c76 <_printf_i+0x1d2>
 8004c70:	0671      	lsls	r1, r6, #25
 8004c72:	d5fb      	bpl.n	8004c6c <_printf_i+0x1c8>
 8004c74:	8018      	strh	r0, [r3, #0]
 8004c76:	2300      	movs	r3, #0
 8004c78:	6123      	str	r3, [r4, #16]
 8004c7a:	4616      	mov	r6, r2
 8004c7c:	e7ba      	b.n	8004bf4 <_printf_i+0x150>
 8004c7e:	680b      	ldr	r3, [r1, #0]
 8004c80:	1d1a      	adds	r2, r3, #4
 8004c82:	600a      	str	r2, [r1, #0]
 8004c84:	681e      	ldr	r6, [r3, #0]
 8004c86:	6862      	ldr	r2, [r4, #4]
 8004c88:	2100      	movs	r1, #0
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f7fb fab0 	bl	80001f0 <memchr>
 8004c90:	b108      	cbz	r0, 8004c96 <_printf_i+0x1f2>
 8004c92:	1b80      	subs	r0, r0, r6
 8004c94:	6060      	str	r0, [r4, #4]
 8004c96:	6863      	ldr	r3, [r4, #4]
 8004c98:	6123      	str	r3, [r4, #16]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ca0:	e7a8      	b.n	8004bf4 <_printf_i+0x150>
 8004ca2:	6923      	ldr	r3, [r4, #16]
 8004ca4:	4632      	mov	r2, r6
 8004ca6:	4649      	mov	r1, r9
 8004ca8:	4640      	mov	r0, r8
 8004caa:	47d0      	blx	sl
 8004cac:	3001      	adds	r0, #1
 8004cae:	d0ab      	beq.n	8004c08 <_printf_i+0x164>
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	079b      	lsls	r3, r3, #30
 8004cb4:	d413      	bmi.n	8004cde <_printf_i+0x23a>
 8004cb6:	68e0      	ldr	r0, [r4, #12]
 8004cb8:	9b03      	ldr	r3, [sp, #12]
 8004cba:	4298      	cmp	r0, r3
 8004cbc:	bfb8      	it	lt
 8004cbe:	4618      	movlt	r0, r3
 8004cc0:	e7a4      	b.n	8004c0c <_printf_i+0x168>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	4632      	mov	r2, r6
 8004cc6:	4649      	mov	r1, r9
 8004cc8:	4640      	mov	r0, r8
 8004cca:	47d0      	blx	sl
 8004ccc:	3001      	adds	r0, #1
 8004cce:	d09b      	beq.n	8004c08 <_printf_i+0x164>
 8004cd0:	3501      	adds	r5, #1
 8004cd2:	68e3      	ldr	r3, [r4, #12]
 8004cd4:	9903      	ldr	r1, [sp, #12]
 8004cd6:	1a5b      	subs	r3, r3, r1
 8004cd8:	42ab      	cmp	r3, r5
 8004cda:	dcf2      	bgt.n	8004cc2 <_printf_i+0x21e>
 8004cdc:	e7eb      	b.n	8004cb6 <_printf_i+0x212>
 8004cde:	2500      	movs	r5, #0
 8004ce0:	f104 0619 	add.w	r6, r4, #25
 8004ce4:	e7f5      	b.n	8004cd2 <_printf_i+0x22e>
 8004ce6:	bf00      	nop
 8004ce8:	0800546d 	.word	0x0800546d
 8004cec:	0800547e 	.word	0x0800547e

08004cf0 <memcpy>:
 8004cf0:	440a      	add	r2, r1
 8004cf2:	4291      	cmp	r1, r2
 8004cf4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004cf8:	d100      	bne.n	8004cfc <memcpy+0xc>
 8004cfa:	4770      	bx	lr
 8004cfc:	b510      	push	{r4, lr}
 8004cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d06:	4291      	cmp	r1, r2
 8004d08:	d1f9      	bne.n	8004cfe <memcpy+0xe>
 8004d0a:	bd10      	pop	{r4, pc}

08004d0c <memmove>:
 8004d0c:	4288      	cmp	r0, r1
 8004d0e:	b510      	push	{r4, lr}
 8004d10:	eb01 0402 	add.w	r4, r1, r2
 8004d14:	d902      	bls.n	8004d1c <memmove+0x10>
 8004d16:	4284      	cmp	r4, r0
 8004d18:	4623      	mov	r3, r4
 8004d1a:	d807      	bhi.n	8004d2c <memmove+0x20>
 8004d1c:	1e43      	subs	r3, r0, #1
 8004d1e:	42a1      	cmp	r1, r4
 8004d20:	d008      	beq.n	8004d34 <memmove+0x28>
 8004d22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d2a:	e7f8      	b.n	8004d1e <memmove+0x12>
 8004d2c:	4402      	add	r2, r0
 8004d2e:	4601      	mov	r1, r0
 8004d30:	428a      	cmp	r2, r1
 8004d32:	d100      	bne.n	8004d36 <memmove+0x2a>
 8004d34:	bd10      	pop	{r4, pc}
 8004d36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d3e:	e7f7      	b.n	8004d30 <memmove+0x24>

08004d40 <_free_r>:
 8004d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d42:	2900      	cmp	r1, #0
 8004d44:	d048      	beq.n	8004dd8 <_free_r+0x98>
 8004d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d4a:	9001      	str	r0, [sp, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8004d52:	bfb8      	it	lt
 8004d54:	18e4      	addlt	r4, r4, r3
 8004d56:	f000 f8d3 	bl	8004f00 <__malloc_lock>
 8004d5a:	4a20      	ldr	r2, [pc, #128]	; (8004ddc <_free_r+0x9c>)
 8004d5c:	9801      	ldr	r0, [sp, #4]
 8004d5e:	6813      	ldr	r3, [r2, #0]
 8004d60:	4615      	mov	r5, r2
 8004d62:	b933      	cbnz	r3, 8004d72 <_free_r+0x32>
 8004d64:	6063      	str	r3, [r4, #4]
 8004d66:	6014      	str	r4, [r2, #0]
 8004d68:	b003      	add	sp, #12
 8004d6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d6e:	f000 b8cd 	b.w	8004f0c <__malloc_unlock>
 8004d72:	42a3      	cmp	r3, r4
 8004d74:	d90b      	bls.n	8004d8e <_free_r+0x4e>
 8004d76:	6821      	ldr	r1, [r4, #0]
 8004d78:	1862      	adds	r2, r4, r1
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	bf04      	itt	eq
 8004d7e:	681a      	ldreq	r2, [r3, #0]
 8004d80:	685b      	ldreq	r3, [r3, #4]
 8004d82:	6063      	str	r3, [r4, #4]
 8004d84:	bf04      	itt	eq
 8004d86:	1852      	addeq	r2, r2, r1
 8004d88:	6022      	streq	r2, [r4, #0]
 8004d8a:	602c      	str	r4, [r5, #0]
 8004d8c:	e7ec      	b.n	8004d68 <_free_r+0x28>
 8004d8e:	461a      	mov	r2, r3
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	b10b      	cbz	r3, 8004d98 <_free_r+0x58>
 8004d94:	42a3      	cmp	r3, r4
 8004d96:	d9fa      	bls.n	8004d8e <_free_r+0x4e>
 8004d98:	6811      	ldr	r1, [r2, #0]
 8004d9a:	1855      	adds	r5, r2, r1
 8004d9c:	42a5      	cmp	r5, r4
 8004d9e:	d10b      	bne.n	8004db8 <_free_r+0x78>
 8004da0:	6824      	ldr	r4, [r4, #0]
 8004da2:	4421      	add	r1, r4
 8004da4:	1854      	adds	r4, r2, r1
 8004da6:	42a3      	cmp	r3, r4
 8004da8:	6011      	str	r1, [r2, #0]
 8004daa:	d1dd      	bne.n	8004d68 <_free_r+0x28>
 8004dac:	681c      	ldr	r4, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	6053      	str	r3, [r2, #4]
 8004db2:	4421      	add	r1, r4
 8004db4:	6011      	str	r1, [r2, #0]
 8004db6:	e7d7      	b.n	8004d68 <_free_r+0x28>
 8004db8:	d902      	bls.n	8004dc0 <_free_r+0x80>
 8004dba:	230c      	movs	r3, #12
 8004dbc:	6003      	str	r3, [r0, #0]
 8004dbe:	e7d3      	b.n	8004d68 <_free_r+0x28>
 8004dc0:	6825      	ldr	r5, [r4, #0]
 8004dc2:	1961      	adds	r1, r4, r5
 8004dc4:	428b      	cmp	r3, r1
 8004dc6:	bf04      	itt	eq
 8004dc8:	6819      	ldreq	r1, [r3, #0]
 8004dca:	685b      	ldreq	r3, [r3, #4]
 8004dcc:	6063      	str	r3, [r4, #4]
 8004dce:	bf04      	itt	eq
 8004dd0:	1949      	addeq	r1, r1, r5
 8004dd2:	6021      	streq	r1, [r4, #0]
 8004dd4:	6054      	str	r4, [r2, #4]
 8004dd6:	e7c7      	b.n	8004d68 <_free_r+0x28>
 8004dd8:	b003      	add	sp, #12
 8004dda:	bd30      	pop	{r4, r5, pc}
 8004ddc:	20000090 	.word	0x20000090

08004de0 <_malloc_r>:
 8004de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de2:	1ccd      	adds	r5, r1, #3
 8004de4:	f025 0503 	bic.w	r5, r5, #3
 8004de8:	3508      	adds	r5, #8
 8004dea:	2d0c      	cmp	r5, #12
 8004dec:	bf38      	it	cc
 8004dee:	250c      	movcc	r5, #12
 8004df0:	2d00      	cmp	r5, #0
 8004df2:	4606      	mov	r6, r0
 8004df4:	db01      	blt.n	8004dfa <_malloc_r+0x1a>
 8004df6:	42a9      	cmp	r1, r5
 8004df8:	d903      	bls.n	8004e02 <_malloc_r+0x22>
 8004dfa:	230c      	movs	r3, #12
 8004dfc:	6033      	str	r3, [r6, #0]
 8004dfe:	2000      	movs	r0, #0
 8004e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e02:	f000 f87d 	bl	8004f00 <__malloc_lock>
 8004e06:	4921      	ldr	r1, [pc, #132]	; (8004e8c <_malloc_r+0xac>)
 8004e08:	680a      	ldr	r2, [r1, #0]
 8004e0a:	4614      	mov	r4, r2
 8004e0c:	b99c      	cbnz	r4, 8004e36 <_malloc_r+0x56>
 8004e0e:	4f20      	ldr	r7, [pc, #128]	; (8004e90 <_malloc_r+0xb0>)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	b923      	cbnz	r3, 8004e1e <_malloc_r+0x3e>
 8004e14:	4621      	mov	r1, r4
 8004e16:	4630      	mov	r0, r6
 8004e18:	f000 f862 	bl	8004ee0 <_sbrk_r>
 8004e1c:	6038      	str	r0, [r7, #0]
 8004e1e:	4629      	mov	r1, r5
 8004e20:	4630      	mov	r0, r6
 8004e22:	f000 f85d 	bl	8004ee0 <_sbrk_r>
 8004e26:	1c43      	adds	r3, r0, #1
 8004e28:	d123      	bne.n	8004e72 <_malloc_r+0x92>
 8004e2a:	230c      	movs	r3, #12
 8004e2c:	6033      	str	r3, [r6, #0]
 8004e2e:	4630      	mov	r0, r6
 8004e30:	f000 f86c 	bl	8004f0c <__malloc_unlock>
 8004e34:	e7e3      	b.n	8004dfe <_malloc_r+0x1e>
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	1b5b      	subs	r3, r3, r5
 8004e3a:	d417      	bmi.n	8004e6c <_malloc_r+0x8c>
 8004e3c:	2b0b      	cmp	r3, #11
 8004e3e:	d903      	bls.n	8004e48 <_malloc_r+0x68>
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	441c      	add	r4, r3
 8004e44:	6025      	str	r5, [r4, #0]
 8004e46:	e004      	b.n	8004e52 <_malloc_r+0x72>
 8004e48:	6863      	ldr	r3, [r4, #4]
 8004e4a:	42a2      	cmp	r2, r4
 8004e4c:	bf0c      	ite	eq
 8004e4e:	600b      	streq	r3, [r1, #0]
 8004e50:	6053      	strne	r3, [r2, #4]
 8004e52:	4630      	mov	r0, r6
 8004e54:	f000 f85a 	bl	8004f0c <__malloc_unlock>
 8004e58:	f104 000b 	add.w	r0, r4, #11
 8004e5c:	1d23      	adds	r3, r4, #4
 8004e5e:	f020 0007 	bic.w	r0, r0, #7
 8004e62:	1ac2      	subs	r2, r0, r3
 8004e64:	d0cc      	beq.n	8004e00 <_malloc_r+0x20>
 8004e66:	1a1b      	subs	r3, r3, r0
 8004e68:	50a3      	str	r3, [r4, r2]
 8004e6a:	e7c9      	b.n	8004e00 <_malloc_r+0x20>
 8004e6c:	4622      	mov	r2, r4
 8004e6e:	6864      	ldr	r4, [r4, #4]
 8004e70:	e7cc      	b.n	8004e0c <_malloc_r+0x2c>
 8004e72:	1cc4      	adds	r4, r0, #3
 8004e74:	f024 0403 	bic.w	r4, r4, #3
 8004e78:	42a0      	cmp	r0, r4
 8004e7a:	d0e3      	beq.n	8004e44 <_malloc_r+0x64>
 8004e7c:	1a21      	subs	r1, r4, r0
 8004e7e:	4630      	mov	r0, r6
 8004e80:	f000 f82e 	bl	8004ee0 <_sbrk_r>
 8004e84:	3001      	adds	r0, #1
 8004e86:	d1dd      	bne.n	8004e44 <_malloc_r+0x64>
 8004e88:	e7cf      	b.n	8004e2a <_malloc_r+0x4a>
 8004e8a:	bf00      	nop
 8004e8c:	20000090 	.word	0x20000090
 8004e90:	20000094 	.word	0x20000094

08004e94 <_realloc_r>:
 8004e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e96:	4607      	mov	r7, r0
 8004e98:	4614      	mov	r4, r2
 8004e9a:	460e      	mov	r6, r1
 8004e9c:	b921      	cbnz	r1, 8004ea8 <_realloc_r+0x14>
 8004e9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	f7ff bf9c 	b.w	8004de0 <_malloc_r>
 8004ea8:	b922      	cbnz	r2, 8004eb4 <_realloc_r+0x20>
 8004eaa:	f7ff ff49 	bl	8004d40 <_free_r>
 8004eae:	4625      	mov	r5, r4
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eb4:	f000 f830 	bl	8004f18 <_malloc_usable_size_r>
 8004eb8:	42a0      	cmp	r0, r4
 8004eba:	d20f      	bcs.n	8004edc <_realloc_r+0x48>
 8004ebc:	4621      	mov	r1, r4
 8004ebe:	4638      	mov	r0, r7
 8004ec0:	f7ff ff8e 	bl	8004de0 <_malloc_r>
 8004ec4:	4605      	mov	r5, r0
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	d0f2      	beq.n	8004eb0 <_realloc_r+0x1c>
 8004eca:	4631      	mov	r1, r6
 8004ecc:	4622      	mov	r2, r4
 8004ece:	f7ff ff0f 	bl	8004cf0 <memcpy>
 8004ed2:	4631      	mov	r1, r6
 8004ed4:	4638      	mov	r0, r7
 8004ed6:	f7ff ff33 	bl	8004d40 <_free_r>
 8004eda:	e7e9      	b.n	8004eb0 <_realloc_r+0x1c>
 8004edc:	4635      	mov	r5, r6
 8004ede:	e7e7      	b.n	8004eb0 <_realloc_r+0x1c>

08004ee0 <_sbrk_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	4d06      	ldr	r5, [pc, #24]	; (8004efc <_sbrk_r+0x1c>)
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	4608      	mov	r0, r1
 8004eea:	602b      	str	r3, [r5, #0]
 8004eec:	f7fc fe14 	bl	8001b18 <_sbrk>
 8004ef0:	1c43      	adds	r3, r0, #1
 8004ef2:	d102      	bne.n	8004efa <_sbrk_r+0x1a>
 8004ef4:	682b      	ldr	r3, [r5, #0]
 8004ef6:	b103      	cbz	r3, 8004efa <_sbrk_r+0x1a>
 8004ef8:	6023      	str	r3, [r4, #0]
 8004efa:	bd38      	pop	{r3, r4, r5, pc}
 8004efc:	20000204 	.word	0x20000204

08004f00 <__malloc_lock>:
 8004f00:	4801      	ldr	r0, [pc, #4]	; (8004f08 <__malloc_lock+0x8>)
 8004f02:	f000 b811 	b.w	8004f28 <__retarget_lock_acquire_recursive>
 8004f06:	bf00      	nop
 8004f08:	2000020c 	.word	0x2000020c

08004f0c <__malloc_unlock>:
 8004f0c:	4801      	ldr	r0, [pc, #4]	; (8004f14 <__malloc_unlock+0x8>)
 8004f0e:	f000 b80c 	b.w	8004f2a <__retarget_lock_release_recursive>
 8004f12:	bf00      	nop
 8004f14:	2000020c 	.word	0x2000020c

08004f18 <_malloc_usable_size_r>:
 8004f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f1c:	1f18      	subs	r0, r3, #4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	bfbc      	itt	lt
 8004f22:	580b      	ldrlt	r3, [r1, r0]
 8004f24:	18c0      	addlt	r0, r0, r3
 8004f26:	4770      	bx	lr

08004f28 <__retarget_lock_acquire_recursive>:
 8004f28:	4770      	bx	lr

08004f2a <__retarget_lock_release_recursive>:
 8004f2a:	4770      	bx	lr

08004f2c <atan2>:
 8004f2c:	f000 b800 	b.w	8004f30 <__ieee754_atan2>

08004f30 <__ieee754_atan2>:
 8004f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f34:	ec57 6b11 	vmov	r6, r7, d1
 8004f38:	4273      	negs	r3, r6
 8004f3a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80050c0 <__ieee754_atan2+0x190>
 8004f3e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8004f42:	4333      	orrs	r3, r6
 8004f44:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8004f48:	4573      	cmp	r3, lr
 8004f4a:	ec51 0b10 	vmov	r0, r1, d0
 8004f4e:	ee11 8a10 	vmov	r8, s2
 8004f52:	d80a      	bhi.n	8004f6a <__ieee754_atan2+0x3a>
 8004f54:	4244      	negs	r4, r0
 8004f56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004f5a:	4304      	orrs	r4, r0
 8004f5c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8004f60:	4574      	cmp	r4, lr
 8004f62:	ee10 9a10 	vmov	r9, s0
 8004f66:	468c      	mov	ip, r1
 8004f68:	d907      	bls.n	8004f7a <__ieee754_atan2+0x4a>
 8004f6a:	4632      	mov	r2, r6
 8004f6c:	463b      	mov	r3, r7
 8004f6e:	f7fb f995 	bl	800029c <__adddf3>
 8004f72:	ec41 0b10 	vmov	d0, r0, r1
 8004f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f7a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8004f7e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004f82:	4334      	orrs	r4, r6
 8004f84:	d103      	bne.n	8004f8e <__ieee754_atan2+0x5e>
 8004f86:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f8a:	f000 b89d 	b.w	80050c8 <atan>
 8004f8e:	17bc      	asrs	r4, r7, #30
 8004f90:	f004 0402 	and.w	r4, r4, #2
 8004f94:	ea53 0909 	orrs.w	r9, r3, r9
 8004f98:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8004f9c:	d107      	bne.n	8004fae <__ieee754_atan2+0x7e>
 8004f9e:	2c02      	cmp	r4, #2
 8004fa0:	d060      	beq.n	8005064 <__ieee754_atan2+0x134>
 8004fa2:	2c03      	cmp	r4, #3
 8004fa4:	d1e5      	bne.n	8004f72 <__ieee754_atan2+0x42>
 8004fa6:	a142      	add	r1, pc, #264	; (adr r1, 80050b0 <__ieee754_atan2+0x180>)
 8004fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fac:	e7e1      	b.n	8004f72 <__ieee754_atan2+0x42>
 8004fae:	ea52 0808 	orrs.w	r8, r2, r8
 8004fb2:	d106      	bne.n	8004fc2 <__ieee754_atan2+0x92>
 8004fb4:	f1bc 0f00 	cmp.w	ip, #0
 8004fb8:	da5f      	bge.n	800507a <__ieee754_atan2+0x14a>
 8004fba:	a13f      	add	r1, pc, #252	; (adr r1, 80050b8 <__ieee754_atan2+0x188>)
 8004fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fc0:	e7d7      	b.n	8004f72 <__ieee754_atan2+0x42>
 8004fc2:	4572      	cmp	r2, lr
 8004fc4:	d10f      	bne.n	8004fe6 <__ieee754_atan2+0xb6>
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004fcc:	d107      	bne.n	8004fde <__ieee754_atan2+0xae>
 8004fce:	2c02      	cmp	r4, #2
 8004fd0:	d84c      	bhi.n	800506c <__ieee754_atan2+0x13c>
 8004fd2:	4b35      	ldr	r3, [pc, #212]	; (80050a8 <__ieee754_atan2+0x178>)
 8004fd4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8004fd8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004fdc:	e7c9      	b.n	8004f72 <__ieee754_atan2+0x42>
 8004fde:	2c02      	cmp	r4, #2
 8004fe0:	d848      	bhi.n	8005074 <__ieee754_atan2+0x144>
 8004fe2:	4b32      	ldr	r3, [pc, #200]	; (80050ac <__ieee754_atan2+0x17c>)
 8004fe4:	e7f6      	b.n	8004fd4 <__ieee754_atan2+0xa4>
 8004fe6:	4573      	cmp	r3, lr
 8004fe8:	d0e4      	beq.n	8004fb4 <__ieee754_atan2+0x84>
 8004fea:	1a9b      	subs	r3, r3, r2
 8004fec:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8004ff0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004ff4:	da1e      	bge.n	8005034 <__ieee754_atan2+0x104>
 8004ff6:	2f00      	cmp	r7, #0
 8004ff8:	da01      	bge.n	8004ffe <__ieee754_atan2+0xce>
 8004ffa:	323c      	adds	r2, #60	; 0x3c
 8004ffc:	db1e      	blt.n	800503c <__ieee754_atan2+0x10c>
 8004ffe:	4632      	mov	r2, r6
 8005000:	463b      	mov	r3, r7
 8005002:	f7fb fc2b 	bl	800085c <__aeabi_ddiv>
 8005006:	ec41 0b10 	vmov	d0, r0, r1
 800500a:	f000 f9fd 	bl	8005408 <fabs>
 800500e:	f000 f85b 	bl	80050c8 <atan>
 8005012:	ec51 0b10 	vmov	r0, r1, d0
 8005016:	2c01      	cmp	r4, #1
 8005018:	d013      	beq.n	8005042 <__ieee754_atan2+0x112>
 800501a:	2c02      	cmp	r4, #2
 800501c:	d015      	beq.n	800504a <__ieee754_atan2+0x11a>
 800501e:	2c00      	cmp	r4, #0
 8005020:	d0a7      	beq.n	8004f72 <__ieee754_atan2+0x42>
 8005022:	a319      	add	r3, pc, #100	; (adr r3, 8005088 <__ieee754_atan2+0x158>)
 8005024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005028:	f7fb f936 	bl	8000298 <__aeabi_dsub>
 800502c:	a318      	add	r3, pc, #96	; (adr r3, 8005090 <__ieee754_atan2+0x160>)
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	e014      	b.n	800505e <__ieee754_atan2+0x12e>
 8005034:	a118      	add	r1, pc, #96	; (adr r1, 8005098 <__ieee754_atan2+0x168>)
 8005036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800503a:	e7ec      	b.n	8005016 <__ieee754_atan2+0xe6>
 800503c:	2000      	movs	r0, #0
 800503e:	2100      	movs	r1, #0
 8005040:	e7e9      	b.n	8005016 <__ieee754_atan2+0xe6>
 8005042:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005046:	4619      	mov	r1, r3
 8005048:	e793      	b.n	8004f72 <__ieee754_atan2+0x42>
 800504a:	a30f      	add	r3, pc, #60	; (adr r3, 8005088 <__ieee754_atan2+0x158>)
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f7fb f922 	bl	8000298 <__aeabi_dsub>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	a10d      	add	r1, pc, #52	; (adr r1, 8005090 <__ieee754_atan2+0x160>)
 800505a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800505e:	f7fb f91b 	bl	8000298 <__aeabi_dsub>
 8005062:	e786      	b.n	8004f72 <__ieee754_atan2+0x42>
 8005064:	a10a      	add	r1, pc, #40	; (adr r1, 8005090 <__ieee754_atan2+0x160>)
 8005066:	e9d1 0100 	ldrd	r0, r1, [r1]
 800506a:	e782      	b.n	8004f72 <__ieee754_atan2+0x42>
 800506c:	a10c      	add	r1, pc, #48	; (adr r1, 80050a0 <__ieee754_atan2+0x170>)
 800506e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005072:	e77e      	b.n	8004f72 <__ieee754_atan2+0x42>
 8005074:	2000      	movs	r0, #0
 8005076:	2100      	movs	r1, #0
 8005078:	e77b      	b.n	8004f72 <__ieee754_atan2+0x42>
 800507a:	a107      	add	r1, pc, #28	; (adr r1, 8005098 <__ieee754_atan2+0x168>)
 800507c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005080:	e777      	b.n	8004f72 <__ieee754_atan2+0x42>
 8005082:	bf00      	nop
 8005084:	f3af 8000 	nop.w
 8005088:	33145c07 	.word	0x33145c07
 800508c:	3ca1a626 	.word	0x3ca1a626
 8005090:	54442d18 	.word	0x54442d18
 8005094:	400921fb 	.word	0x400921fb
 8005098:	54442d18 	.word	0x54442d18
 800509c:	3ff921fb 	.word	0x3ff921fb
 80050a0:	54442d18 	.word	0x54442d18
 80050a4:	3fe921fb 	.word	0x3fe921fb
 80050a8:	08005490 	.word	0x08005490
 80050ac:	080054a8 	.word	0x080054a8
 80050b0:	54442d18 	.word	0x54442d18
 80050b4:	c00921fb 	.word	0xc00921fb
 80050b8:	54442d18 	.word	0x54442d18
 80050bc:	bff921fb 	.word	0xbff921fb
 80050c0:	7ff00000 	.word	0x7ff00000
 80050c4:	00000000 	.word	0x00000000

080050c8 <atan>:
 80050c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050cc:	ec55 4b10 	vmov	r4, r5, d0
 80050d0:	4bc3      	ldr	r3, [pc, #780]	; (80053e0 <atan+0x318>)
 80050d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80050d6:	429e      	cmp	r6, r3
 80050d8:	46ab      	mov	fp, r5
 80050da:	dd18      	ble.n	800510e <atan+0x46>
 80050dc:	4bc1      	ldr	r3, [pc, #772]	; (80053e4 <atan+0x31c>)
 80050de:	429e      	cmp	r6, r3
 80050e0:	dc01      	bgt.n	80050e6 <atan+0x1e>
 80050e2:	d109      	bne.n	80050f8 <atan+0x30>
 80050e4:	b144      	cbz	r4, 80050f8 <atan+0x30>
 80050e6:	4622      	mov	r2, r4
 80050e8:	462b      	mov	r3, r5
 80050ea:	4620      	mov	r0, r4
 80050ec:	4629      	mov	r1, r5
 80050ee:	f7fb f8d5 	bl	800029c <__adddf3>
 80050f2:	4604      	mov	r4, r0
 80050f4:	460d      	mov	r5, r1
 80050f6:	e006      	b.n	8005106 <atan+0x3e>
 80050f8:	f1bb 0f00 	cmp.w	fp, #0
 80050fc:	f300 8131 	bgt.w	8005362 <atan+0x29a>
 8005100:	a59b      	add	r5, pc, #620	; (adr r5, 8005370 <atan+0x2a8>)
 8005102:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005106:	ec45 4b10 	vmov	d0, r4, r5
 800510a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800510e:	4bb6      	ldr	r3, [pc, #728]	; (80053e8 <atan+0x320>)
 8005110:	429e      	cmp	r6, r3
 8005112:	dc14      	bgt.n	800513e <atan+0x76>
 8005114:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005118:	429e      	cmp	r6, r3
 800511a:	dc0d      	bgt.n	8005138 <atan+0x70>
 800511c:	a396      	add	r3, pc, #600	; (adr r3, 8005378 <atan+0x2b0>)
 800511e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005122:	ee10 0a10 	vmov	r0, s0
 8005126:	4629      	mov	r1, r5
 8005128:	f7fb f8b8 	bl	800029c <__adddf3>
 800512c:	4baf      	ldr	r3, [pc, #700]	; (80053ec <atan+0x324>)
 800512e:	2200      	movs	r2, #0
 8005130:	f7fb fcfa 	bl	8000b28 <__aeabi_dcmpgt>
 8005134:	2800      	cmp	r0, #0
 8005136:	d1e6      	bne.n	8005106 <atan+0x3e>
 8005138:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800513c:	e02b      	b.n	8005196 <atan+0xce>
 800513e:	f000 f963 	bl	8005408 <fabs>
 8005142:	4bab      	ldr	r3, [pc, #684]	; (80053f0 <atan+0x328>)
 8005144:	429e      	cmp	r6, r3
 8005146:	ec55 4b10 	vmov	r4, r5, d0
 800514a:	f300 80bf 	bgt.w	80052cc <atan+0x204>
 800514e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005152:	429e      	cmp	r6, r3
 8005154:	f300 80a0 	bgt.w	8005298 <atan+0x1d0>
 8005158:	ee10 2a10 	vmov	r2, s0
 800515c:	ee10 0a10 	vmov	r0, s0
 8005160:	462b      	mov	r3, r5
 8005162:	4629      	mov	r1, r5
 8005164:	f7fb f89a 	bl	800029c <__adddf3>
 8005168:	4ba0      	ldr	r3, [pc, #640]	; (80053ec <atan+0x324>)
 800516a:	2200      	movs	r2, #0
 800516c:	f7fb f894 	bl	8000298 <__aeabi_dsub>
 8005170:	2200      	movs	r2, #0
 8005172:	4606      	mov	r6, r0
 8005174:	460f      	mov	r7, r1
 8005176:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800517a:	4620      	mov	r0, r4
 800517c:	4629      	mov	r1, r5
 800517e:	f7fb f88d 	bl	800029c <__adddf3>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4630      	mov	r0, r6
 8005188:	4639      	mov	r1, r7
 800518a:	f7fb fb67 	bl	800085c <__aeabi_ddiv>
 800518e:	f04f 0a00 	mov.w	sl, #0
 8005192:	4604      	mov	r4, r0
 8005194:	460d      	mov	r5, r1
 8005196:	4622      	mov	r2, r4
 8005198:	462b      	mov	r3, r5
 800519a:	4620      	mov	r0, r4
 800519c:	4629      	mov	r1, r5
 800519e:	f7fb fa33 	bl	8000608 <__aeabi_dmul>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4680      	mov	r8, r0
 80051a8:	4689      	mov	r9, r1
 80051aa:	f7fb fa2d 	bl	8000608 <__aeabi_dmul>
 80051ae:	a374      	add	r3, pc, #464	; (adr r3, 8005380 <atan+0x2b8>)
 80051b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b4:	4606      	mov	r6, r0
 80051b6:	460f      	mov	r7, r1
 80051b8:	f7fb fa26 	bl	8000608 <__aeabi_dmul>
 80051bc:	a372      	add	r3, pc, #456	; (adr r3, 8005388 <atan+0x2c0>)
 80051be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c2:	f7fb f86b 	bl	800029c <__adddf3>
 80051c6:	4632      	mov	r2, r6
 80051c8:	463b      	mov	r3, r7
 80051ca:	f7fb fa1d 	bl	8000608 <__aeabi_dmul>
 80051ce:	a370      	add	r3, pc, #448	; (adr r3, 8005390 <atan+0x2c8>)
 80051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d4:	f7fb f862 	bl	800029c <__adddf3>
 80051d8:	4632      	mov	r2, r6
 80051da:	463b      	mov	r3, r7
 80051dc:	f7fb fa14 	bl	8000608 <__aeabi_dmul>
 80051e0:	a36d      	add	r3, pc, #436	; (adr r3, 8005398 <atan+0x2d0>)
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	f7fb f859 	bl	800029c <__adddf3>
 80051ea:	4632      	mov	r2, r6
 80051ec:	463b      	mov	r3, r7
 80051ee:	f7fb fa0b 	bl	8000608 <__aeabi_dmul>
 80051f2:	a36b      	add	r3, pc, #428	; (adr r3, 80053a0 <atan+0x2d8>)
 80051f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f8:	f7fb f850 	bl	800029c <__adddf3>
 80051fc:	4632      	mov	r2, r6
 80051fe:	463b      	mov	r3, r7
 8005200:	f7fb fa02 	bl	8000608 <__aeabi_dmul>
 8005204:	a368      	add	r3, pc, #416	; (adr r3, 80053a8 <atan+0x2e0>)
 8005206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520a:	f7fb f847 	bl	800029c <__adddf3>
 800520e:	4642      	mov	r2, r8
 8005210:	464b      	mov	r3, r9
 8005212:	f7fb f9f9 	bl	8000608 <__aeabi_dmul>
 8005216:	a366      	add	r3, pc, #408	; (adr r3, 80053b0 <atan+0x2e8>)
 8005218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521c:	4680      	mov	r8, r0
 800521e:	4689      	mov	r9, r1
 8005220:	4630      	mov	r0, r6
 8005222:	4639      	mov	r1, r7
 8005224:	f7fb f9f0 	bl	8000608 <__aeabi_dmul>
 8005228:	a363      	add	r3, pc, #396	; (adr r3, 80053b8 <atan+0x2f0>)
 800522a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522e:	f7fb f833 	bl	8000298 <__aeabi_dsub>
 8005232:	4632      	mov	r2, r6
 8005234:	463b      	mov	r3, r7
 8005236:	f7fb f9e7 	bl	8000608 <__aeabi_dmul>
 800523a:	a361      	add	r3, pc, #388	; (adr r3, 80053c0 <atan+0x2f8>)
 800523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005240:	f7fb f82a 	bl	8000298 <__aeabi_dsub>
 8005244:	4632      	mov	r2, r6
 8005246:	463b      	mov	r3, r7
 8005248:	f7fb f9de 	bl	8000608 <__aeabi_dmul>
 800524c:	a35e      	add	r3, pc, #376	; (adr r3, 80053c8 <atan+0x300>)
 800524e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005252:	f7fb f821 	bl	8000298 <__aeabi_dsub>
 8005256:	4632      	mov	r2, r6
 8005258:	463b      	mov	r3, r7
 800525a:	f7fb f9d5 	bl	8000608 <__aeabi_dmul>
 800525e:	a35c      	add	r3, pc, #368	; (adr r3, 80053d0 <atan+0x308>)
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	f7fb f818 	bl	8000298 <__aeabi_dsub>
 8005268:	4632      	mov	r2, r6
 800526a:	463b      	mov	r3, r7
 800526c:	f7fb f9cc 	bl	8000608 <__aeabi_dmul>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4640      	mov	r0, r8
 8005276:	4649      	mov	r1, r9
 8005278:	f7fb f810 	bl	800029c <__adddf3>
 800527c:	4622      	mov	r2, r4
 800527e:	462b      	mov	r3, r5
 8005280:	f7fb f9c2 	bl	8000608 <__aeabi_dmul>
 8005284:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	d14b      	bne.n	8005326 <atan+0x25e>
 800528e:	4620      	mov	r0, r4
 8005290:	4629      	mov	r1, r5
 8005292:	f7fb f801 	bl	8000298 <__aeabi_dsub>
 8005296:	e72c      	b.n	80050f2 <atan+0x2a>
 8005298:	ee10 0a10 	vmov	r0, s0
 800529c:	4b53      	ldr	r3, [pc, #332]	; (80053ec <atan+0x324>)
 800529e:	2200      	movs	r2, #0
 80052a0:	4629      	mov	r1, r5
 80052a2:	f7fa fff9 	bl	8000298 <__aeabi_dsub>
 80052a6:	4b51      	ldr	r3, [pc, #324]	; (80053ec <atan+0x324>)
 80052a8:	4606      	mov	r6, r0
 80052aa:	460f      	mov	r7, r1
 80052ac:	2200      	movs	r2, #0
 80052ae:	4620      	mov	r0, r4
 80052b0:	4629      	mov	r1, r5
 80052b2:	f7fa fff3 	bl	800029c <__adddf3>
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	4630      	mov	r0, r6
 80052bc:	4639      	mov	r1, r7
 80052be:	f7fb facd 	bl	800085c <__aeabi_ddiv>
 80052c2:	f04f 0a01 	mov.w	sl, #1
 80052c6:	4604      	mov	r4, r0
 80052c8:	460d      	mov	r5, r1
 80052ca:	e764      	b.n	8005196 <atan+0xce>
 80052cc:	4b49      	ldr	r3, [pc, #292]	; (80053f4 <atan+0x32c>)
 80052ce:	429e      	cmp	r6, r3
 80052d0:	da1d      	bge.n	800530e <atan+0x246>
 80052d2:	ee10 0a10 	vmov	r0, s0
 80052d6:	4b48      	ldr	r3, [pc, #288]	; (80053f8 <atan+0x330>)
 80052d8:	2200      	movs	r2, #0
 80052da:	4629      	mov	r1, r5
 80052dc:	f7fa ffdc 	bl	8000298 <__aeabi_dsub>
 80052e0:	4b45      	ldr	r3, [pc, #276]	; (80053f8 <atan+0x330>)
 80052e2:	4606      	mov	r6, r0
 80052e4:	460f      	mov	r7, r1
 80052e6:	2200      	movs	r2, #0
 80052e8:	4620      	mov	r0, r4
 80052ea:	4629      	mov	r1, r5
 80052ec:	f7fb f98c 	bl	8000608 <__aeabi_dmul>
 80052f0:	4b3e      	ldr	r3, [pc, #248]	; (80053ec <atan+0x324>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	f7fa ffd2 	bl	800029c <__adddf3>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4630      	mov	r0, r6
 80052fe:	4639      	mov	r1, r7
 8005300:	f7fb faac 	bl	800085c <__aeabi_ddiv>
 8005304:	f04f 0a02 	mov.w	sl, #2
 8005308:	4604      	mov	r4, r0
 800530a:	460d      	mov	r5, r1
 800530c:	e743      	b.n	8005196 <atan+0xce>
 800530e:	462b      	mov	r3, r5
 8005310:	ee10 2a10 	vmov	r2, s0
 8005314:	4939      	ldr	r1, [pc, #228]	; (80053fc <atan+0x334>)
 8005316:	2000      	movs	r0, #0
 8005318:	f7fb faa0 	bl	800085c <__aeabi_ddiv>
 800531c:	f04f 0a03 	mov.w	sl, #3
 8005320:	4604      	mov	r4, r0
 8005322:	460d      	mov	r5, r1
 8005324:	e737      	b.n	8005196 <atan+0xce>
 8005326:	4b36      	ldr	r3, [pc, #216]	; (8005400 <atan+0x338>)
 8005328:	4e36      	ldr	r6, [pc, #216]	; (8005404 <atan+0x33c>)
 800532a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800532e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8005332:	e9da 2300 	ldrd	r2, r3, [sl]
 8005336:	f7fa ffaf 	bl	8000298 <__aeabi_dsub>
 800533a:	4622      	mov	r2, r4
 800533c:	462b      	mov	r3, r5
 800533e:	f7fa ffab 	bl	8000298 <__aeabi_dsub>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	e9d6 0100 	ldrd	r0, r1, [r6]
 800534a:	f7fa ffa5 	bl	8000298 <__aeabi_dsub>
 800534e:	f1bb 0f00 	cmp.w	fp, #0
 8005352:	4604      	mov	r4, r0
 8005354:	460d      	mov	r5, r1
 8005356:	f6bf aed6 	bge.w	8005106 <atan+0x3e>
 800535a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800535e:	461d      	mov	r5, r3
 8005360:	e6d1      	b.n	8005106 <atan+0x3e>
 8005362:	a51d      	add	r5, pc, #116	; (adr r5, 80053d8 <atan+0x310>)
 8005364:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005368:	e6cd      	b.n	8005106 <atan+0x3e>
 800536a:	bf00      	nop
 800536c:	f3af 8000 	nop.w
 8005370:	54442d18 	.word	0x54442d18
 8005374:	bff921fb 	.word	0xbff921fb
 8005378:	8800759c 	.word	0x8800759c
 800537c:	7e37e43c 	.word	0x7e37e43c
 8005380:	e322da11 	.word	0xe322da11
 8005384:	3f90ad3a 	.word	0x3f90ad3a
 8005388:	24760deb 	.word	0x24760deb
 800538c:	3fa97b4b 	.word	0x3fa97b4b
 8005390:	a0d03d51 	.word	0xa0d03d51
 8005394:	3fb10d66 	.word	0x3fb10d66
 8005398:	c54c206e 	.word	0xc54c206e
 800539c:	3fb745cd 	.word	0x3fb745cd
 80053a0:	920083ff 	.word	0x920083ff
 80053a4:	3fc24924 	.word	0x3fc24924
 80053a8:	5555550d 	.word	0x5555550d
 80053ac:	3fd55555 	.word	0x3fd55555
 80053b0:	2c6a6c2f 	.word	0x2c6a6c2f
 80053b4:	bfa2b444 	.word	0xbfa2b444
 80053b8:	52defd9a 	.word	0x52defd9a
 80053bc:	3fadde2d 	.word	0x3fadde2d
 80053c0:	af749a6d 	.word	0xaf749a6d
 80053c4:	3fb3b0f2 	.word	0x3fb3b0f2
 80053c8:	fe231671 	.word	0xfe231671
 80053cc:	3fbc71c6 	.word	0x3fbc71c6
 80053d0:	9998ebc4 	.word	0x9998ebc4
 80053d4:	3fc99999 	.word	0x3fc99999
 80053d8:	54442d18 	.word	0x54442d18
 80053dc:	3ff921fb 	.word	0x3ff921fb
 80053e0:	440fffff 	.word	0x440fffff
 80053e4:	7ff00000 	.word	0x7ff00000
 80053e8:	3fdbffff 	.word	0x3fdbffff
 80053ec:	3ff00000 	.word	0x3ff00000
 80053f0:	3ff2ffff 	.word	0x3ff2ffff
 80053f4:	40038000 	.word	0x40038000
 80053f8:	3ff80000 	.word	0x3ff80000
 80053fc:	bff00000 	.word	0xbff00000
 8005400:	080054e0 	.word	0x080054e0
 8005404:	080054c0 	.word	0x080054c0

08005408 <fabs>:
 8005408:	ec51 0b10 	vmov	r0, r1, d0
 800540c:	ee10 2a10 	vmov	r2, s0
 8005410:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005414:	ec43 2b10 	vmov	d0, r2, r3
 8005418:	4770      	bx	lr
	...

0800541c <_init>:
 800541c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541e:	bf00      	nop
 8005420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005422:	bc08      	pop	{r3}
 8005424:	469e      	mov	lr, r3
 8005426:	4770      	bx	lr

08005428 <_fini>:
 8005428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542a:	bf00      	nop
 800542c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800542e:	bc08      	pop	{r3}
 8005430:	469e      	mov	lr, r3
 8005432:	4770      	bx	lr
