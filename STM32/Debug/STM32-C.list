
STM32-C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f6c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800410c  0800410c  0001410c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004164  08004164  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004164  08004164  00014164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800416c  0800416c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800416c  0800416c  0001416c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004170  08004170  00014170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000070  080041e4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  080041e4  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133bd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e0  00000000  00000000  0003345d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00035a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e30  00000000  00000000  00036940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179e3  00000000  00000000  00037770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001326c  00000000  00000000  0004f153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090abd  00000000  00000000  000623bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2e7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b8  00000000  00000000  000f2ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080040f4 	.word	0x080040f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080040f4 	.word	0x080040f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <IMU_init>:
/// @brief Set the IMU address and full scale ranges.
/// @param addr Hex address based on AD0 pin - 0x68 low or 0x69 high.
/// @param aScale Set accelerometer full scale range: 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
/// @param gScale Set gyroscope full scale range: 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
void IMU_init(uint8_t addr, uint8_t aScale, uint8_t gScale)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
 8000592:	460b      	mov	r3, r1
 8000594:	71bb      	strb	r3, [r7, #6]
 8000596:	4613      	mov	r3, r2
 8000598:	717b      	strb	r3, [r7, #5]
	// Save values
	_addr = addr << 1;
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <IMU_init+0x34>)
 80005a2:	701a      	strb	r2, [r3, #0]
	_aScale = aScale;
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <IMU_init+0x38>)
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	7013      	strb	r3, [r2, #0]
	_gScale = gScale;
 80005aa:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <IMU_init+0x3c>)
 80005ac:	797b      	ldrb	r3, [r7, #5]
 80005ae:	7013      	strb	r3, [r2, #0]

	// Start up I2C
	MX_I2C1_Init();
 80005b0:	f000 f988 	bl	80008c4 <MX_I2C1_Init>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200000c0 	.word	0x200000c0
 80005c0:	20000098 	.word	0x20000098
 80005c4:	200000e8 	.word	0x200000e8

080005c8 <IMU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale.
void IMU_begin(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af02      	add	r7, sp, #8
	// Find who the IMU is
	buf[0] = WHO_AM_I;
 80005ce:	4b1f      	ldr	r3, [pc, #124]	; (800064c <IMU_begin+0x84>)
 80005d0:	2275      	movs	r2, #117	; 0x75
 80005d2:	701a      	strb	r2, [r3, #0]
    ret = HAL_I2C_Master_Transmit(&hi2c1, _addr, buf, 1, HAL_MAX_DELAY);
 80005d4:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <IMU_begin+0x88>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	b299      	uxth	r1, r3
 80005da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	2301      	movs	r3, #1
 80005e2:	4a1a      	ldr	r2, [pc, #104]	; (800064c <IMU_begin+0x84>)
 80005e4:	481b      	ldr	r0, [pc, #108]	; (8000654 <IMU_begin+0x8c>)
 80005e6:	f001 f8d3 	bl	8001790 <HAL_I2C_Master_Transmit>
 80005ea:	4603      	mov	r3, r0
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <IMU_begin+0x90>)
 80005f0:	701a      	strb	r2, [r3, #0]

    if ( ret == HAL_OK ) {
 80005f2:	4b19      	ldr	r3, [pc, #100]	; (8000658 <IMU_begin+0x90>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d124      	bne.n	8000644 <IMU_begin+0x7c>
    	ret = HAL_I2C_Master_Receive(&hi2c1, _addr, buf, 1, HAL_MAX_DELAY);
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <IMU_begin+0x88>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	b299      	uxth	r1, r3
 8000600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2301      	movs	r3, #1
 8000608:	4a10      	ldr	r2, [pc, #64]	; (800064c <IMU_begin+0x84>)
 800060a:	4812      	ldr	r0, [pc, #72]	; (8000654 <IMU_begin+0x8c>)
 800060c:	f001 f9be 	bl	800198c <HAL_I2C_Master_Receive>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <IMU_begin+0x90>)
 8000616:	701a      	strb	r2, [r3, #0]
    	if ( ret == HAL_OK ) {
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <IMU_begin+0x90>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d111      	bne.n	8000644 <IMU_begin+0x7c>
    	    if (buf[0] == WHO_AM_I_ANS)
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <IMU_begin+0x84>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b98      	cmp	r3, #152	; 0x98
 8000626:	d10d      	bne.n	8000644 <IMU_begin+0x7c>
    	    {
    	        write2bytes(PWR_MGMT_1, 0x00);
 8000628:	2100      	movs	r1, #0
 800062a:	206b      	movs	r0, #107	; 0x6b
 800062c:	f000 f8ac 	bl	8000788 <write2bytes>
    	        setAccFullScaleRange(_aScale);
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <IMU_begin+0x94>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	f000 f815 	bl	8000664 <setAccFullScaleRange>
    	        setGyroFullScaleRange(_gScale);
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <IMU_begin+0x98>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f858 	bl	80006f4 <setGyroFullScaleRange>
    	    }
    	}
    }
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200000d4 	.word	0x200000d4
 8000650:	200000c0 	.word	0x200000c0
 8000654:	20000104 	.word	0x20000104
 8000658:	200000e9 	.word	0x200000e9
 800065c:	20000098 	.word	0x20000098
 8000660:	200000e8 	.word	0x200000e8

08000664 <setAccFullScaleRange>:

/// @brief Set the accelerometer full scale range.
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
void setAccFullScaleRange(uint8_t aScale)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
    switch (aScale)
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b03      	cmp	r3, #3
 8000672:	d82f      	bhi.n	80006d4 <setAccFullScaleRange+0x70>
 8000674:	a201      	add	r2, pc, #4	; (adr r2, 800067c <setAccFullScaleRange+0x18>)
 8000676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067a:	bf00      	nop
 800067c:	0800068d 	.word	0x0800068d
 8000680:	0800069f 	.word	0x0800069f
 8000684:	080006b1 	.word	0x080006b1
 8000688:	080006c3 	.word	0x080006c3
    {
    case AFS_2G:
        aRes = 16384.0;
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <setAccFullScaleRange+0x8c>)
 800068e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8000692:	601a      	str	r2, [r3, #0]
        write2bytes(ACCEL_CONFIG, 0x00);
 8000694:	2100      	movs	r1, #0
 8000696:	201c      	movs	r0, #28
 8000698:	f000 f876 	bl	8000788 <write2bytes>
        break;
 800069c:	e023      	b.n	80006e6 <setAccFullScaleRange+0x82>
    case AFS_4G:
        aRes = 8192.0;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <setAccFullScaleRange+0x8c>)
 80006a0:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80006a4:	601a      	str	r2, [r3, #0]
        write2bytes(ACCEL_CONFIG, 0x08);
 80006a6:	2108      	movs	r1, #8
 80006a8:	201c      	movs	r0, #28
 80006aa:	f000 f86d 	bl	8000788 <write2bytes>
        break;
 80006ae:	e01a      	b.n	80006e6 <setAccFullScaleRange+0x82>
    case AFS_8G:
        aRes = 4096.0;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <setAccFullScaleRange+0x8c>)
 80006b2:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80006b6:	601a      	str	r2, [r3, #0]
        write2bytes(ACCEL_CONFIG, 0x10);
 80006b8:	2110      	movs	r1, #16
 80006ba:	201c      	movs	r0, #28
 80006bc:	f000 f864 	bl	8000788 <write2bytes>
        break;
 80006c0:	e011      	b.n	80006e6 <setAccFullScaleRange+0x82>
    case AFS_16G:
        aRes = 2048.0;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <setAccFullScaleRange+0x8c>)
 80006c4:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80006c8:	601a      	str	r2, [r3, #0]
        write2bytes(ACCEL_CONFIG, 0x18);
 80006ca:	2118      	movs	r1, #24
 80006cc:	201c      	movs	r0, #28
 80006ce:	f000 f85b 	bl	8000788 <write2bytes>
        break;
 80006d2:	e008      	b.n	80006e6 <setAccFullScaleRange+0x82>
    default:
        aRes = 8192.0;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <setAccFullScaleRange+0x8c>)
 80006d6:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80006da:	601a      	str	r2, [r3, #0]
        write2bytes(ACCEL_CONFIG, 0x08);
 80006dc:	2108      	movs	r1, #8
 80006de:	201c      	movs	r0, #28
 80006e0:	f000 f852 	bl	8000788 <write2bytes>
        break;
 80006e4:	bf00      	nop
    }
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000c4 	.word	0x200000c4

080006f4 <setGyroFullScaleRange>:

/// @brief Set the gyroscope full scale range.
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
void setGyroFullScaleRange(uint8_t gScale)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
    switch (gScale)
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d82b      	bhi.n	800075c <setGyroFullScaleRange+0x68>
 8000704:	a201      	add	r2, pc, #4	; (adr r2, 800070c <setGyroFullScaleRange+0x18>)
 8000706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070a:	bf00      	nop
 800070c:	0800071d 	.word	0x0800071d
 8000710:	0800072d 	.word	0x0800072d
 8000714:	0800073d 	.word	0x0800073d
 8000718:	0800074d 	.word	0x0800074d
    {
    case GFS_250DPS:
        gRes = 131.0;
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <setGyroFullScaleRange+0x80>)
 800071e:	4a16      	ldr	r2, [pc, #88]	; (8000778 <setGyroFullScaleRange+0x84>)
 8000720:	601a      	str	r2, [r3, #0]
        write2bytes(GYRO_CONFIG, 0x00);
 8000722:	2100      	movs	r1, #0
 8000724:	201b      	movs	r0, #27
 8000726:	f000 f82f 	bl	8000788 <write2bytes>
        break;
 800072a:	e01f      	b.n	800076c <setGyroFullScaleRange+0x78>
    case GFS_500DPS:
        gRes = 65.5;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <setGyroFullScaleRange+0x80>)
 800072e:	4a13      	ldr	r2, [pc, #76]	; (800077c <setGyroFullScaleRange+0x88>)
 8000730:	601a      	str	r2, [r3, #0]
        write2bytes(GYRO_CONFIG, 0x08);
 8000732:	2108      	movs	r1, #8
 8000734:	201b      	movs	r0, #27
 8000736:	f000 f827 	bl	8000788 <write2bytes>
        break;
 800073a:	e017      	b.n	800076c <setGyroFullScaleRange+0x78>
    case GFS_1000DPS:
        gRes = 32.8;
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <setGyroFullScaleRange+0x80>)
 800073e:	4a10      	ldr	r2, [pc, #64]	; (8000780 <setGyroFullScaleRange+0x8c>)
 8000740:	601a      	str	r2, [r3, #0]
        write2bytes(GYRO_CONFIG, 0x10);
 8000742:	2110      	movs	r1, #16
 8000744:	201b      	movs	r0, #27
 8000746:	f000 f81f 	bl	8000788 <write2bytes>
        break;
 800074a:	e00f      	b.n	800076c <setGyroFullScaleRange+0x78>
    case GFS_2000DPS:
        gRes = 16.4;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <setGyroFullScaleRange+0x80>)
 800074e:	4a0d      	ldr	r2, [pc, #52]	; (8000784 <setGyroFullScaleRange+0x90>)
 8000750:	601a      	str	r2, [r3, #0]
        write2bytes(GYRO_CONFIG, 0x18);
 8000752:	2118      	movs	r1, #24
 8000754:	201b      	movs	r0, #27
 8000756:	f000 f817 	bl	8000788 <write2bytes>
        break;
 800075a:	e007      	b.n	800076c <setGyroFullScaleRange+0x78>
    default:
        gRes = 65.5;
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <setGyroFullScaleRange+0x80>)
 800075e:	4a07      	ldr	r2, [pc, #28]	; (800077c <setGyroFullScaleRange+0x88>)
 8000760:	601a      	str	r2, [r3, #0]
        write2bytes(GYRO_CONFIG, 0x08);
 8000762:	2108      	movs	r1, #8
 8000764:	201b      	movs	r0, #27
 8000766:	f000 f80f 	bl	8000788 <write2bytes>
        break;
 800076a:	bf00      	nop
    }
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200000e4 	.word	0x200000e4
 8000778:	43030000 	.word	0x43030000
 800077c:	42830000 	.word	0x42830000
 8000780:	42033333 	.word	0x42033333
 8000784:	41833333 	.word	0x41833333

08000788 <write2bytes>:

/// @brief Write bytes to specific registers on the IMU.
/// @param byte0 The main register to be written.
/// @param byte1 The command to be written.
bool write2bytes(uint8_t byte0, uint8_t byte1)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af02      	add	r7, sp, #8
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]
	buf[0] = byte0;
 8000798:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <write2bytes+0x50>)
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	7013      	strb	r3, [r2, #0]
	buf[1] = byte1;
 800079e:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <write2bytes+0x50>)
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	7053      	strb	r3, [r2, #1]

    ret = HAL_I2C_Master_Transmit(&hi2c1, _addr, buf, 2, HAL_MAX_DELAY);
 80007a4:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <write2bytes+0x54>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b299      	uxth	r1, r3
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2302      	movs	r3, #2
 80007b2:	4a09      	ldr	r2, [pc, #36]	; (80007d8 <write2bytes+0x50>)
 80007b4:	480a      	ldr	r0, [pc, #40]	; (80007e0 <write2bytes+0x58>)
 80007b6:	f000 ffeb 	bl	8001790 <HAL_I2C_Master_Transmit>
 80007ba:	4603      	mov	r3, r0
 80007bc:	461a      	mov	r2, r3
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <write2bytes+0x5c>)
 80007c0:	701a      	strb	r2, [r3, #0]

    if ( ret != HAL_OK ) {
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <write2bytes+0x5c>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <write2bytes+0x46>
    	return false;
 80007ca:	2300      	movs	r3, #0
 80007cc:	e000      	b.n	80007d0 <write2bytes+0x48>
    } else {
    	return true;
 80007ce:	2301      	movs	r3, #1
    }
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200000d4 	.word	0x200000d4
 80007dc:	200000c0 	.word	0x200000c0
 80007e0:	20000104 	.word	0x20000104
 80007e4:	200000e9 	.word	0x200000e9

080007e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a2c      	ldr	r2, [pc, #176]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a25      	ldr	r2, [pc, #148]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_GPIO_Init+0xd0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <MX_GPIO_Init+0xd0>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2120      	movs	r1, #32
 8000872:	4812      	ldr	r0, [pc, #72]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000874:	f000 fe14 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800087e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	480c      	ldr	r0, [pc, #48]	; (80008c0 <MX_GPIO_Init+0xd8>)
 8000890:	f000 fc82 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000894:	2320      	movs	r3, #32
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_GPIO_Init+0xd4>)
 80008ac:	f000 fc74 	bl	8001198 <HAL_GPIO_Init>

}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	; 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020000 	.word	0x40020000
 80008c0:	40020800 	.word	0x40020800

080008c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_I2C1_Init+0x50>)
 80008ca:	4a13      	ldr	r2, [pc, #76]	; (8000918 <MX_I2C1_Init+0x54>)
 80008cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_I2C1_Init+0x50>)
 80008d0:	4a12      	ldr	r2, [pc, #72]	; (800091c <MX_I2C1_Init+0x58>)
 80008d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_I2C1_Init+0x50>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_I2C1_Init+0x50>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_I2C1_Init+0x50>)
 80008e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <MX_I2C1_Init+0x50>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_I2C1_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <MX_I2C1_Init+0x50>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_I2C1_Init+0x50>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_I2C1_Init+0x50>)
 8000902:	f000 fe01 	bl	8001508 <HAL_I2C_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800090c:	f000 f90a 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000104 	.word	0x20000104
 8000918:	40005400 	.word	0x40005400
 800091c:	000186a0 	.word	0x000186a0

08000920 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a19      	ldr	r2, [pc, #100]	; (80009a4 <HAL_I2C_MspInit+0x84>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d12b      	bne.n	800099a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <HAL_I2C_MspInit+0x88>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <HAL_I2C_MspInit+0x88>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <HAL_I2C_MspInit+0x88>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800095e:	23c0      	movs	r3, #192	; 0xc0
 8000960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000962:	2312      	movs	r3, #18
 8000964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096a:	2303      	movs	r3, #3
 800096c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800096e:	2304      	movs	r3, #4
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	480c      	ldr	r0, [pc, #48]	; (80009ac <HAL_I2C_MspInit+0x8c>)
 800097a:	f000 fc0d 	bl	8001198 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_I2C_MspInit+0x88>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <HAL_I2C_MspInit+0x88>)
 8000988:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_I2C_MspInit+0x88>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800099a:	bf00      	nop
 800099c:	3728      	adds	r7, #40	; 0x28
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40005400 	.word	0x40005400
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020400 	.word	0x40020400

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b6:	f000 fa47 	bl	8000e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ba:	f000 f833 	bl	8000a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009be:	f7ff ff13 	bl	80007e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009c2:	f000 f9a5 	bl	8000d10 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80009c6:	f7ff ff7d 	bl	80008c4 <MX_I2C1_Init>
  MX_TIM11_Init();
 80009ca:	f000 f955 	bl	8000c78 <MX_TIM11_Init>
  HAL_TIM_Base_Start_IT(&htim11);
 80009ce:	4811      	ldr	r0, [pc, #68]	; (8000a14 <main+0x64>)
 80009d0:	f002 f9f4 	bl	8002dbc <HAL_TIM_Base_Start_IT>


  /* USER CODE BEGIN 2 */
  IMU_init(AD0_LOW, AFS_4G, GFS_500DPS);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2101      	movs	r1, #1
 80009d8:	2068      	movs	r0, #104	; 0x68
 80009da:	f7ff fdd5 	bl	8000588 <IMU_init>
  IMU_begin();
 80009de:	f7ff fdf3 	bl	80005c8 <IMU_begin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	        sprintf((char*)serialBuf, "%d,%d,%d\r\n", 0, 1, 0);
 80009e2:	2300      	movs	r3, #0
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	2301      	movs	r3, #1
 80009e8:	2200      	movs	r2, #0
 80009ea:	490b      	ldr	r1, [pc, #44]	; (8000a18 <main+0x68>)
 80009ec:	480b      	ldr	r0, [pc, #44]	; (8000a1c <main+0x6c>)
 80009ee:	f002 ff53 	bl	8003898 <siprintf>
	        HAL_UART_Transmit(&huart2, serialBuf, strlen((char*)serialBuf), HAL_MAX_DELAY);
 80009f2:	480a      	ldr	r0, [pc, #40]	; (8000a1c <main+0x6c>)
 80009f4:	f7ff fbf4 	bl	80001e0 <strlen>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a00:	4906      	ldr	r1, [pc, #24]	; (8000a1c <main+0x6c>)
 8000a02:	4807      	ldr	r0, [pc, #28]	; (8000a20 <main+0x70>)
 8000a04:	f002 fc4d 	bl	80032a2 <HAL_UART_Transmit>

	  HAL_Delay(500);
 8000a08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a0c:	f000 fa8e 	bl	8000f2c <HAL_Delay>
	        sprintf((char*)serialBuf, "%d,%d,%d\r\n", 0, 1, 0);
 8000a10:	e7e7      	b.n	80009e2 <main+0x32>
 8000a12:	bf00      	nop
 8000a14:	20000174 	.word	0x20000174
 8000a18:	0800410c 	.word	0x0800410c
 8000a1c:	20000158 	.word	0x20000158
 8000a20:	200001bc 	.word	0x200001bc

08000a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b094      	sub	sp, #80	; 0x50
 8000a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2a:	f107 0320 	add.w	r3, r7, #32
 8000a2e:	2230      	movs	r2, #48	; 0x30
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f002 ff28 	bl	8003888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <SystemClock_Config+0xd0>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	4a28      	ldr	r2, [pc, #160]	; (8000af4 <SystemClock_Config+0xd0>)
 8000a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a56:	6413      	str	r3, [r2, #64]	; 0x40
 8000a58:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <SystemClock_Config+0xd0>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <SystemClock_Config+0xd4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a70:	4a21      	ldr	r2, [pc, #132]	; (8000af8 <SystemClock_Config+0xd4>)
 8000a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a76:	6013      	str	r3, [r2, #0]
 8000a78:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <SystemClock_Config+0xd4>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a84:	2302      	movs	r3, #2
 8000a86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a8c:	2310      	movs	r3, #16
 8000a8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a90:	2302      	movs	r3, #2
 8000a92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a94:	2300      	movs	r3, #0
 8000a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a98:	2310      	movs	r3, #16
 8000a9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a9c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000aa0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aa6:	2307      	movs	r3, #7
 8000aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aaa:	f107 0320 	add.w	r3, r7, #32
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f001 fcc0 	bl	8002434 <HAL_RCC_OscConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000aba:	f000 f833 	bl	8000b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abe:	230f      	movs	r3, #15
 8000ac0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ace:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	2102      	movs	r1, #2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 ff22 	bl	8002924 <HAL_RCC_ClockConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ae6:	f000 f81d 	bl	8000b24 <Error_Handler>
  }
}
 8000aea:	bf00      	nop
 8000aec:	3750      	adds	r7, #80	; 0x50
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40007000 	.word	0x40007000

08000afc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim11 )
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d103      	bne.n	8000b14 <HAL_TIM_PeriodElapsedCallback+0x18>
  {

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b0c:	2120      	movs	r1, #32
 8000b0e:	4804      	ldr	r0, [pc, #16]	; (8000b20 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b10:	f000 fcdf 	bl	80014d2 <HAL_GPIO_TogglePin>
//      sprintf((char*)serialBuf, "%d,%d,%d\r\n", R, P, Y);
//      HAL_UART_Transmit(&huart2, serialBuf, strlen((char*)serialBuf), HAL_MAX_DELAY);

//    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  }
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000174 	.word	0x20000174
 8000b20:	40020000 	.word	0x40020000

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <Error_Handler+0x8>
	...

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	4a0f      	ldr	r2, [pc, #60]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b44:	6453      	str	r3, [r2, #68]	; 0x44
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b6e:	2007      	movs	r0, #7
 8000b70:	f000 fad0 	bl	8001114 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <NMI_Handler+0x4>

08000b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <HardFault_Handler+0x4>

08000b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <MemManage_Handler+0x4>

08000b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <UsageFault_Handler+0x4>

08000b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bcc:	f000 f98e 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000bda:	f002 f951 	bl	8002e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000174 	.word	0x20000174

08000be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf0:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <_sbrk+0x5c>)
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <_sbrk+0x60>)
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <_sbrk+0x64>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <_sbrk+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d207      	bcs.n	8000c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c18:	f002 fe0c 	bl	8003834 <__errno>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	220c      	movs	r2, #12
 8000c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c26:	e009      	b.n	8000c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <_sbrk+0x64>)
 8000c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20018000 	.word	0x20018000
 8000c48:	00000400 	.word	0x00000400
 8000c4c:	2000008c 	.word	0x2000008c
 8000c50:	20000218 	.word	0x20000218

08000c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <SystemInit+0x20>)
 8000c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5e:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <SystemInit+0x20>)
 8000c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_TIM11_Init+0x40>)
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <MX_TIM11_Init+0x44>)
 8000c80:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8400-1;
 8000c82:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <MX_TIM11_Init+0x40>)
 8000c84:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000c88:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_TIM11_Init+0x40>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 5000-1;						// Was 40 for 250 Hz sampling rate
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_TIM11_Init+0x40>)
 8000c92:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c96:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <MX_TIM11_Init+0x40>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_TIM11_Init+0x40>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000ca4:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <MX_TIM11_Init+0x40>)
 8000ca6:	f002 f839 	bl	8002d1c <HAL_TIM_Base_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8000cb0:	f7ff ff38 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000174 	.word	0x20000174
 8000cbc:	40014800 	.word	0x40014800

08000cc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <HAL_TIM_Base_MspInit+0x48>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d115      	bne.n	8000cfe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <HAL_TIM_Base_MspInit+0x4c>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	4a0c      	ldr	r2, [pc, #48]	; (8000d0c <HAL_TIM_Base_MspInit+0x4c>)
 8000cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_TIM_Base_MspInit+0x4c>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	201a      	movs	r0, #26
 8000cf4:	f000 fa19 	bl	800112a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000cf8:	201a      	movs	r0, #26
 8000cfa:	f000 fa32 	bl	8001162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40014800 	.word	0x40014800
 8000d0c:	40023800 	.word	0x40023800

08000d10 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <MX_USART2_UART_Init+0x50>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d48:	f002 fa5e 	bl	8003208 <HAL_UART_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d52:	f7ff fee7 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200001bc 	.word	0x200001bc
 8000d60:	40004400 	.word	0x40004400

08000d64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <HAL_UART_MspInit+0x84>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d12b      	bne.n	8000dde <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <HAL_UART_MspInit+0x88>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a17      	ldr	r2, [pc, #92]	; (8000dec <HAL_UART_MspInit+0x88>)
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_UART_MspInit+0x88>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <HAL_UART_MspInit+0x88>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a10      	ldr	r2, [pc, #64]	; (8000dec <HAL_UART_MspInit+0x88>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_UART_MspInit+0x88>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dbe:	230c      	movs	r3, #12
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dce:	2307      	movs	r3, #7
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	; (8000df0 <HAL_UART_MspInit+0x8c>)
 8000dda:	f000 f9dd 	bl	8001198 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	; 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40004400 	.word	0x40004400
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000

08000df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dfa:	490e      	ldr	r1, [pc, #56]	; (8000e34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dfc:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e10:	4c0b      	ldr	r4, [pc, #44]	; (8000e40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e1e:	f7ff ff19 	bl	8000c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e22:	f002 fd0d 	bl	8003840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e26:	f7ff fdc3 	bl	80009b0 <main>
  bx  lr    
 8000e2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e38:	08004174 	.word	0x08004174
  ldr r2, =_sbss
 8000e3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e40:	20000214 	.word	0x20000214

08000e44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC_IRQHandler>
	...

08000e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <HAL_Init+0x40>)
 8000e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_Init+0x40>)
 8000e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_Init+0x40>)
 8000e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 f94f 	bl	8001114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e76:	2000      	movs	r0, #0
 8000e78:	f000 f808 	bl	8000e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7c:	f7ff fe58 	bl	8000b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023c00 	.word	0x40023c00

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x54>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x58>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f967 	bl	800117e <HAL_SYSTICK_Config>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00e      	b.n	8000ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d80a      	bhi.n	8000ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec8:	f000 f92f 	bl	800112a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <HAL_InitTick+0x5c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e000      	b.n	8000ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000004 	.word	0x20000004

08000eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000200 	.word	0x20000200

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000200 	.word	0x20000200

08000f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff ffee 	bl	8000f14 <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f44:	d005      	beq.n	8000f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_Delay+0x44>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f52:	bf00      	nop
 8000f54:	f7ff ffde 	bl	8000f14 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8f7      	bhi.n	8000f54 <HAL_Delay+0x28>
  {
  }
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4907      	ldr	r1, [pc, #28]	; (8001010 <__NVIC_EnableIRQ+0x38>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000e100 	.word	0xe000e100

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	; (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	; (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	; 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e0:	d301      	bcc.n	80010e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00f      	b.n	8001106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <SysTick_Config+0x40>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ee:	210f      	movs	r1, #15
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010f4:	f7ff ff8e 	bl	8001014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <SysTick_Config+0x40>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <SysTick_Config+0x40>)
 8001100:	2207      	movs	r2, #7
 8001102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	e000e010 	.word	0xe000e010

08001114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff29 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800113c:	f7ff ff3e 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 8001140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	6978      	ldr	r0, [r7, #20]
 8001148:	f7ff ff8e 	bl	8001068 <NVIC_EncodePriority>
 800114c:	4602      	mov	r2, r0
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff5d 	bl	8001014 <__NVIC_SetPriority>
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff31 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffa2 	bl	80010d0 <SysTick_Config>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
 80011b2:	e159      	b.n	8001468 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b4:	2201      	movs	r2, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	f040 8148 	bne.w	8001462 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d005      	beq.n	80011ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d130      	bne.n	800124c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	68da      	ldr	r2, [r3, #12]
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001220:	2201      	movs	r2, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	091b      	lsrs	r3, r3, #4
 8001236:	f003 0201 	and.w	r2, r3, #1
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	2b03      	cmp	r3, #3
 8001256:	d017      	beq.n	8001288 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d123      	bne.n	80012dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	08da      	lsrs	r2, r3, #3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3208      	adds	r2, #8
 800129c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	220f      	movs	r2, #15
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	691a      	ldr	r2, [r3, #16]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	08da      	lsrs	r2, r3, #3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3208      	adds	r2, #8
 80012d6:	69b9      	ldr	r1, [r7, #24]
 80012d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	2203      	movs	r2, #3
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0203 	and.w	r2, r3, #3
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 80a2 	beq.w	8001462 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b57      	ldr	r3, [pc, #348]	; (8001480 <HAL_GPIO_Init+0x2e8>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	4a56      	ldr	r2, [pc, #344]	; (8001480 <HAL_GPIO_Init+0x2e8>)
 8001328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800132c:	6453      	str	r3, [r2, #68]	; 0x44
 800132e:	4b54      	ldr	r3, [pc, #336]	; (8001480 <HAL_GPIO_Init+0x2e8>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800133a:	4a52      	ldr	r2, [pc, #328]	; (8001484 <HAL_GPIO_Init+0x2ec>)
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	3302      	adds	r3, #2
 8001342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	220f      	movs	r2, #15
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a49      	ldr	r2, [pc, #292]	; (8001488 <HAL_GPIO_Init+0x2f0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d019      	beq.n	800139a <HAL_GPIO_Init+0x202>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a48      	ldr	r2, [pc, #288]	; (800148c <HAL_GPIO_Init+0x2f4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d013      	beq.n	8001396 <HAL_GPIO_Init+0x1fe>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a47      	ldr	r2, [pc, #284]	; (8001490 <HAL_GPIO_Init+0x2f8>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d00d      	beq.n	8001392 <HAL_GPIO_Init+0x1fa>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a46      	ldr	r2, [pc, #280]	; (8001494 <HAL_GPIO_Init+0x2fc>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d007      	beq.n	800138e <HAL_GPIO_Init+0x1f6>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a45      	ldr	r2, [pc, #276]	; (8001498 <HAL_GPIO_Init+0x300>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d101      	bne.n	800138a <HAL_GPIO_Init+0x1f2>
 8001386:	2304      	movs	r3, #4
 8001388:	e008      	b.n	800139c <HAL_GPIO_Init+0x204>
 800138a:	2307      	movs	r3, #7
 800138c:	e006      	b.n	800139c <HAL_GPIO_Init+0x204>
 800138e:	2303      	movs	r3, #3
 8001390:	e004      	b.n	800139c <HAL_GPIO_Init+0x204>
 8001392:	2302      	movs	r3, #2
 8001394:	e002      	b.n	800139c <HAL_GPIO_Init+0x204>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <HAL_GPIO_Init+0x204>
 800139a:	2300      	movs	r3, #0
 800139c:	69fa      	ldr	r2, [r7, #28]
 800139e:	f002 0203 	and.w	r2, r2, #3
 80013a2:	0092      	lsls	r2, r2, #2
 80013a4:	4093      	lsls	r3, r2
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ac:	4935      	ldr	r1, [pc, #212]	; (8001484 <HAL_GPIO_Init+0x2ec>)
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	089b      	lsrs	r3, r3, #2
 80013b2:	3302      	adds	r3, #2
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ba:	4b38      	ldr	r3, [pc, #224]	; (800149c <HAL_GPIO_Init+0x304>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013de:	4a2f      	ldr	r2, [pc, #188]	; (800149c <HAL_GPIO_Init+0x304>)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013e4:	4b2d      	ldr	r3, [pc, #180]	; (800149c <HAL_GPIO_Init+0x304>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001408:	4a24      	ldr	r2, [pc, #144]	; (800149c <HAL_GPIO_Init+0x304>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140e:	4b23      	ldr	r3, [pc, #140]	; (800149c <HAL_GPIO_Init+0x304>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001432:	4a1a      	ldr	r2, [pc, #104]	; (800149c <HAL_GPIO_Init+0x304>)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001438:	4b18      	ldr	r3, [pc, #96]	; (800149c <HAL_GPIO_Init+0x304>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800145c:	4a0f      	ldr	r2, [pc, #60]	; (800149c <HAL_GPIO_Init+0x304>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3301      	adds	r3, #1
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	2b0f      	cmp	r3, #15
 800146c:	f67f aea2 	bls.w	80011b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800
 8001484:	40013800 	.word	0x40013800
 8001488:	40020000 	.word	0x40020000
 800148c:	40020400 	.word	0x40020400
 8001490:	40020800 	.word	0x40020800
 8001494:	40020c00 	.word	0x40020c00
 8001498:	40021000 	.word	0x40021000
 800149c:	40013c00 	.word	0x40013c00

080014a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	807b      	strh	r3, [r7, #2]
 80014ac:	4613      	mov	r3, r2
 80014ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b0:	787b      	ldrb	r3, [r7, #1]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014b6:	887a      	ldrh	r2, [r7, #2]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014bc:	e003      	b.n	80014c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014be:	887b      	ldrh	r3, [r7, #2]
 80014c0:	041a      	lsls	r2, r3, #16
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	619a      	str	r2, [r3, #24]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b085      	sub	sp, #20
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	460b      	mov	r3, r1
 80014dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014e4:	887a      	ldrh	r2, [r7, #2]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4013      	ands	r3, r2
 80014ea:	041a      	lsls	r2, r3, #16
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	43d9      	mvns	r1, r3
 80014f0:	887b      	ldrh	r3, [r7, #2]
 80014f2:	400b      	ands	r3, r1
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	619a      	str	r2, [r3, #24]
}
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e12b      	b.n	8001772 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d106      	bne.n	8001534 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff f9f6 	bl	8000920 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2224      	movs	r2, #36	; 0x24
 8001538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0201 	bic.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800155a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800156a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800156c:	f001 fbae 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8001570:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	4a81      	ldr	r2, [pc, #516]	; (800177c <HAL_I2C_Init+0x274>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d807      	bhi.n	800158c <HAL_I2C_Init+0x84>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4a80      	ldr	r2, [pc, #512]	; (8001780 <HAL_I2C_Init+0x278>)
 8001580:	4293      	cmp	r3, r2
 8001582:	bf94      	ite	ls
 8001584:	2301      	movls	r3, #1
 8001586:	2300      	movhi	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	e006      	b.n	800159a <HAL_I2C_Init+0x92>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4a7d      	ldr	r2, [pc, #500]	; (8001784 <HAL_I2C_Init+0x27c>)
 8001590:	4293      	cmp	r3, r2
 8001592:	bf94      	ite	ls
 8001594:	2301      	movls	r3, #1
 8001596:	2300      	movhi	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e0e7      	b.n	8001772 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4a78      	ldr	r2, [pc, #480]	; (8001788 <HAL_I2C_Init+0x280>)
 80015a6:	fba2 2303 	umull	r2, r3, r2, r3
 80015aa:	0c9b      	lsrs	r3, r3, #18
 80015ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	430a      	orrs	r2, r1
 80015c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	4a6a      	ldr	r2, [pc, #424]	; (800177c <HAL_I2C_Init+0x274>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d802      	bhi.n	80015dc <HAL_I2C_Init+0xd4>
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	3301      	adds	r3, #1
 80015da:	e009      	b.n	80015f0 <HAL_I2C_Init+0xe8>
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015e2:	fb02 f303 	mul.w	r3, r2, r3
 80015e6:	4a69      	ldr	r2, [pc, #420]	; (800178c <HAL_I2C_Init+0x284>)
 80015e8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ec:	099b      	lsrs	r3, r3, #6
 80015ee:	3301      	adds	r3, #1
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	430b      	orrs	r3, r1
 80015f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001602:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	495c      	ldr	r1, [pc, #368]	; (800177c <HAL_I2C_Init+0x274>)
 800160c:	428b      	cmp	r3, r1
 800160e:	d819      	bhi.n	8001644 <HAL_I2C_Init+0x13c>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	1e59      	subs	r1, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fbb1 f3f3 	udiv	r3, r1, r3
 800161e:	1c59      	adds	r1, r3, #1
 8001620:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001624:	400b      	ands	r3, r1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00a      	beq.n	8001640 <HAL_I2C_Init+0x138>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1e59      	subs	r1, r3, #1
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	fbb1 f3f3 	udiv	r3, r1, r3
 8001638:	3301      	adds	r3, #1
 800163a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800163e:	e051      	b.n	80016e4 <HAL_I2C_Init+0x1dc>
 8001640:	2304      	movs	r3, #4
 8001642:	e04f      	b.n	80016e4 <HAL_I2C_Init+0x1dc>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d111      	bne.n	8001670 <HAL_I2C_Init+0x168>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	1e58      	subs	r0, r3, #1
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6859      	ldr	r1, [r3, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	440b      	add	r3, r1
 800165a:	fbb0 f3f3 	udiv	r3, r0, r3
 800165e:	3301      	adds	r3, #1
 8001660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001664:	2b00      	cmp	r3, #0
 8001666:	bf0c      	ite	eq
 8001668:	2301      	moveq	r3, #1
 800166a:	2300      	movne	r3, #0
 800166c:	b2db      	uxtb	r3, r3
 800166e:	e012      	b.n	8001696 <HAL_I2C_Init+0x18e>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	1e58      	subs	r0, r3, #1
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6859      	ldr	r1, [r3, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	0099      	lsls	r1, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	fbb0 f3f3 	udiv	r3, r0, r3
 8001686:	3301      	adds	r3, #1
 8001688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800168c:	2b00      	cmp	r3, #0
 800168e:	bf0c      	ite	eq
 8001690:	2301      	moveq	r3, #1
 8001692:	2300      	movne	r3, #0
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_I2C_Init+0x196>
 800169a:	2301      	movs	r3, #1
 800169c:	e022      	b.n	80016e4 <HAL_I2C_Init+0x1dc>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10e      	bne.n	80016c4 <HAL_I2C_Init+0x1bc>
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1e58      	subs	r0, r3, #1
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6859      	ldr	r1, [r3, #4]
 80016ae:	460b      	mov	r3, r1
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	440b      	add	r3, r1
 80016b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b8:	3301      	adds	r3, #1
 80016ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016c2:	e00f      	b.n	80016e4 <HAL_I2C_Init+0x1dc>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	1e58      	subs	r0, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	0099      	lsls	r1, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016da:	3301      	adds	r3, #1
 80016dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	6809      	ldr	r1, [r1, #0]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69da      	ldr	r2, [r3, #28]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001712:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6911      	ldr	r1, [r2, #16]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68d2      	ldr	r2, [r2, #12]
 800171e:	4311      	orrs	r1, r2
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	430b      	orrs	r3, r1
 8001726:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	695a      	ldr	r2, [r3, #20]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 0201 	orr.w	r2, r2, #1
 8001752:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2220      	movs	r2, #32
 800175e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	000186a0 	.word	0x000186a0
 8001780:	001e847f 	.word	0x001e847f
 8001784:	003d08ff 	.word	0x003d08ff
 8001788:	431bde83 	.word	0x431bde83
 800178c:	10624dd3 	.word	0x10624dd3

08001790 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af02      	add	r7, sp, #8
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	607a      	str	r2, [r7, #4]
 800179a:	461a      	mov	r2, r3
 800179c:	460b      	mov	r3, r1
 800179e:	817b      	strh	r3, [r7, #10]
 80017a0:	4613      	mov	r3, r2
 80017a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017a4:	f7ff fbb6 	bl	8000f14 <HAL_GetTick>
 80017a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b20      	cmp	r3, #32
 80017b4:	f040 80e0 	bne.w	8001978 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	2319      	movs	r3, #25
 80017be:	2201      	movs	r2, #1
 80017c0:	4970      	ldr	r1, [pc, #448]	; (8001984 <HAL_I2C_Master_Transmit+0x1f4>)
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 fc58 	bl	8002078 <I2C_WaitOnFlagUntilTimeout>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80017ce:	2302      	movs	r3, #2
 80017d0:	e0d3      	b.n	800197a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <HAL_I2C_Master_Transmit+0x50>
 80017dc:	2302      	movs	r3, #2
 80017de:	e0cc      	b.n	800197a <HAL_I2C_Master_Transmit+0x1ea>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d007      	beq.n	8001806 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f042 0201 	orr.w	r2, r2, #1
 8001804:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001814:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2221      	movs	r2, #33	; 0x21
 800181a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2210      	movs	r2, #16
 8001822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	893a      	ldrh	r2, [r7, #8]
 8001836:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183c:	b29a      	uxth	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4a50      	ldr	r2, [pc, #320]	; (8001988 <HAL_I2C_Master_Transmit+0x1f8>)
 8001846:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001848:	8979      	ldrh	r1, [r7, #10]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	6a3a      	ldr	r2, [r7, #32]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 fac2 	bl	8001dd8 <I2C_MasterRequestWrite>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e08d      	b.n	800197a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001874:	e066      	b.n	8001944 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	6a39      	ldr	r1, [r7, #32]
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f000 fcd2 	bl	8002224 <I2C_WaitOnTXEFlagUntilTimeout>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00d      	beq.n	80018a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	2b04      	cmp	r3, #4
 800188c:	d107      	bne.n	800189e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800189c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e06b      	b.n	800197a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	781a      	ldrb	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	1c5a      	adds	r2, r3, #1
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018bc:	b29b      	uxth	r3, r3
 80018be:	3b01      	subs	r3, #1
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ca:	3b01      	subs	r3, #1
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d11b      	bne.n	8001918 <HAL_I2C_Master_Transmit+0x188>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d017      	beq.n	8001918 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ec:	781a      	ldrb	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001902:	b29b      	uxth	r3, r3
 8001904:	3b01      	subs	r3, #1
 8001906:	b29a      	uxth	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001910:	3b01      	subs	r3, #1
 8001912:	b29a      	uxth	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	6a39      	ldr	r1, [r7, #32]
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f000 fcc2 	bl	80022a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00d      	beq.n	8001944 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	2b04      	cmp	r3, #4
 800192e:	d107      	bne.n	8001940 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800193e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e01a      	b.n	800197a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001948:	2b00      	cmp	r3, #0
 800194a:	d194      	bne.n	8001876 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800195a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2220      	movs	r2, #32
 8001960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	e000      	b.n	800197a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001978:	2302      	movs	r3, #2
  }
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	00100002 	.word	0x00100002
 8001988:	ffff0000 	.word	0xffff0000

0800198c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	; 0x30
 8001990:	af02      	add	r7, sp, #8
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	461a      	mov	r2, r3
 8001998:	460b      	mov	r3, r1
 800199a:	817b      	strh	r3, [r7, #10]
 800199c:	4613      	mov	r3, r2
 800199e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019a0:	f7ff fab8 	bl	8000f14 <HAL_GetTick>
 80019a4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b20      	cmp	r3, #32
 80019b0:	f040 820b 	bne.w	8001dca <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2319      	movs	r3, #25
 80019ba:	2201      	movs	r2, #1
 80019bc:	497c      	ldr	r1, [pc, #496]	; (8001bb0 <HAL_I2C_Master_Receive+0x224>)
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 fb5a 	bl	8002078 <I2C_WaitOnFlagUntilTimeout>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80019ca:	2302      	movs	r3, #2
 80019cc:	e1fe      	b.n	8001dcc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_I2C_Master_Receive+0x50>
 80019d8:	2302      	movs	r3, #2
 80019da:	e1f7      	b.n	8001dcc <HAL_I2C_Master_Receive+0x440>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d007      	beq.n	8001a02 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 0201 	orr.w	r2, r2, #1
 8001a00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2222      	movs	r2, #34	; 0x22
 8001a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2210      	movs	r2, #16
 8001a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	893a      	ldrh	r2, [r7, #8]
 8001a32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4a5c      	ldr	r2, [pc, #368]	; (8001bb4 <HAL_I2C_Master_Receive+0x228>)
 8001a42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a44:	8979      	ldrh	r1, [r7, #10]
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 fa46 	bl	8001edc <I2C_MasterRequestRead>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e1b8      	b.n	8001dcc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d113      	bne.n	8001a8a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	623b      	str	r3, [r7, #32]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	623b      	str	r3, [r7, #32]
 8001a76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	e18c      	b.n	8001da4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d11b      	bne.n	8001aca <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aa0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	61fb      	str	r3, [r7, #28]
 8001ab6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e16c      	b.n	8001da4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d11b      	bne.n	8001b0a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ae0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001af0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	61bb      	str	r3, [r7, #24]
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	e14c      	b.n	8001da4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b30:	e138      	b.n	8001da4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	f200 80f1 	bhi.w	8001d1e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d123      	bne.n	8001b8c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 fbed 	bl	8002328 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e139      	b.n	8001dcc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691a      	ldr	r2, [r3, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b8a:	e10b      	b.n	8001da4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d14e      	bne.n	8001c32 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	4906      	ldr	r1, [pc, #24]	; (8001bb8 <HAL_I2C_Master_Receive+0x22c>)
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 fa6a 	bl	8002078 <I2C_WaitOnFlagUntilTimeout>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d008      	beq.n	8001bbc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e10e      	b.n	8001dcc <HAL_I2C_Master_Receive+0x440>
 8001bae:	bf00      	nop
 8001bb0:	00100002 	.word	0x00100002
 8001bb4:	ffff0000 	.word	0xffff0000
 8001bb8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691a      	ldr	r2, [r3, #16]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c30:	e0b8      	b.n	8001da4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c38:	2200      	movs	r2, #0
 8001c3a:	4966      	ldr	r1, [pc, #408]	; (8001dd4 <HAL_I2C_Master_Receive+0x448>)
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 fa1b 	bl	8002078 <I2C_WaitOnFlagUntilTimeout>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0bf      	b.n	8001dcc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691a      	ldr	r2, [r3, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c94:	2200      	movs	r2, #0
 8001c96:	494f      	ldr	r1, [pc, #316]	; (8001dd4 <HAL_I2C_Master_Receive+0x448>)
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f000 f9ed 	bl	8002078 <I2C_WaitOnFlagUntilTimeout>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e091      	b.n	8001dcc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	691a      	ldr	r2, [r3, #16]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d1c:	e042      	b.n	8001da4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 fb00 	bl	8002328 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e04c      	b.n	8001dcc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d118      	bne.n	8001da4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f47f aec2 	bne.w	8001b32 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2220      	movs	r2, #32
 8001db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e000      	b.n	8001dcc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001dca:	2302      	movs	r3, #2
  }
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3728      	adds	r7, #40	; 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	00010004 	.word	0x00010004

08001dd8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	460b      	mov	r3, r1
 8001de6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d006      	beq.n	8001e02 <I2C_MasterRequestWrite+0x2a>
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d003      	beq.n	8001e02 <I2C_MasterRequestWrite+0x2a>
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e00:	d108      	bne.n	8001e14 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	e00b      	b.n	8001e2c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	2b12      	cmp	r3, #18
 8001e1a:	d107      	bne.n	8001e2c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 f91d 	bl	8002078 <I2C_WaitOnFlagUntilTimeout>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00d      	beq.n	8001e60 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e52:	d103      	bne.n	8001e5c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e035      	b.n	8001ecc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e68:	d108      	bne.n	8001e7c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e6a:	897b      	ldrh	r3, [r7, #10]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e78:	611a      	str	r2, [r3, #16]
 8001e7a:	e01b      	b.n	8001eb4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e7c:	897b      	ldrh	r3, [r7, #10]
 8001e7e:	11db      	asrs	r3, r3, #7
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	f003 0306 	and.w	r3, r3, #6
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	f063 030f 	orn	r3, r3, #15
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	490e      	ldr	r1, [pc, #56]	; (8001ed4 <I2C_MasterRequestWrite+0xfc>)
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 f943 	bl	8002126 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e010      	b.n	8001ecc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001eaa:	897b      	ldrh	r3, [r7, #10]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	4907      	ldr	r1, [pc, #28]	; (8001ed8 <I2C_MasterRequestWrite+0x100>)
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 f933 	bl	8002126 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	00010008 	.word	0x00010008
 8001ed8:	00010002 	.word	0x00010002

08001edc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af02      	add	r7, sp, #8
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f00:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d006      	beq.n	8001f16 <I2C_MasterRequestRead+0x3a>
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d003      	beq.n	8001f16 <I2C_MasterRequestRead+0x3a>
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f14:	d108      	bne.n	8001f28 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	e00b      	b.n	8001f40 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	2b11      	cmp	r3, #17
 8001f2e:	d107      	bne.n	8001f40 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 f893 	bl	8002078 <I2C_WaitOnFlagUntilTimeout>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00d      	beq.n	8001f74 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f66:	d103      	bne.n	8001f70 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e079      	b.n	8002068 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f7c:	d108      	bne.n	8001f90 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001f7e:	897b      	ldrh	r3, [r7, #10]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	611a      	str	r2, [r3, #16]
 8001f8e:	e05f      	b.n	8002050 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f90:	897b      	ldrh	r3, [r7, #10]
 8001f92:	11db      	asrs	r3, r3, #7
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	f003 0306 	and.w	r3, r3, #6
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	f063 030f 	orn	r3, r3, #15
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	4930      	ldr	r1, [pc, #192]	; (8002070 <I2C_MasterRequestRead+0x194>)
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f8b9 	bl	8002126 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e054      	b.n	8002068 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001fbe:	897b      	ldrh	r3, [r7, #10]
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	4929      	ldr	r1, [pc, #164]	; (8002074 <I2C_MasterRequestRead+0x198>)
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 f8a9 	bl	8002126 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e044      	b.n	8002068 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002002:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 f831 	bl	8002078 <I2C_WaitOnFlagUntilTimeout>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00d      	beq.n	8002038 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800202a:	d103      	bne.n	8002034 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002032:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e017      	b.n	8002068 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002038:	897b      	ldrh	r3, [r7, #10]
 800203a:	11db      	asrs	r3, r3, #7
 800203c:	b2db      	uxtb	r3, r3
 800203e:	f003 0306 	and.w	r3, r3, #6
 8002042:	b2db      	uxtb	r3, r3
 8002044:	f063 030e 	orn	r3, r3, #14
 8002048:	b2da      	uxtb	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	4907      	ldr	r1, [pc, #28]	; (8002074 <I2C_MasterRequestRead+0x198>)
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 f865 	bl	8002126 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	00010008 	.word	0x00010008
 8002074:	00010002 	.word	0x00010002

08002078 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	4613      	mov	r3, r2
 8002086:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002088:	e025      	b.n	80020d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002090:	d021      	beq.n	80020d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002092:	f7fe ff3f 	bl	8000f14 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d302      	bcc.n	80020a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d116      	bne.n	80020d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2220      	movs	r2, #32
 80020b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f043 0220 	orr.w	r2, r3, #32
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e023      	b.n	800211e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d10d      	bne.n	80020fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	43da      	mvns	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	4013      	ands	r3, r2
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	bf0c      	ite	eq
 80020f2:	2301      	moveq	r3, #1
 80020f4:	2300      	movne	r3, #0
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	461a      	mov	r2, r3
 80020fa:	e00c      	b.n	8002116 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	43da      	mvns	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	4013      	ands	r3, r2
 8002108:	b29b      	uxth	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	bf0c      	ite	eq
 800210e:	2301      	moveq	r3, #1
 8002110:	2300      	movne	r3, #0
 8002112:	b2db      	uxtb	r3, r3
 8002114:	461a      	mov	r2, r3
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	429a      	cmp	r2, r3
 800211a:	d0b6      	beq.n	800208a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b084      	sub	sp, #16
 800212a:	af00      	add	r7, sp, #0
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002134:	e051      	b.n	80021da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002144:	d123      	bne.n	800218e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002154:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800215e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2220      	movs	r2, #32
 800216a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f043 0204 	orr.w	r2, r3, #4
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e046      	b.n	800221c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002194:	d021      	beq.n	80021da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002196:	f7fe febd 	bl	8000f14 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d302      	bcc.n	80021ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d116      	bne.n	80021da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2220      	movs	r2, #32
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f043 0220 	orr.w	r2, r3, #32
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e020      	b.n	800221c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	0c1b      	lsrs	r3, r3, #16
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d10c      	bne.n	80021fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	43da      	mvns	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	4013      	ands	r3, r2
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	bf14      	ite	ne
 80021f6:	2301      	movne	r3, #1
 80021f8:	2300      	moveq	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	e00b      	b.n	8002216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	43da      	mvns	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	4013      	ands	r3, r2
 800220a:	b29b      	uxth	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	bf14      	ite	ne
 8002210:	2301      	movne	r3, #1
 8002212:	2300      	moveq	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d18d      	bne.n	8002136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002230:	e02d      	b.n	800228e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f8ce 	bl	80023d4 <I2C_IsAcknowledgeFailed>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e02d      	b.n	800229e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002248:	d021      	beq.n	800228e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224a:	f7fe fe63 	bl	8000f14 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	429a      	cmp	r2, r3
 8002258:	d302      	bcc.n	8002260 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d116      	bne.n	800228e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f043 0220 	orr.w	r2, r3, #32
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e007      	b.n	800229e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002298:	2b80      	cmp	r3, #128	; 0x80
 800229a:	d1ca      	bne.n	8002232 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b084      	sub	sp, #16
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022b2:	e02d      	b.n	8002310 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f88d 	bl	80023d4 <I2C_IsAcknowledgeFailed>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e02d      	b.n	8002320 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022ca:	d021      	beq.n	8002310 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022cc:	f7fe fe22 	bl	8000f14 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d302      	bcc.n	80022e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d116      	bne.n	8002310 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	f043 0220 	orr.w	r2, r3, #32
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e007      	b.n	8002320 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b04      	cmp	r3, #4
 800231c:	d1ca      	bne.n	80022b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002334:	e042      	b.n	80023bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b10      	cmp	r3, #16
 8002342:	d119      	bne.n	8002378 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0210 	mvn.w	r2, #16
 800234c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e029      	b.n	80023cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002378:	f7fe fdcc 	bl	8000f14 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	429a      	cmp	r2, r3
 8002386:	d302      	bcc.n	800238e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d116      	bne.n	80023bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f043 0220 	orr.w	r2, r3, #32
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e007      	b.n	80023cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c6:	2b40      	cmp	r3, #64	; 0x40
 80023c8:	d1b5      	bne.n	8002336 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ea:	d11b      	bne.n	8002424 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	f043 0204 	orr.w	r2, r3, #4
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e264      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d075      	beq.n	800253e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002452:	4ba3      	ldr	r3, [pc, #652]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	2b04      	cmp	r3, #4
 800245c:	d00c      	beq.n	8002478 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245e:	4ba0      	ldr	r3, [pc, #640]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002466:	2b08      	cmp	r3, #8
 8002468:	d112      	bne.n	8002490 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246a:	4b9d      	ldr	r3, [pc, #628]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002476:	d10b      	bne.n	8002490 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002478:	4b99      	ldr	r3, [pc, #612]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d05b      	beq.n	800253c <HAL_RCC_OscConfig+0x108>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d157      	bne.n	800253c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e23f      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002498:	d106      	bne.n	80024a8 <HAL_RCC_OscConfig+0x74>
 800249a:	4b91      	ldr	r3, [pc, #580]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a90      	ldr	r2, [pc, #576]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e01d      	b.n	80024e4 <HAL_RCC_OscConfig+0xb0>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0x98>
 80024b2:	4b8b      	ldr	r3, [pc, #556]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a8a      	ldr	r2, [pc, #552]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4b88      	ldr	r3, [pc, #544]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a87      	ldr	r2, [pc, #540]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e00b      	b.n	80024e4 <HAL_RCC_OscConfig+0xb0>
 80024cc:	4b84      	ldr	r3, [pc, #528]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a83      	ldr	r2, [pc, #524]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b81      	ldr	r3, [pc, #516]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a80      	ldr	r2, [pc, #512]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fd12 	bl	8000f14 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f4:	f7fe fd0e 	bl	8000f14 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	; 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e204      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	4b76      	ldr	r3, [pc, #472]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0xc0>
 8002512:	e014      	b.n	800253e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7fe fcfe 	bl	8000f14 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800251c:	f7fe fcfa 	bl	8000f14 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e1f0      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	4b6c      	ldr	r3, [pc, #432]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0xe8>
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d063      	beq.n	8002612 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800254a:	4b65      	ldr	r3, [pc, #404]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002556:	4b62      	ldr	r3, [pc, #392]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800255e:	2b08      	cmp	r3, #8
 8002560:	d11c      	bne.n	800259c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002562:	4b5f      	ldr	r3, [pc, #380]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d116      	bne.n	800259c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	4b5c      	ldr	r3, [pc, #368]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_RCC_OscConfig+0x152>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e1c4      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4b56      	ldr	r3, [pc, #344]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4952      	ldr	r1, [pc, #328]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	e03a      	b.n	8002612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a4:	4b4f      	ldr	r3, [pc, #316]	; (80026e4 <HAL_RCC_OscConfig+0x2b0>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025aa:	f7fe fcb3 	bl	8000f14 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b2:	f7fe fcaf 	bl	8000f14 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e1a5      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	4b46      	ldr	r3, [pc, #280]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b43      	ldr	r3, [pc, #268]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4940      	ldr	r1, [pc, #256]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
 80025e4:	e015      	b.n	8002612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e6:	4b3f      	ldr	r3, [pc, #252]	; (80026e4 <HAL_RCC_OscConfig+0x2b0>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fc92 	bl	8000f14 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f4:	f7fe fc8e 	bl	8000f14 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e184      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	4b36      	ldr	r3, [pc, #216]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d030      	beq.n	8002680 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d016      	beq.n	8002654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002626:	4b30      	ldr	r3, [pc, #192]	; (80026e8 <HAL_RCC_OscConfig+0x2b4>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7fe fc72 	bl	8000f14 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002634:	f7fe fc6e 	bl	8000f14 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e164      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x200>
 8002652:	e015      	b.n	8002680 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002654:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_RCC_OscConfig+0x2b4>)
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265a:	f7fe fc5b 	bl	8000f14 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002662:	f7fe fc57 	bl	8000f14 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e14d      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f0      	bne.n	8002662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80a0 	beq.w	80027ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002692:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10f      	bne.n	80026be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a0e      	ldr	r2, [pc, #56]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ba:	2301      	movs	r3, #1
 80026bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_OscConfig+0x2b8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d121      	bne.n	800270e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ca:	4b08      	ldr	r3, [pc, #32]	; (80026ec <HAL_RCC_OscConfig+0x2b8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a07      	ldr	r2, [pc, #28]	; (80026ec <HAL_RCC_OscConfig+0x2b8>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d6:	f7fe fc1d 	bl	8000f14 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	e011      	b.n	8002702 <HAL_RCC_OscConfig+0x2ce>
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800
 80026e4:	42470000 	.word	0x42470000
 80026e8:	42470e80 	.word	0x42470e80
 80026ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f0:	f7fe fc10 	bl	8000f14 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e106      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002702:	4b85      	ldr	r3, [pc, #532]	; (8002918 <HAL_RCC_OscConfig+0x4e4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d106      	bne.n	8002724 <HAL_RCC_OscConfig+0x2f0>
 8002716:	4b81      	ldr	r3, [pc, #516]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	4a80      	ldr	r2, [pc, #512]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6713      	str	r3, [r2, #112]	; 0x70
 8002722:	e01c      	b.n	800275e <HAL_RCC_OscConfig+0x32a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b05      	cmp	r3, #5
 800272a:	d10c      	bne.n	8002746 <HAL_RCC_OscConfig+0x312>
 800272c:	4b7b      	ldr	r3, [pc, #492]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002730:	4a7a      	ldr	r2, [pc, #488]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 8002732:	f043 0304 	orr.w	r3, r3, #4
 8002736:	6713      	str	r3, [r2, #112]	; 0x70
 8002738:	4b78      	ldr	r3, [pc, #480]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	4a77      	ldr	r2, [pc, #476]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6713      	str	r3, [r2, #112]	; 0x70
 8002744:	e00b      	b.n	800275e <HAL_RCC_OscConfig+0x32a>
 8002746:	4b75      	ldr	r3, [pc, #468]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	4a74      	ldr	r2, [pc, #464]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	6713      	str	r3, [r2, #112]	; 0x70
 8002752:	4b72      	ldr	r3, [pc, #456]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	4a71      	ldr	r2, [pc, #452]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 8002758:	f023 0304 	bic.w	r3, r3, #4
 800275c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d015      	beq.n	8002792 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002766:	f7fe fbd5 	bl	8000f14 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7fe fbd1 	bl	8000f14 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	; 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e0c5      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002784:	4b65      	ldr	r3, [pc, #404]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ee      	beq.n	800276e <HAL_RCC_OscConfig+0x33a>
 8002790:	e014      	b.n	80027bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002792:	f7fe fbbf 	bl	8000f14 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279a:	f7fe fbbb 	bl	8000f14 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e0af      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b0:	4b5a      	ldr	r3, [pc, #360]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ee      	bne.n	800279a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027bc:	7dfb      	ldrb	r3, [r7, #23]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d105      	bne.n	80027ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c2:	4b56      	ldr	r3, [pc, #344]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	4a55      	ldr	r2, [pc, #340]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 80027c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 809b 	beq.w	800290e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027d8:	4b50      	ldr	r3, [pc, #320]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 030c 	and.w	r3, r3, #12
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d05c      	beq.n	800289e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d141      	bne.n	8002870 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ec:	4b4c      	ldr	r3, [pc, #304]	; (8002920 <HAL_RCC_OscConfig+0x4ec>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7fe fb8f 	bl	8000f14 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fa:	f7fe fb8b 	bl	8000f14 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e081      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280c:	4b43      	ldr	r3, [pc, #268]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f0      	bne.n	80027fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69da      	ldr	r2, [r3, #28]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	019b      	lsls	r3, r3, #6
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282e:	085b      	lsrs	r3, r3, #1
 8002830:	3b01      	subs	r3, #1
 8002832:	041b      	lsls	r3, r3, #16
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	061b      	lsls	r3, r3, #24
 800283c:	4937      	ldr	r1, [pc, #220]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 800283e:	4313      	orrs	r3, r2
 8002840:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002842:	4b37      	ldr	r3, [pc, #220]	; (8002920 <HAL_RCC_OscConfig+0x4ec>)
 8002844:	2201      	movs	r2, #1
 8002846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fe fb64 	bl	8000f14 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002850:	f7fe fb60 	bl	8000f14 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e056      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002862:	4b2e      	ldr	r3, [pc, #184]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0x41c>
 800286e:	e04e      	b.n	800290e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002870:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <HAL_RCC_OscConfig+0x4ec>)
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002876:	f7fe fb4d 	bl	8000f14 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287e:	f7fe fb49 	bl	8000f14 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e03f      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002890:	4b22      	ldr	r3, [pc, #136]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f0      	bne.n	800287e <HAL_RCC_OscConfig+0x44a>
 800289c:	e037      	b.n	800290e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e032      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028aa:	4b1c      	ldr	r3, [pc, #112]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d028      	beq.n	800290a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d121      	bne.n	800290a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d11a      	bne.n	800290a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028da:	4013      	ands	r3, r2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028e0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d111      	bne.n	800290a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	3b01      	subs	r3, #1
 80028f4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d107      	bne.n	800290a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002906:	429a      	cmp	r2, r3
 8002908:	d001      	beq.n	800290e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40007000 	.word	0x40007000
 800291c:	40023800 	.word	0x40023800
 8002920:	42470060 	.word	0x42470060

08002924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0cc      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002938:	4b68      	ldr	r3, [pc, #416]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d90c      	bls.n	8002960 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002946:	4b65      	ldr	r3, [pc, #404]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b63      	ldr	r3, [pc, #396]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0b8      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d020      	beq.n	80029ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002978:	4b59      	ldr	r3, [pc, #356]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4a58      	ldr	r2, [pc, #352]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002982:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002990:	4b53      	ldr	r3, [pc, #332]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	4a52      	ldr	r2, [pc, #328]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800299a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800299c:	4b50      	ldr	r3, [pc, #320]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	494d      	ldr	r1, [pc, #308]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d044      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	4b47      	ldr	r3, [pc, #284]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d119      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e07f      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d003      	beq.n	80029e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e2:	4b3f      	ldr	r3, [pc, #252]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e06f      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f2:	4b3b      	ldr	r3, [pc, #236]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e067      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a02:	4b37      	ldr	r3, [pc, #220]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f023 0203 	bic.w	r2, r3, #3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4934      	ldr	r1, [pc, #208]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a14:	f7fe fa7e 	bl	8000f14 <HAL_GetTick>
 8002a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a1c:	f7fe fa7a 	bl	8000f14 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e04f      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a32:	4b2b      	ldr	r3, [pc, #172]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 020c 	and.w	r2, r3, #12
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d1eb      	bne.n	8002a1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a44:	4b25      	ldr	r3, [pc, #148]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d20c      	bcs.n	8002a6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b22      	ldr	r3, [pc, #136]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5a:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e032      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a78:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4916      	ldr	r1, [pc, #88]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a96:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	490e      	ldr	r1, [pc, #56]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aaa:	f000 f821 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	490a      	ldr	r1, [pc, #40]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	5ccb      	ldrb	r3, [r1, r3]
 8002abe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac2:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe f9de 	bl	8000e8c <HAL_InitTick>

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40023c00 	.word	0x40023c00
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	08004118 	.word	0x08004118
 8002ae8:	20000000 	.word	0x20000000
 8002aec:	20000004 	.word	0x20000004

08002af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	607b      	str	r3, [r7, #4]
 8002afc:	2300      	movs	r3, #0
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	2300      	movs	r3, #0
 8002b02:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b08:	4b67      	ldr	r3, [pc, #412]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d00d      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x40>
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	f200 80bd 	bhi.w	8002c94 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0x34>
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d003      	beq.n	8002b2a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b22:	e0b7      	b.n	8002c94 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b24:	4b61      	ldr	r3, [pc, #388]	; (8002cac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b26:	60bb      	str	r3, [r7, #8]
       break;
 8002b28:	e0b7      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b2a:	4b61      	ldr	r3, [pc, #388]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002b2c:	60bb      	str	r3, [r7, #8]
      break;
 8002b2e:	e0b4      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b30:	4b5d      	ldr	r3, [pc, #372]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b3a:	4b5b      	ldr	r3, [pc, #364]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d04d      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b46:	4b58      	ldr	r3, [pc, #352]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	099b      	lsrs	r3, r3, #6
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b56:	f04f 0100 	mov.w	r1, #0
 8002b5a:	ea02 0800 	and.w	r8, r2, r0
 8002b5e:	ea03 0901 	and.w	r9, r3, r1
 8002b62:	4640      	mov	r0, r8
 8002b64:	4649      	mov	r1, r9
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	014b      	lsls	r3, r1, #5
 8002b70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b74:	0142      	lsls	r2, r0, #5
 8002b76:	4610      	mov	r0, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	ebb0 0008 	subs.w	r0, r0, r8
 8002b7e:	eb61 0109 	sbc.w	r1, r1, r9
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	018b      	lsls	r3, r1, #6
 8002b8c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b90:	0182      	lsls	r2, r0, #6
 8002b92:	1a12      	subs	r2, r2, r0
 8002b94:	eb63 0301 	sbc.w	r3, r3, r1
 8002b98:	f04f 0000 	mov.w	r0, #0
 8002b9c:	f04f 0100 	mov.w	r1, #0
 8002ba0:	00d9      	lsls	r1, r3, #3
 8002ba2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ba6:	00d0      	lsls	r0, r2, #3
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	eb12 0208 	adds.w	r2, r2, r8
 8002bb0:	eb43 0309 	adc.w	r3, r3, r9
 8002bb4:	f04f 0000 	mov.w	r0, #0
 8002bb8:	f04f 0100 	mov.w	r1, #0
 8002bbc:	0259      	lsls	r1, r3, #9
 8002bbe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002bc2:	0250      	lsls	r0, r2, #9
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4619      	mov	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	f7fd fb5c 	bl	8000290 <__aeabi_uldivmod>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4613      	mov	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	e04a      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be2:	4b31      	ldr	r3, [pc, #196]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	099b      	lsrs	r3, r3, #6
 8002be8:	461a      	mov	r2, r3
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bf2:	f04f 0100 	mov.w	r1, #0
 8002bf6:	ea02 0400 	and.w	r4, r2, r0
 8002bfa:	ea03 0501 	and.w	r5, r3, r1
 8002bfe:	4620      	mov	r0, r4
 8002c00:	4629      	mov	r1, r5
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	014b      	lsls	r3, r1, #5
 8002c0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c10:	0142      	lsls	r2, r0, #5
 8002c12:	4610      	mov	r0, r2
 8002c14:	4619      	mov	r1, r3
 8002c16:	1b00      	subs	r0, r0, r4
 8002c18:	eb61 0105 	sbc.w	r1, r1, r5
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	018b      	lsls	r3, r1, #6
 8002c26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c2a:	0182      	lsls	r2, r0, #6
 8002c2c:	1a12      	subs	r2, r2, r0
 8002c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c32:	f04f 0000 	mov.w	r0, #0
 8002c36:	f04f 0100 	mov.w	r1, #0
 8002c3a:	00d9      	lsls	r1, r3, #3
 8002c3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c40:	00d0      	lsls	r0, r2, #3
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	1912      	adds	r2, r2, r4
 8002c48:	eb45 0303 	adc.w	r3, r5, r3
 8002c4c:	f04f 0000 	mov.w	r0, #0
 8002c50:	f04f 0100 	mov.w	r1, #0
 8002c54:	0299      	lsls	r1, r3, #10
 8002c56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c5a:	0290      	lsls	r0, r2, #10
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	461a      	mov	r2, r3
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	f7fd fb10 	bl	8000290 <__aeabi_uldivmod>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4613      	mov	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	0c1b      	lsrs	r3, r3, #16
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	3301      	adds	r3, #1
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c90:	60bb      	str	r3, [r7, #8]
      break;
 8002c92:	e002      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c96:	60bb      	str	r3, [r7, #8]
      break;
 8002c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	00f42400 	.word	0x00f42400
 8002cb0:	007a1200 	.word	0x007a1200

08002cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000000 	.word	0x20000000

08002ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cd0:	f7ff fff0 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b05      	ldr	r3, [pc, #20]	; (8002cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	0a9b      	lsrs	r3, r3, #10
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	4903      	ldr	r1, [pc, #12]	; (8002cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	08004128 	.word	0x08004128

08002cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cf8:	f7ff ffdc 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	0b5b      	lsrs	r3, r3, #13
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	4903      	ldr	r1, [pc, #12]	; (8002d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d0a:	5ccb      	ldrb	r3, [r1, r3]
 8002d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40023800 	.word	0x40023800
 8002d18:	08004128 	.word	0x08004128

08002d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e041      	b.n	8002db2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d106      	bne.n	8002d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7fd ffbc 	bl	8000cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3304      	adds	r3, #4
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	f000 f9c0 	bl	80030e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d001      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e044      	b.n	8002e5e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a1e      	ldr	r2, [pc, #120]	; (8002e6c <HAL_TIM_Base_Start_IT+0xb0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d018      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x6c>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfe:	d013      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x6c>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a1a      	ldr	r2, [pc, #104]	; (8002e70 <HAL_TIM_Base_Start_IT+0xb4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00e      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x6c>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a19      	ldr	r2, [pc, #100]	; (8002e74 <HAL_TIM_Base_Start_IT+0xb8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d009      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x6c>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a17      	ldr	r2, [pc, #92]	; (8002e78 <HAL_TIM_Base_Start_IT+0xbc>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d004      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x6c>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a16      	ldr	r2, [pc, #88]	; (8002e7c <HAL_TIM_Base_Start_IT+0xc0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d111      	bne.n	8002e4c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b06      	cmp	r3, #6
 8002e38:	d010      	beq.n	8002e5c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0201 	orr.w	r2, r2, #1
 8002e48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e4a:	e007      	b.n	8002e5c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40010000 	.word	0x40010000
 8002e70:	40000400 	.word	0x40000400
 8002e74:	40000800 	.word	0x40000800
 8002e78:	40000c00 	.word	0x40000c00
 8002e7c:	40014000 	.word	0x40014000

08002e80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d122      	bne.n	8002edc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d11b      	bne.n	8002edc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0202 	mvn.w	r2, #2
 8002eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f8ee 	bl	80030a4 <HAL_TIM_IC_CaptureCallback>
 8002ec8:	e005      	b.n	8002ed6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f8e0 	bl	8003090 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f8f1 	bl	80030b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d122      	bne.n	8002f30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d11b      	bne.n	8002f30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f06f 0204 	mvn.w	r2, #4
 8002f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2202      	movs	r2, #2
 8002f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f8c4 	bl	80030a4 <HAL_TIM_IC_CaptureCallback>
 8002f1c:	e005      	b.n	8002f2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f8b6 	bl	8003090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f8c7 	bl	80030b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d122      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d11b      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f06f 0208 	mvn.w	r2, #8
 8002f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2204      	movs	r2, #4
 8002f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f89a 	bl	80030a4 <HAL_TIM_IC_CaptureCallback>
 8002f70:	e005      	b.n	8002f7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f88c 	bl	8003090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f89d 	bl	80030b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	d122      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b10      	cmp	r3, #16
 8002f9e:	d11b      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0210 	mvn.w	r2, #16
 8002fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2208      	movs	r2, #8
 8002fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f870 	bl	80030a4 <HAL_TIM_IC_CaptureCallback>
 8002fc4:	e005      	b.n	8002fd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f862 	bl	8003090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f873 	bl	80030b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d10e      	bne.n	8003004 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d107      	bne.n	8003004 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0201 	mvn.w	r2, #1
 8002ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fd fd7c 	bl	8000afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300e:	2b80      	cmp	r3, #128	; 0x80
 8003010:	d10e      	bne.n	8003030 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301c:	2b80      	cmp	r3, #128	; 0x80
 800301e:	d107      	bne.n	8003030 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f8e2 	bl	80031f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303a:	2b40      	cmp	r3, #64	; 0x40
 800303c:	d10e      	bne.n	800305c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003048:	2b40      	cmp	r3, #64	; 0x40
 800304a:	d107      	bne.n	800305c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f838 	bl	80030cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b20      	cmp	r3, #32
 8003068:	d10e      	bne.n	8003088 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b20      	cmp	r3, #32
 8003076:	d107      	bne.n	8003088 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0220 	mvn.w	r2, #32
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f8ac 	bl	80031e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a34      	ldr	r2, [pc, #208]	; (80031c4 <TIM_Base_SetConfig+0xe4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00f      	beq.n	8003118 <TIM_Base_SetConfig+0x38>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030fe:	d00b      	beq.n	8003118 <TIM_Base_SetConfig+0x38>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a31      	ldr	r2, [pc, #196]	; (80031c8 <TIM_Base_SetConfig+0xe8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d007      	beq.n	8003118 <TIM_Base_SetConfig+0x38>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a30      	ldr	r2, [pc, #192]	; (80031cc <TIM_Base_SetConfig+0xec>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d003      	beq.n	8003118 <TIM_Base_SetConfig+0x38>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a2f      	ldr	r2, [pc, #188]	; (80031d0 <TIM_Base_SetConfig+0xf0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d108      	bne.n	800312a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a25      	ldr	r2, [pc, #148]	; (80031c4 <TIM_Base_SetConfig+0xe4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d01b      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003138:	d017      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a22      	ldr	r2, [pc, #136]	; (80031c8 <TIM_Base_SetConfig+0xe8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a21      	ldr	r2, [pc, #132]	; (80031cc <TIM_Base_SetConfig+0xec>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00f      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a20      	ldr	r2, [pc, #128]	; (80031d0 <TIM_Base_SetConfig+0xf0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00b      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a1f      	ldr	r2, [pc, #124]	; (80031d4 <TIM_Base_SetConfig+0xf4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d007      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a1e      	ldr	r2, [pc, #120]	; (80031d8 <TIM_Base_SetConfig+0xf8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d003      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a1d      	ldr	r2, [pc, #116]	; (80031dc <TIM_Base_SetConfig+0xfc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d108      	bne.n	800317c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4313      	orrs	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a08      	ldr	r2, [pc, #32]	; (80031c4 <TIM_Base_SetConfig+0xe4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d103      	bne.n	80031b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	615a      	str	r2, [r3, #20]
}
 80031b6:	bf00      	nop
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40010000 	.word	0x40010000
 80031c8:	40000400 	.word	0x40000400
 80031cc:	40000800 	.word	0x40000800
 80031d0:	40000c00 	.word	0x40000c00
 80031d4:	40014000 	.word	0x40014000
 80031d8:	40014400 	.word	0x40014400
 80031dc:	40014800 	.word	0x40014800

080031e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e03f      	b.n	800329a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fd fd98 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2224      	movs	r2, #36	; 0x24
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800324a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f929 	bl	80034a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003260:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695a      	ldr	r2, [r3, #20]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003270:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003280:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b08a      	sub	sp, #40	; 0x28
 80032a6:	af02      	add	r7, sp, #8
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	603b      	str	r3, [r7, #0]
 80032ae:	4613      	mov	r3, r2
 80032b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b20      	cmp	r3, #32
 80032c0:	d17c      	bne.n	80033bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <HAL_UART_Transmit+0x2c>
 80032c8:	88fb      	ldrh	r3, [r7, #6]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e075      	b.n	80033be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_UART_Transmit+0x3e>
 80032dc:	2302      	movs	r3, #2
 80032de:	e06e      	b.n	80033be <HAL_UART_Transmit+0x11c>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2221      	movs	r2, #33	; 0x21
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032f6:	f7fd fe0d 	bl	8000f14 <HAL_GetTick>
 80032fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	88fa      	ldrh	r2, [r7, #6]
 8003300:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	88fa      	ldrh	r2, [r7, #6]
 8003306:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003310:	d108      	bne.n	8003324 <HAL_UART_Transmit+0x82>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d104      	bne.n	8003324 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	61bb      	str	r3, [r7, #24]
 8003322:	e003      	b.n	800332c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003328:	2300      	movs	r3, #0
 800332a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003334:	e02a      	b.n	800338c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2200      	movs	r2, #0
 800333e:	2180      	movs	r1, #128	; 0x80
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 f840 	bl	80033c6 <UART_WaitOnFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e036      	b.n	80033be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10b      	bne.n	800336e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003364:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	3302      	adds	r3, #2
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	e007      	b.n	800337e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	781a      	ldrb	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	3301      	adds	r3, #1
 800337c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1cf      	bne.n	8003336 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2200      	movs	r2, #0
 800339e:	2140      	movs	r1, #64	; 0x40
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f810 	bl	80033c6 <UART_WaitOnFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e006      	b.n	80033be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	e000      	b.n	80033be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80033bc:	2302      	movs	r3, #2
  }
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3720      	adds	r7, #32
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b090      	sub	sp, #64	; 0x40
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	603b      	str	r3, [r7, #0]
 80033d2:	4613      	mov	r3, r2
 80033d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d6:	e050      	b.n	800347a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033de:	d04c      	beq.n	800347a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80033e6:	f7fd fd95 	bl	8000f14 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d241      	bcs.n	800347a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	330c      	adds	r3, #12
 80033fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003400:	e853 3f00 	ldrex	r3, [r3]
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800340c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	330c      	adds	r3, #12
 8003414:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003416:	637a      	str	r2, [r7, #52]	; 0x34
 8003418:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800341c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800341e:	e841 2300 	strex	r3, r2, [r1]
 8003422:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1e5      	bne.n	80033f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3314      	adds	r3, #20
 8003430:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	e853 3f00 	ldrex	r3, [r3]
 8003438:	613b      	str	r3, [r7, #16]
   return(result);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f023 0301 	bic.w	r3, r3, #1
 8003440:	63bb      	str	r3, [r7, #56]	; 0x38
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3314      	adds	r3, #20
 8003448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800344a:	623a      	str	r2, [r7, #32]
 800344c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344e:	69f9      	ldr	r1, [r7, #28]
 8003450:	6a3a      	ldr	r2, [r7, #32]
 8003452:	e841 2300 	strex	r3, r2, [r1]
 8003456:	61bb      	str	r3, [r7, #24]
   return(result);
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1e5      	bne.n	800342a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e00f      	b.n	800349a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	4013      	ands	r3, r2
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	429a      	cmp	r2, r3
 8003488:	bf0c      	ite	eq
 800348a:	2301      	moveq	r3, #1
 800348c:	2300      	movne	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	429a      	cmp	r2, r3
 8003496:	d09f      	beq.n	80033d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3740      	adds	r7, #64	; 0x40
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a8:	b09f      	sub	sp, #124	; 0x7c
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ba:	68d9      	ldr	r1, [r3, #12]
 80034bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	ea40 0301 	orr.w	r3, r0, r1
 80034c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	431a      	orrs	r2, r3
 80034d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	4313      	orrs	r3, r2
 80034dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80034de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034e8:	f021 010c 	bic.w	r1, r1, #12
 80034ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034f2:	430b      	orrs	r3, r1
 80034f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003502:	6999      	ldr	r1, [r3, #24]
 8003504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	ea40 0301 	orr.w	r3, r0, r1
 800350c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800350e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	4bc5      	ldr	r3, [pc, #788]	; (8003828 <UART_SetConfig+0x384>)
 8003514:	429a      	cmp	r2, r3
 8003516:	d004      	beq.n	8003522 <UART_SetConfig+0x7e>
 8003518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4bc3      	ldr	r3, [pc, #780]	; (800382c <UART_SetConfig+0x388>)
 800351e:	429a      	cmp	r2, r3
 8003520:	d103      	bne.n	800352a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003522:	f7ff fbe7 	bl	8002cf4 <HAL_RCC_GetPCLK2Freq>
 8003526:	6778      	str	r0, [r7, #116]	; 0x74
 8003528:	e002      	b.n	8003530 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800352a:	f7ff fbcf 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 800352e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003538:	f040 80b6 	bne.w	80036a8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800353c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800353e:	461c      	mov	r4, r3
 8003540:	f04f 0500 	mov.w	r5, #0
 8003544:	4622      	mov	r2, r4
 8003546:	462b      	mov	r3, r5
 8003548:	1891      	adds	r1, r2, r2
 800354a:	6439      	str	r1, [r7, #64]	; 0x40
 800354c:	415b      	adcs	r3, r3
 800354e:	647b      	str	r3, [r7, #68]	; 0x44
 8003550:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003554:	1912      	adds	r2, r2, r4
 8003556:	eb45 0303 	adc.w	r3, r5, r3
 800355a:	f04f 0000 	mov.w	r0, #0
 800355e:	f04f 0100 	mov.w	r1, #0
 8003562:	00d9      	lsls	r1, r3, #3
 8003564:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003568:	00d0      	lsls	r0, r2, #3
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	1911      	adds	r1, r2, r4
 8003570:	6639      	str	r1, [r7, #96]	; 0x60
 8003572:	416b      	adcs	r3, r5
 8003574:	667b      	str	r3, [r7, #100]	; 0x64
 8003576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	461a      	mov	r2, r3
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	1891      	adds	r1, r2, r2
 8003582:	63b9      	str	r1, [r7, #56]	; 0x38
 8003584:	415b      	adcs	r3, r3
 8003586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003588:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800358c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003590:	f7fc fe7e 	bl	8000290 <__aeabi_uldivmod>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4ba5      	ldr	r3, [pc, #660]	; (8003830 <UART_SetConfig+0x38c>)
 800359a:	fba3 2302 	umull	r2, r3, r3, r2
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	011e      	lsls	r6, r3, #4
 80035a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035a4:	461c      	mov	r4, r3
 80035a6:	f04f 0500 	mov.w	r5, #0
 80035aa:	4622      	mov	r2, r4
 80035ac:	462b      	mov	r3, r5
 80035ae:	1891      	adds	r1, r2, r2
 80035b0:	6339      	str	r1, [r7, #48]	; 0x30
 80035b2:	415b      	adcs	r3, r3
 80035b4:	637b      	str	r3, [r7, #52]	; 0x34
 80035b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035ba:	1912      	adds	r2, r2, r4
 80035bc:	eb45 0303 	adc.w	r3, r5, r3
 80035c0:	f04f 0000 	mov.w	r0, #0
 80035c4:	f04f 0100 	mov.w	r1, #0
 80035c8:	00d9      	lsls	r1, r3, #3
 80035ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035ce:	00d0      	lsls	r0, r2, #3
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	1911      	adds	r1, r2, r4
 80035d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80035d8:	416b      	adcs	r3, r5
 80035da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	461a      	mov	r2, r3
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	1891      	adds	r1, r2, r2
 80035e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80035ea:	415b      	adcs	r3, r3
 80035ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80035f6:	f7fc fe4b 	bl	8000290 <__aeabi_uldivmod>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4b8c      	ldr	r3, [pc, #560]	; (8003830 <UART_SetConfig+0x38c>)
 8003600:	fba3 1302 	umull	r1, r3, r3, r2
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	2164      	movs	r1, #100	; 0x64
 8003608:	fb01 f303 	mul.w	r3, r1, r3
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	3332      	adds	r3, #50	; 0x32
 8003612:	4a87      	ldr	r2, [pc, #540]	; (8003830 <UART_SetConfig+0x38c>)
 8003614:	fba2 2303 	umull	r2, r3, r2, r3
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003620:	441e      	add	r6, r3
 8003622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003624:	4618      	mov	r0, r3
 8003626:	f04f 0100 	mov.w	r1, #0
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	1894      	adds	r4, r2, r2
 8003630:	623c      	str	r4, [r7, #32]
 8003632:	415b      	adcs	r3, r3
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
 8003636:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800363a:	1812      	adds	r2, r2, r0
 800363c:	eb41 0303 	adc.w	r3, r1, r3
 8003640:	f04f 0400 	mov.w	r4, #0
 8003644:	f04f 0500 	mov.w	r5, #0
 8003648:	00dd      	lsls	r5, r3, #3
 800364a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800364e:	00d4      	lsls	r4, r2, #3
 8003650:	4622      	mov	r2, r4
 8003652:	462b      	mov	r3, r5
 8003654:	1814      	adds	r4, r2, r0
 8003656:	653c      	str	r4, [r7, #80]	; 0x50
 8003658:	414b      	adcs	r3, r1
 800365a:	657b      	str	r3, [r7, #84]	; 0x54
 800365c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	461a      	mov	r2, r3
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	1891      	adds	r1, r2, r2
 8003668:	61b9      	str	r1, [r7, #24]
 800366a:	415b      	adcs	r3, r3
 800366c:	61fb      	str	r3, [r7, #28]
 800366e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003672:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003676:	f7fc fe0b 	bl	8000290 <__aeabi_uldivmod>
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	4b6c      	ldr	r3, [pc, #432]	; (8003830 <UART_SetConfig+0x38c>)
 8003680:	fba3 1302 	umull	r1, r3, r3, r2
 8003684:	095b      	lsrs	r3, r3, #5
 8003686:	2164      	movs	r1, #100	; 0x64
 8003688:	fb01 f303 	mul.w	r3, r1, r3
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	3332      	adds	r3, #50	; 0x32
 8003692:	4a67      	ldr	r2, [pc, #412]	; (8003830 <UART_SetConfig+0x38c>)
 8003694:	fba2 2303 	umull	r2, r3, r2, r3
 8003698:	095b      	lsrs	r3, r3, #5
 800369a:	f003 0207 	and.w	r2, r3, #7
 800369e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4432      	add	r2, r6
 80036a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036a6:	e0b9      	b.n	800381c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036aa:	461c      	mov	r4, r3
 80036ac:	f04f 0500 	mov.w	r5, #0
 80036b0:	4622      	mov	r2, r4
 80036b2:	462b      	mov	r3, r5
 80036b4:	1891      	adds	r1, r2, r2
 80036b6:	6139      	str	r1, [r7, #16]
 80036b8:	415b      	adcs	r3, r3
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80036c0:	1912      	adds	r2, r2, r4
 80036c2:	eb45 0303 	adc.w	r3, r5, r3
 80036c6:	f04f 0000 	mov.w	r0, #0
 80036ca:	f04f 0100 	mov.w	r1, #0
 80036ce:	00d9      	lsls	r1, r3, #3
 80036d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036d4:	00d0      	lsls	r0, r2, #3
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	eb12 0804 	adds.w	r8, r2, r4
 80036de:	eb43 0905 	adc.w	r9, r3, r5
 80036e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f04f 0100 	mov.w	r1, #0
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	008b      	lsls	r3, r1, #2
 80036f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80036fa:	0082      	lsls	r2, r0, #2
 80036fc:	4640      	mov	r0, r8
 80036fe:	4649      	mov	r1, r9
 8003700:	f7fc fdc6 	bl	8000290 <__aeabi_uldivmod>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4b49      	ldr	r3, [pc, #292]	; (8003830 <UART_SetConfig+0x38c>)
 800370a:	fba3 2302 	umull	r2, r3, r3, r2
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	011e      	lsls	r6, r3, #4
 8003712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003714:	4618      	mov	r0, r3
 8003716:	f04f 0100 	mov.w	r1, #0
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	1894      	adds	r4, r2, r2
 8003720:	60bc      	str	r4, [r7, #8]
 8003722:	415b      	adcs	r3, r3
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800372a:	1812      	adds	r2, r2, r0
 800372c:	eb41 0303 	adc.w	r3, r1, r3
 8003730:	f04f 0400 	mov.w	r4, #0
 8003734:	f04f 0500 	mov.w	r5, #0
 8003738:	00dd      	lsls	r5, r3, #3
 800373a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800373e:	00d4      	lsls	r4, r2, #3
 8003740:	4622      	mov	r2, r4
 8003742:	462b      	mov	r3, r5
 8003744:	1814      	adds	r4, r2, r0
 8003746:	64bc      	str	r4, [r7, #72]	; 0x48
 8003748:	414b      	adcs	r3, r1
 800374a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800374c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	4618      	mov	r0, r3
 8003752:	f04f 0100 	mov.w	r1, #0
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	008b      	lsls	r3, r1, #2
 8003760:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003764:	0082      	lsls	r2, r0, #2
 8003766:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800376a:	f7fc fd91 	bl	8000290 <__aeabi_uldivmod>
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	4b2f      	ldr	r3, [pc, #188]	; (8003830 <UART_SetConfig+0x38c>)
 8003774:	fba3 1302 	umull	r1, r3, r3, r2
 8003778:	095b      	lsrs	r3, r3, #5
 800377a:	2164      	movs	r1, #100	; 0x64
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	3332      	adds	r3, #50	; 0x32
 8003786:	4a2a      	ldr	r2, [pc, #168]	; (8003830 <UART_SetConfig+0x38c>)
 8003788:	fba2 2303 	umull	r2, r3, r2, r3
 800378c:	095b      	lsrs	r3, r3, #5
 800378e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003792:	441e      	add	r6, r3
 8003794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003796:	4618      	mov	r0, r3
 8003798:	f04f 0100 	mov.w	r1, #0
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	1894      	adds	r4, r2, r2
 80037a2:	603c      	str	r4, [r7, #0]
 80037a4:	415b      	adcs	r3, r3
 80037a6:	607b      	str	r3, [r7, #4]
 80037a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037ac:	1812      	adds	r2, r2, r0
 80037ae:	eb41 0303 	adc.w	r3, r1, r3
 80037b2:	f04f 0400 	mov.w	r4, #0
 80037b6:	f04f 0500 	mov.w	r5, #0
 80037ba:	00dd      	lsls	r5, r3, #3
 80037bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037c0:	00d4      	lsls	r4, r2, #3
 80037c2:	4622      	mov	r2, r4
 80037c4:	462b      	mov	r3, r5
 80037c6:	eb12 0a00 	adds.w	sl, r2, r0
 80037ca:	eb43 0b01 	adc.w	fp, r3, r1
 80037ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f04f 0100 	mov.w	r1, #0
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	008b      	lsls	r3, r1, #2
 80037e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80037e6:	0082      	lsls	r2, r0, #2
 80037e8:	4650      	mov	r0, sl
 80037ea:	4659      	mov	r1, fp
 80037ec:	f7fc fd50 	bl	8000290 <__aeabi_uldivmod>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <UART_SetConfig+0x38c>)
 80037f6:	fba3 1302 	umull	r1, r3, r3, r2
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	2164      	movs	r1, #100	; 0x64
 80037fe:	fb01 f303 	mul.w	r3, r1, r3
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	3332      	adds	r3, #50	; 0x32
 8003808:	4a09      	ldr	r2, [pc, #36]	; (8003830 <UART_SetConfig+0x38c>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	f003 020f 	and.w	r2, r3, #15
 8003814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4432      	add	r2, r6
 800381a:	609a      	str	r2, [r3, #8]
}
 800381c:	bf00      	nop
 800381e:	377c      	adds	r7, #124	; 0x7c
 8003820:	46bd      	mov	sp, r7
 8003822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003826:	bf00      	nop
 8003828:	40011000 	.word	0x40011000
 800382c:	40011400 	.word	0x40011400
 8003830:	51eb851f 	.word	0x51eb851f

08003834 <__errno>:
 8003834:	4b01      	ldr	r3, [pc, #4]	; (800383c <__errno+0x8>)
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	2000000c 	.word	0x2000000c

08003840 <__libc_init_array>:
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	4d0d      	ldr	r5, [pc, #52]	; (8003878 <__libc_init_array+0x38>)
 8003844:	4c0d      	ldr	r4, [pc, #52]	; (800387c <__libc_init_array+0x3c>)
 8003846:	1b64      	subs	r4, r4, r5
 8003848:	10a4      	asrs	r4, r4, #2
 800384a:	2600      	movs	r6, #0
 800384c:	42a6      	cmp	r6, r4
 800384e:	d109      	bne.n	8003864 <__libc_init_array+0x24>
 8003850:	4d0b      	ldr	r5, [pc, #44]	; (8003880 <__libc_init_array+0x40>)
 8003852:	4c0c      	ldr	r4, [pc, #48]	; (8003884 <__libc_init_array+0x44>)
 8003854:	f000 fc4e 	bl	80040f4 <_init>
 8003858:	1b64      	subs	r4, r4, r5
 800385a:	10a4      	asrs	r4, r4, #2
 800385c:	2600      	movs	r6, #0
 800385e:	42a6      	cmp	r6, r4
 8003860:	d105      	bne.n	800386e <__libc_init_array+0x2e>
 8003862:	bd70      	pop	{r4, r5, r6, pc}
 8003864:	f855 3b04 	ldr.w	r3, [r5], #4
 8003868:	4798      	blx	r3
 800386a:	3601      	adds	r6, #1
 800386c:	e7ee      	b.n	800384c <__libc_init_array+0xc>
 800386e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003872:	4798      	blx	r3
 8003874:	3601      	adds	r6, #1
 8003876:	e7f2      	b.n	800385e <__libc_init_array+0x1e>
 8003878:	0800416c 	.word	0x0800416c
 800387c:	0800416c 	.word	0x0800416c
 8003880:	0800416c 	.word	0x0800416c
 8003884:	08004170 	.word	0x08004170

08003888 <memset>:
 8003888:	4402      	add	r2, r0
 800388a:	4603      	mov	r3, r0
 800388c:	4293      	cmp	r3, r2
 800388e:	d100      	bne.n	8003892 <memset+0xa>
 8003890:	4770      	bx	lr
 8003892:	f803 1b01 	strb.w	r1, [r3], #1
 8003896:	e7f9      	b.n	800388c <memset+0x4>

08003898 <siprintf>:
 8003898:	b40e      	push	{r1, r2, r3}
 800389a:	b500      	push	{lr}
 800389c:	b09c      	sub	sp, #112	; 0x70
 800389e:	ab1d      	add	r3, sp, #116	; 0x74
 80038a0:	9002      	str	r0, [sp, #8]
 80038a2:	9006      	str	r0, [sp, #24]
 80038a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038a8:	4809      	ldr	r0, [pc, #36]	; (80038d0 <siprintf+0x38>)
 80038aa:	9107      	str	r1, [sp, #28]
 80038ac:	9104      	str	r1, [sp, #16]
 80038ae:	4909      	ldr	r1, [pc, #36]	; (80038d4 <siprintf+0x3c>)
 80038b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80038b4:	9105      	str	r1, [sp, #20]
 80038b6:	6800      	ldr	r0, [r0, #0]
 80038b8:	9301      	str	r3, [sp, #4]
 80038ba:	a902      	add	r1, sp, #8
 80038bc:	f000 f868 	bl	8003990 <_svfiprintf_r>
 80038c0:	9b02      	ldr	r3, [sp, #8]
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]
 80038c6:	b01c      	add	sp, #112	; 0x70
 80038c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80038cc:	b003      	add	sp, #12
 80038ce:	4770      	bx	lr
 80038d0:	2000000c 	.word	0x2000000c
 80038d4:	ffff0208 	.word	0xffff0208

080038d8 <__ssputs_r>:
 80038d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038dc:	688e      	ldr	r6, [r1, #8]
 80038de:	429e      	cmp	r6, r3
 80038e0:	4682      	mov	sl, r0
 80038e2:	460c      	mov	r4, r1
 80038e4:	4690      	mov	r8, r2
 80038e6:	461f      	mov	r7, r3
 80038e8:	d838      	bhi.n	800395c <__ssputs_r+0x84>
 80038ea:	898a      	ldrh	r2, [r1, #12]
 80038ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038f0:	d032      	beq.n	8003958 <__ssputs_r+0x80>
 80038f2:	6825      	ldr	r5, [r4, #0]
 80038f4:	6909      	ldr	r1, [r1, #16]
 80038f6:	eba5 0901 	sub.w	r9, r5, r1
 80038fa:	6965      	ldr	r5, [r4, #20]
 80038fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003900:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003904:	3301      	adds	r3, #1
 8003906:	444b      	add	r3, r9
 8003908:	106d      	asrs	r5, r5, #1
 800390a:	429d      	cmp	r5, r3
 800390c:	bf38      	it	cc
 800390e:	461d      	movcc	r5, r3
 8003910:	0553      	lsls	r3, r2, #21
 8003912:	d531      	bpl.n	8003978 <__ssputs_r+0xa0>
 8003914:	4629      	mov	r1, r5
 8003916:	f000 fb47 	bl	8003fa8 <_malloc_r>
 800391a:	4606      	mov	r6, r0
 800391c:	b950      	cbnz	r0, 8003934 <__ssputs_r+0x5c>
 800391e:	230c      	movs	r3, #12
 8003920:	f8ca 3000 	str.w	r3, [sl]
 8003924:	89a3      	ldrh	r3, [r4, #12]
 8003926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800392a:	81a3      	strh	r3, [r4, #12]
 800392c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003934:	6921      	ldr	r1, [r4, #16]
 8003936:	464a      	mov	r2, r9
 8003938:	f000 fabe 	bl	8003eb8 <memcpy>
 800393c:	89a3      	ldrh	r3, [r4, #12]
 800393e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003946:	81a3      	strh	r3, [r4, #12]
 8003948:	6126      	str	r6, [r4, #16]
 800394a:	6165      	str	r5, [r4, #20]
 800394c:	444e      	add	r6, r9
 800394e:	eba5 0509 	sub.w	r5, r5, r9
 8003952:	6026      	str	r6, [r4, #0]
 8003954:	60a5      	str	r5, [r4, #8]
 8003956:	463e      	mov	r6, r7
 8003958:	42be      	cmp	r6, r7
 800395a:	d900      	bls.n	800395e <__ssputs_r+0x86>
 800395c:	463e      	mov	r6, r7
 800395e:	4632      	mov	r2, r6
 8003960:	6820      	ldr	r0, [r4, #0]
 8003962:	4641      	mov	r1, r8
 8003964:	f000 fab6 	bl	8003ed4 <memmove>
 8003968:	68a3      	ldr	r3, [r4, #8]
 800396a:	6822      	ldr	r2, [r4, #0]
 800396c:	1b9b      	subs	r3, r3, r6
 800396e:	4432      	add	r2, r6
 8003970:	60a3      	str	r3, [r4, #8]
 8003972:	6022      	str	r2, [r4, #0]
 8003974:	2000      	movs	r0, #0
 8003976:	e7db      	b.n	8003930 <__ssputs_r+0x58>
 8003978:	462a      	mov	r2, r5
 800397a:	f000 fb6f 	bl	800405c <_realloc_r>
 800397e:	4606      	mov	r6, r0
 8003980:	2800      	cmp	r0, #0
 8003982:	d1e1      	bne.n	8003948 <__ssputs_r+0x70>
 8003984:	6921      	ldr	r1, [r4, #16]
 8003986:	4650      	mov	r0, sl
 8003988:	f000 fabe 	bl	8003f08 <_free_r>
 800398c:	e7c7      	b.n	800391e <__ssputs_r+0x46>
	...

08003990 <_svfiprintf_r>:
 8003990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003994:	4698      	mov	r8, r3
 8003996:	898b      	ldrh	r3, [r1, #12]
 8003998:	061b      	lsls	r3, r3, #24
 800399a:	b09d      	sub	sp, #116	; 0x74
 800399c:	4607      	mov	r7, r0
 800399e:	460d      	mov	r5, r1
 80039a0:	4614      	mov	r4, r2
 80039a2:	d50e      	bpl.n	80039c2 <_svfiprintf_r+0x32>
 80039a4:	690b      	ldr	r3, [r1, #16]
 80039a6:	b963      	cbnz	r3, 80039c2 <_svfiprintf_r+0x32>
 80039a8:	2140      	movs	r1, #64	; 0x40
 80039aa:	f000 fafd 	bl	8003fa8 <_malloc_r>
 80039ae:	6028      	str	r0, [r5, #0]
 80039b0:	6128      	str	r0, [r5, #16]
 80039b2:	b920      	cbnz	r0, 80039be <_svfiprintf_r+0x2e>
 80039b4:	230c      	movs	r3, #12
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039bc:	e0d1      	b.n	8003b62 <_svfiprintf_r+0x1d2>
 80039be:	2340      	movs	r3, #64	; 0x40
 80039c0:	616b      	str	r3, [r5, #20]
 80039c2:	2300      	movs	r3, #0
 80039c4:	9309      	str	r3, [sp, #36]	; 0x24
 80039c6:	2320      	movs	r3, #32
 80039c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80039d0:	2330      	movs	r3, #48	; 0x30
 80039d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003b7c <_svfiprintf_r+0x1ec>
 80039d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039da:	f04f 0901 	mov.w	r9, #1
 80039de:	4623      	mov	r3, r4
 80039e0:	469a      	mov	sl, r3
 80039e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039e6:	b10a      	cbz	r2, 80039ec <_svfiprintf_r+0x5c>
 80039e8:	2a25      	cmp	r2, #37	; 0x25
 80039ea:	d1f9      	bne.n	80039e0 <_svfiprintf_r+0x50>
 80039ec:	ebba 0b04 	subs.w	fp, sl, r4
 80039f0:	d00b      	beq.n	8003a0a <_svfiprintf_r+0x7a>
 80039f2:	465b      	mov	r3, fp
 80039f4:	4622      	mov	r2, r4
 80039f6:	4629      	mov	r1, r5
 80039f8:	4638      	mov	r0, r7
 80039fa:	f7ff ff6d 	bl	80038d8 <__ssputs_r>
 80039fe:	3001      	adds	r0, #1
 8003a00:	f000 80aa 	beq.w	8003b58 <_svfiprintf_r+0x1c8>
 8003a04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a06:	445a      	add	r2, fp
 8003a08:	9209      	str	r2, [sp, #36]	; 0x24
 8003a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 80a2 	beq.w	8003b58 <_svfiprintf_r+0x1c8>
 8003a14:	2300      	movs	r3, #0
 8003a16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a1e:	f10a 0a01 	add.w	sl, sl, #1
 8003a22:	9304      	str	r3, [sp, #16]
 8003a24:	9307      	str	r3, [sp, #28]
 8003a26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a2a:	931a      	str	r3, [sp, #104]	; 0x68
 8003a2c:	4654      	mov	r4, sl
 8003a2e:	2205      	movs	r2, #5
 8003a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a34:	4851      	ldr	r0, [pc, #324]	; (8003b7c <_svfiprintf_r+0x1ec>)
 8003a36:	f7fc fbdb 	bl	80001f0 <memchr>
 8003a3a:	9a04      	ldr	r2, [sp, #16]
 8003a3c:	b9d8      	cbnz	r0, 8003a76 <_svfiprintf_r+0xe6>
 8003a3e:	06d0      	lsls	r0, r2, #27
 8003a40:	bf44      	itt	mi
 8003a42:	2320      	movmi	r3, #32
 8003a44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a48:	0711      	lsls	r1, r2, #28
 8003a4a:	bf44      	itt	mi
 8003a4c:	232b      	movmi	r3, #43	; 0x2b
 8003a4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a52:	f89a 3000 	ldrb.w	r3, [sl]
 8003a56:	2b2a      	cmp	r3, #42	; 0x2a
 8003a58:	d015      	beq.n	8003a86 <_svfiprintf_r+0xf6>
 8003a5a:	9a07      	ldr	r2, [sp, #28]
 8003a5c:	4654      	mov	r4, sl
 8003a5e:	2000      	movs	r0, #0
 8003a60:	f04f 0c0a 	mov.w	ip, #10
 8003a64:	4621      	mov	r1, r4
 8003a66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a6a:	3b30      	subs	r3, #48	; 0x30
 8003a6c:	2b09      	cmp	r3, #9
 8003a6e:	d94e      	bls.n	8003b0e <_svfiprintf_r+0x17e>
 8003a70:	b1b0      	cbz	r0, 8003aa0 <_svfiprintf_r+0x110>
 8003a72:	9207      	str	r2, [sp, #28]
 8003a74:	e014      	b.n	8003aa0 <_svfiprintf_r+0x110>
 8003a76:	eba0 0308 	sub.w	r3, r0, r8
 8003a7a:	fa09 f303 	lsl.w	r3, r9, r3
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	9304      	str	r3, [sp, #16]
 8003a82:	46a2      	mov	sl, r4
 8003a84:	e7d2      	b.n	8003a2c <_svfiprintf_r+0x9c>
 8003a86:	9b03      	ldr	r3, [sp, #12]
 8003a88:	1d19      	adds	r1, r3, #4
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	9103      	str	r1, [sp, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	bfbb      	ittet	lt
 8003a92:	425b      	neglt	r3, r3
 8003a94:	f042 0202 	orrlt.w	r2, r2, #2
 8003a98:	9307      	strge	r3, [sp, #28]
 8003a9a:	9307      	strlt	r3, [sp, #28]
 8003a9c:	bfb8      	it	lt
 8003a9e:	9204      	strlt	r2, [sp, #16]
 8003aa0:	7823      	ldrb	r3, [r4, #0]
 8003aa2:	2b2e      	cmp	r3, #46	; 0x2e
 8003aa4:	d10c      	bne.n	8003ac0 <_svfiprintf_r+0x130>
 8003aa6:	7863      	ldrb	r3, [r4, #1]
 8003aa8:	2b2a      	cmp	r3, #42	; 0x2a
 8003aaa:	d135      	bne.n	8003b18 <_svfiprintf_r+0x188>
 8003aac:	9b03      	ldr	r3, [sp, #12]
 8003aae:	1d1a      	adds	r2, r3, #4
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	9203      	str	r2, [sp, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bfb8      	it	lt
 8003ab8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003abc:	3402      	adds	r4, #2
 8003abe:	9305      	str	r3, [sp, #20]
 8003ac0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b8c <_svfiprintf_r+0x1fc>
 8003ac4:	7821      	ldrb	r1, [r4, #0]
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	4650      	mov	r0, sl
 8003aca:	f7fc fb91 	bl	80001f0 <memchr>
 8003ace:	b140      	cbz	r0, 8003ae2 <_svfiprintf_r+0x152>
 8003ad0:	2340      	movs	r3, #64	; 0x40
 8003ad2:	eba0 000a 	sub.w	r0, r0, sl
 8003ad6:	fa03 f000 	lsl.w	r0, r3, r0
 8003ada:	9b04      	ldr	r3, [sp, #16]
 8003adc:	4303      	orrs	r3, r0
 8003ade:	3401      	adds	r4, #1
 8003ae0:	9304      	str	r3, [sp, #16]
 8003ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ae6:	4826      	ldr	r0, [pc, #152]	; (8003b80 <_svfiprintf_r+0x1f0>)
 8003ae8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003aec:	2206      	movs	r2, #6
 8003aee:	f7fc fb7f 	bl	80001f0 <memchr>
 8003af2:	2800      	cmp	r0, #0
 8003af4:	d038      	beq.n	8003b68 <_svfiprintf_r+0x1d8>
 8003af6:	4b23      	ldr	r3, [pc, #140]	; (8003b84 <_svfiprintf_r+0x1f4>)
 8003af8:	bb1b      	cbnz	r3, 8003b42 <_svfiprintf_r+0x1b2>
 8003afa:	9b03      	ldr	r3, [sp, #12]
 8003afc:	3307      	adds	r3, #7
 8003afe:	f023 0307 	bic.w	r3, r3, #7
 8003b02:	3308      	adds	r3, #8
 8003b04:	9303      	str	r3, [sp, #12]
 8003b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b08:	4433      	add	r3, r6
 8003b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8003b0c:	e767      	b.n	80039de <_svfiprintf_r+0x4e>
 8003b0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b12:	460c      	mov	r4, r1
 8003b14:	2001      	movs	r0, #1
 8003b16:	e7a5      	b.n	8003a64 <_svfiprintf_r+0xd4>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	3401      	adds	r4, #1
 8003b1c:	9305      	str	r3, [sp, #20]
 8003b1e:	4619      	mov	r1, r3
 8003b20:	f04f 0c0a 	mov.w	ip, #10
 8003b24:	4620      	mov	r0, r4
 8003b26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b2a:	3a30      	subs	r2, #48	; 0x30
 8003b2c:	2a09      	cmp	r2, #9
 8003b2e:	d903      	bls.n	8003b38 <_svfiprintf_r+0x1a8>
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0c5      	beq.n	8003ac0 <_svfiprintf_r+0x130>
 8003b34:	9105      	str	r1, [sp, #20]
 8003b36:	e7c3      	b.n	8003ac0 <_svfiprintf_r+0x130>
 8003b38:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b3c:	4604      	mov	r4, r0
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e7f0      	b.n	8003b24 <_svfiprintf_r+0x194>
 8003b42:	ab03      	add	r3, sp, #12
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	462a      	mov	r2, r5
 8003b48:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <_svfiprintf_r+0x1f8>)
 8003b4a:	a904      	add	r1, sp, #16
 8003b4c:	4638      	mov	r0, r7
 8003b4e:	f3af 8000 	nop.w
 8003b52:	1c42      	adds	r2, r0, #1
 8003b54:	4606      	mov	r6, r0
 8003b56:	d1d6      	bne.n	8003b06 <_svfiprintf_r+0x176>
 8003b58:	89ab      	ldrh	r3, [r5, #12]
 8003b5a:	065b      	lsls	r3, r3, #25
 8003b5c:	f53f af2c 	bmi.w	80039b8 <_svfiprintf_r+0x28>
 8003b60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b62:	b01d      	add	sp, #116	; 0x74
 8003b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b68:	ab03      	add	r3, sp, #12
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	462a      	mov	r2, r5
 8003b6e:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <_svfiprintf_r+0x1f8>)
 8003b70:	a904      	add	r1, sp, #16
 8003b72:	4638      	mov	r0, r7
 8003b74:	f000 f87a 	bl	8003c6c <_printf_i>
 8003b78:	e7eb      	b.n	8003b52 <_svfiprintf_r+0x1c2>
 8003b7a:	bf00      	nop
 8003b7c:	08004130 	.word	0x08004130
 8003b80:	0800413a 	.word	0x0800413a
 8003b84:	00000000 	.word	0x00000000
 8003b88:	080038d9 	.word	0x080038d9
 8003b8c:	08004136 	.word	0x08004136

08003b90 <_printf_common>:
 8003b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b94:	4616      	mov	r6, r2
 8003b96:	4699      	mov	r9, r3
 8003b98:	688a      	ldr	r2, [r1, #8]
 8003b9a:	690b      	ldr	r3, [r1, #16]
 8003b9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	bfb8      	it	lt
 8003ba4:	4613      	movlt	r3, r2
 8003ba6:	6033      	str	r3, [r6, #0]
 8003ba8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bac:	4607      	mov	r7, r0
 8003bae:	460c      	mov	r4, r1
 8003bb0:	b10a      	cbz	r2, 8003bb6 <_printf_common+0x26>
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	6033      	str	r3, [r6, #0]
 8003bb6:	6823      	ldr	r3, [r4, #0]
 8003bb8:	0699      	lsls	r1, r3, #26
 8003bba:	bf42      	ittt	mi
 8003bbc:	6833      	ldrmi	r3, [r6, #0]
 8003bbe:	3302      	addmi	r3, #2
 8003bc0:	6033      	strmi	r3, [r6, #0]
 8003bc2:	6825      	ldr	r5, [r4, #0]
 8003bc4:	f015 0506 	ands.w	r5, r5, #6
 8003bc8:	d106      	bne.n	8003bd8 <_printf_common+0x48>
 8003bca:	f104 0a19 	add.w	sl, r4, #25
 8003bce:	68e3      	ldr	r3, [r4, #12]
 8003bd0:	6832      	ldr	r2, [r6, #0]
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	42ab      	cmp	r3, r5
 8003bd6:	dc26      	bgt.n	8003c26 <_printf_common+0x96>
 8003bd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bdc:	1e13      	subs	r3, r2, #0
 8003bde:	6822      	ldr	r2, [r4, #0]
 8003be0:	bf18      	it	ne
 8003be2:	2301      	movne	r3, #1
 8003be4:	0692      	lsls	r2, r2, #26
 8003be6:	d42b      	bmi.n	8003c40 <_printf_common+0xb0>
 8003be8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bec:	4649      	mov	r1, r9
 8003bee:	4638      	mov	r0, r7
 8003bf0:	47c0      	blx	r8
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	d01e      	beq.n	8003c34 <_printf_common+0xa4>
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	68e5      	ldr	r5, [r4, #12]
 8003bfa:	6832      	ldr	r2, [r6, #0]
 8003bfc:	f003 0306 	and.w	r3, r3, #6
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	bf08      	it	eq
 8003c04:	1aad      	subeq	r5, r5, r2
 8003c06:	68a3      	ldr	r3, [r4, #8]
 8003c08:	6922      	ldr	r2, [r4, #16]
 8003c0a:	bf0c      	ite	eq
 8003c0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c10:	2500      	movne	r5, #0
 8003c12:	4293      	cmp	r3, r2
 8003c14:	bfc4      	itt	gt
 8003c16:	1a9b      	subgt	r3, r3, r2
 8003c18:	18ed      	addgt	r5, r5, r3
 8003c1a:	2600      	movs	r6, #0
 8003c1c:	341a      	adds	r4, #26
 8003c1e:	42b5      	cmp	r5, r6
 8003c20:	d11a      	bne.n	8003c58 <_printf_common+0xc8>
 8003c22:	2000      	movs	r0, #0
 8003c24:	e008      	b.n	8003c38 <_printf_common+0xa8>
 8003c26:	2301      	movs	r3, #1
 8003c28:	4652      	mov	r2, sl
 8003c2a:	4649      	mov	r1, r9
 8003c2c:	4638      	mov	r0, r7
 8003c2e:	47c0      	blx	r8
 8003c30:	3001      	adds	r0, #1
 8003c32:	d103      	bne.n	8003c3c <_printf_common+0xac>
 8003c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c3c:	3501      	adds	r5, #1
 8003c3e:	e7c6      	b.n	8003bce <_printf_common+0x3e>
 8003c40:	18e1      	adds	r1, r4, r3
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	2030      	movs	r0, #48	; 0x30
 8003c46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c4a:	4422      	add	r2, r4
 8003c4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c54:	3302      	adds	r3, #2
 8003c56:	e7c7      	b.n	8003be8 <_printf_common+0x58>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	4622      	mov	r2, r4
 8003c5c:	4649      	mov	r1, r9
 8003c5e:	4638      	mov	r0, r7
 8003c60:	47c0      	blx	r8
 8003c62:	3001      	adds	r0, #1
 8003c64:	d0e6      	beq.n	8003c34 <_printf_common+0xa4>
 8003c66:	3601      	adds	r6, #1
 8003c68:	e7d9      	b.n	8003c1e <_printf_common+0x8e>
	...

08003c6c <_printf_i>:
 8003c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c70:	460c      	mov	r4, r1
 8003c72:	4691      	mov	r9, r2
 8003c74:	7e27      	ldrb	r7, [r4, #24]
 8003c76:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c78:	2f78      	cmp	r7, #120	; 0x78
 8003c7a:	4680      	mov	r8, r0
 8003c7c:	469a      	mov	sl, r3
 8003c7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c82:	d807      	bhi.n	8003c94 <_printf_i+0x28>
 8003c84:	2f62      	cmp	r7, #98	; 0x62
 8003c86:	d80a      	bhi.n	8003c9e <_printf_i+0x32>
 8003c88:	2f00      	cmp	r7, #0
 8003c8a:	f000 80d8 	beq.w	8003e3e <_printf_i+0x1d2>
 8003c8e:	2f58      	cmp	r7, #88	; 0x58
 8003c90:	f000 80a3 	beq.w	8003dda <_printf_i+0x16e>
 8003c94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c9c:	e03a      	b.n	8003d14 <_printf_i+0xa8>
 8003c9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ca2:	2b15      	cmp	r3, #21
 8003ca4:	d8f6      	bhi.n	8003c94 <_printf_i+0x28>
 8003ca6:	a001      	add	r0, pc, #4	; (adr r0, 8003cac <_printf_i+0x40>)
 8003ca8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003cac:	08003d05 	.word	0x08003d05
 8003cb0:	08003d19 	.word	0x08003d19
 8003cb4:	08003c95 	.word	0x08003c95
 8003cb8:	08003c95 	.word	0x08003c95
 8003cbc:	08003c95 	.word	0x08003c95
 8003cc0:	08003c95 	.word	0x08003c95
 8003cc4:	08003d19 	.word	0x08003d19
 8003cc8:	08003c95 	.word	0x08003c95
 8003ccc:	08003c95 	.word	0x08003c95
 8003cd0:	08003c95 	.word	0x08003c95
 8003cd4:	08003c95 	.word	0x08003c95
 8003cd8:	08003e25 	.word	0x08003e25
 8003cdc:	08003d49 	.word	0x08003d49
 8003ce0:	08003e07 	.word	0x08003e07
 8003ce4:	08003c95 	.word	0x08003c95
 8003ce8:	08003c95 	.word	0x08003c95
 8003cec:	08003e47 	.word	0x08003e47
 8003cf0:	08003c95 	.word	0x08003c95
 8003cf4:	08003d49 	.word	0x08003d49
 8003cf8:	08003c95 	.word	0x08003c95
 8003cfc:	08003c95 	.word	0x08003c95
 8003d00:	08003e0f 	.word	0x08003e0f
 8003d04:	680b      	ldr	r3, [r1, #0]
 8003d06:	1d1a      	adds	r2, r3, #4
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	600a      	str	r2, [r1, #0]
 8003d0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0a3      	b.n	8003e60 <_printf_i+0x1f4>
 8003d18:	6825      	ldr	r5, [r4, #0]
 8003d1a:	6808      	ldr	r0, [r1, #0]
 8003d1c:	062e      	lsls	r6, r5, #24
 8003d1e:	f100 0304 	add.w	r3, r0, #4
 8003d22:	d50a      	bpl.n	8003d3a <_printf_i+0xce>
 8003d24:	6805      	ldr	r5, [r0, #0]
 8003d26:	600b      	str	r3, [r1, #0]
 8003d28:	2d00      	cmp	r5, #0
 8003d2a:	da03      	bge.n	8003d34 <_printf_i+0xc8>
 8003d2c:	232d      	movs	r3, #45	; 0x2d
 8003d2e:	426d      	negs	r5, r5
 8003d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d34:	485e      	ldr	r0, [pc, #376]	; (8003eb0 <_printf_i+0x244>)
 8003d36:	230a      	movs	r3, #10
 8003d38:	e019      	b.n	8003d6e <_printf_i+0x102>
 8003d3a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d3e:	6805      	ldr	r5, [r0, #0]
 8003d40:	600b      	str	r3, [r1, #0]
 8003d42:	bf18      	it	ne
 8003d44:	b22d      	sxthne	r5, r5
 8003d46:	e7ef      	b.n	8003d28 <_printf_i+0xbc>
 8003d48:	680b      	ldr	r3, [r1, #0]
 8003d4a:	6825      	ldr	r5, [r4, #0]
 8003d4c:	1d18      	adds	r0, r3, #4
 8003d4e:	6008      	str	r0, [r1, #0]
 8003d50:	0628      	lsls	r0, r5, #24
 8003d52:	d501      	bpl.n	8003d58 <_printf_i+0xec>
 8003d54:	681d      	ldr	r5, [r3, #0]
 8003d56:	e002      	b.n	8003d5e <_printf_i+0xf2>
 8003d58:	0669      	lsls	r1, r5, #25
 8003d5a:	d5fb      	bpl.n	8003d54 <_printf_i+0xe8>
 8003d5c:	881d      	ldrh	r5, [r3, #0]
 8003d5e:	4854      	ldr	r0, [pc, #336]	; (8003eb0 <_printf_i+0x244>)
 8003d60:	2f6f      	cmp	r7, #111	; 0x6f
 8003d62:	bf0c      	ite	eq
 8003d64:	2308      	moveq	r3, #8
 8003d66:	230a      	movne	r3, #10
 8003d68:	2100      	movs	r1, #0
 8003d6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d6e:	6866      	ldr	r6, [r4, #4]
 8003d70:	60a6      	str	r6, [r4, #8]
 8003d72:	2e00      	cmp	r6, #0
 8003d74:	bfa2      	ittt	ge
 8003d76:	6821      	ldrge	r1, [r4, #0]
 8003d78:	f021 0104 	bicge.w	r1, r1, #4
 8003d7c:	6021      	strge	r1, [r4, #0]
 8003d7e:	b90d      	cbnz	r5, 8003d84 <_printf_i+0x118>
 8003d80:	2e00      	cmp	r6, #0
 8003d82:	d04d      	beq.n	8003e20 <_printf_i+0x1b4>
 8003d84:	4616      	mov	r6, r2
 8003d86:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d8a:	fb03 5711 	mls	r7, r3, r1, r5
 8003d8e:	5dc7      	ldrb	r7, [r0, r7]
 8003d90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d94:	462f      	mov	r7, r5
 8003d96:	42bb      	cmp	r3, r7
 8003d98:	460d      	mov	r5, r1
 8003d9a:	d9f4      	bls.n	8003d86 <_printf_i+0x11a>
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d10b      	bne.n	8003db8 <_printf_i+0x14c>
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	07df      	lsls	r7, r3, #31
 8003da4:	d508      	bpl.n	8003db8 <_printf_i+0x14c>
 8003da6:	6923      	ldr	r3, [r4, #16]
 8003da8:	6861      	ldr	r1, [r4, #4]
 8003daa:	4299      	cmp	r1, r3
 8003dac:	bfde      	ittt	le
 8003dae:	2330      	movle	r3, #48	; 0x30
 8003db0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003db4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003db8:	1b92      	subs	r2, r2, r6
 8003dba:	6122      	str	r2, [r4, #16]
 8003dbc:	f8cd a000 	str.w	sl, [sp]
 8003dc0:	464b      	mov	r3, r9
 8003dc2:	aa03      	add	r2, sp, #12
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	4640      	mov	r0, r8
 8003dc8:	f7ff fee2 	bl	8003b90 <_printf_common>
 8003dcc:	3001      	adds	r0, #1
 8003dce:	d14c      	bne.n	8003e6a <_printf_i+0x1fe>
 8003dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dd4:	b004      	add	sp, #16
 8003dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dda:	4835      	ldr	r0, [pc, #212]	; (8003eb0 <_printf_i+0x244>)
 8003ddc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	680e      	ldr	r6, [r1, #0]
 8003de4:	061f      	lsls	r7, r3, #24
 8003de6:	f856 5b04 	ldr.w	r5, [r6], #4
 8003dea:	600e      	str	r6, [r1, #0]
 8003dec:	d514      	bpl.n	8003e18 <_printf_i+0x1ac>
 8003dee:	07d9      	lsls	r1, r3, #31
 8003df0:	bf44      	itt	mi
 8003df2:	f043 0320 	orrmi.w	r3, r3, #32
 8003df6:	6023      	strmi	r3, [r4, #0]
 8003df8:	b91d      	cbnz	r5, 8003e02 <_printf_i+0x196>
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	f023 0320 	bic.w	r3, r3, #32
 8003e00:	6023      	str	r3, [r4, #0]
 8003e02:	2310      	movs	r3, #16
 8003e04:	e7b0      	b.n	8003d68 <_printf_i+0xfc>
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	f043 0320 	orr.w	r3, r3, #32
 8003e0c:	6023      	str	r3, [r4, #0]
 8003e0e:	2378      	movs	r3, #120	; 0x78
 8003e10:	4828      	ldr	r0, [pc, #160]	; (8003eb4 <_printf_i+0x248>)
 8003e12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e16:	e7e3      	b.n	8003de0 <_printf_i+0x174>
 8003e18:	065e      	lsls	r6, r3, #25
 8003e1a:	bf48      	it	mi
 8003e1c:	b2ad      	uxthmi	r5, r5
 8003e1e:	e7e6      	b.n	8003dee <_printf_i+0x182>
 8003e20:	4616      	mov	r6, r2
 8003e22:	e7bb      	b.n	8003d9c <_printf_i+0x130>
 8003e24:	680b      	ldr	r3, [r1, #0]
 8003e26:	6826      	ldr	r6, [r4, #0]
 8003e28:	6960      	ldr	r0, [r4, #20]
 8003e2a:	1d1d      	adds	r5, r3, #4
 8003e2c:	600d      	str	r5, [r1, #0]
 8003e2e:	0635      	lsls	r5, r6, #24
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	d501      	bpl.n	8003e38 <_printf_i+0x1cc>
 8003e34:	6018      	str	r0, [r3, #0]
 8003e36:	e002      	b.n	8003e3e <_printf_i+0x1d2>
 8003e38:	0671      	lsls	r1, r6, #25
 8003e3a:	d5fb      	bpl.n	8003e34 <_printf_i+0x1c8>
 8003e3c:	8018      	strh	r0, [r3, #0]
 8003e3e:	2300      	movs	r3, #0
 8003e40:	6123      	str	r3, [r4, #16]
 8003e42:	4616      	mov	r6, r2
 8003e44:	e7ba      	b.n	8003dbc <_printf_i+0x150>
 8003e46:	680b      	ldr	r3, [r1, #0]
 8003e48:	1d1a      	adds	r2, r3, #4
 8003e4a:	600a      	str	r2, [r1, #0]
 8003e4c:	681e      	ldr	r6, [r3, #0]
 8003e4e:	6862      	ldr	r2, [r4, #4]
 8003e50:	2100      	movs	r1, #0
 8003e52:	4630      	mov	r0, r6
 8003e54:	f7fc f9cc 	bl	80001f0 <memchr>
 8003e58:	b108      	cbz	r0, 8003e5e <_printf_i+0x1f2>
 8003e5a:	1b80      	subs	r0, r0, r6
 8003e5c:	6060      	str	r0, [r4, #4]
 8003e5e:	6863      	ldr	r3, [r4, #4]
 8003e60:	6123      	str	r3, [r4, #16]
 8003e62:	2300      	movs	r3, #0
 8003e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e68:	e7a8      	b.n	8003dbc <_printf_i+0x150>
 8003e6a:	6923      	ldr	r3, [r4, #16]
 8003e6c:	4632      	mov	r2, r6
 8003e6e:	4649      	mov	r1, r9
 8003e70:	4640      	mov	r0, r8
 8003e72:	47d0      	blx	sl
 8003e74:	3001      	adds	r0, #1
 8003e76:	d0ab      	beq.n	8003dd0 <_printf_i+0x164>
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	079b      	lsls	r3, r3, #30
 8003e7c:	d413      	bmi.n	8003ea6 <_printf_i+0x23a>
 8003e7e:	68e0      	ldr	r0, [r4, #12]
 8003e80:	9b03      	ldr	r3, [sp, #12]
 8003e82:	4298      	cmp	r0, r3
 8003e84:	bfb8      	it	lt
 8003e86:	4618      	movlt	r0, r3
 8003e88:	e7a4      	b.n	8003dd4 <_printf_i+0x168>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	4632      	mov	r2, r6
 8003e8e:	4649      	mov	r1, r9
 8003e90:	4640      	mov	r0, r8
 8003e92:	47d0      	blx	sl
 8003e94:	3001      	adds	r0, #1
 8003e96:	d09b      	beq.n	8003dd0 <_printf_i+0x164>
 8003e98:	3501      	adds	r5, #1
 8003e9a:	68e3      	ldr	r3, [r4, #12]
 8003e9c:	9903      	ldr	r1, [sp, #12]
 8003e9e:	1a5b      	subs	r3, r3, r1
 8003ea0:	42ab      	cmp	r3, r5
 8003ea2:	dcf2      	bgt.n	8003e8a <_printf_i+0x21e>
 8003ea4:	e7eb      	b.n	8003e7e <_printf_i+0x212>
 8003ea6:	2500      	movs	r5, #0
 8003ea8:	f104 0619 	add.w	r6, r4, #25
 8003eac:	e7f5      	b.n	8003e9a <_printf_i+0x22e>
 8003eae:	bf00      	nop
 8003eb0:	08004141 	.word	0x08004141
 8003eb4:	08004152 	.word	0x08004152

08003eb8 <memcpy>:
 8003eb8:	440a      	add	r2, r1
 8003eba:	4291      	cmp	r1, r2
 8003ebc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003ec0:	d100      	bne.n	8003ec4 <memcpy+0xc>
 8003ec2:	4770      	bx	lr
 8003ec4:	b510      	push	{r4, lr}
 8003ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ece:	4291      	cmp	r1, r2
 8003ed0:	d1f9      	bne.n	8003ec6 <memcpy+0xe>
 8003ed2:	bd10      	pop	{r4, pc}

08003ed4 <memmove>:
 8003ed4:	4288      	cmp	r0, r1
 8003ed6:	b510      	push	{r4, lr}
 8003ed8:	eb01 0402 	add.w	r4, r1, r2
 8003edc:	d902      	bls.n	8003ee4 <memmove+0x10>
 8003ede:	4284      	cmp	r4, r0
 8003ee0:	4623      	mov	r3, r4
 8003ee2:	d807      	bhi.n	8003ef4 <memmove+0x20>
 8003ee4:	1e43      	subs	r3, r0, #1
 8003ee6:	42a1      	cmp	r1, r4
 8003ee8:	d008      	beq.n	8003efc <memmove+0x28>
 8003eea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003eee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ef2:	e7f8      	b.n	8003ee6 <memmove+0x12>
 8003ef4:	4402      	add	r2, r0
 8003ef6:	4601      	mov	r1, r0
 8003ef8:	428a      	cmp	r2, r1
 8003efa:	d100      	bne.n	8003efe <memmove+0x2a>
 8003efc:	bd10      	pop	{r4, pc}
 8003efe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f06:	e7f7      	b.n	8003ef8 <memmove+0x24>

08003f08 <_free_r>:
 8003f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f0a:	2900      	cmp	r1, #0
 8003f0c:	d048      	beq.n	8003fa0 <_free_r+0x98>
 8003f0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f12:	9001      	str	r0, [sp, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f1a1 0404 	sub.w	r4, r1, #4
 8003f1a:	bfb8      	it	lt
 8003f1c:	18e4      	addlt	r4, r4, r3
 8003f1e:	f000 f8d3 	bl	80040c8 <__malloc_lock>
 8003f22:	4a20      	ldr	r2, [pc, #128]	; (8003fa4 <_free_r+0x9c>)
 8003f24:	9801      	ldr	r0, [sp, #4]
 8003f26:	6813      	ldr	r3, [r2, #0]
 8003f28:	4615      	mov	r5, r2
 8003f2a:	b933      	cbnz	r3, 8003f3a <_free_r+0x32>
 8003f2c:	6063      	str	r3, [r4, #4]
 8003f2e:	6014      	str	r4, [r2, #0]
 8003f30:	b003      	add	sp, #12
 8003f32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f36:	f000 b8cd 	b.w	80040d4 <__malloc_unlock>
 8003f3a:	42a3      	cmp	r3, r4
 8003f3c:	d90b      	bls.n	8003f56 <_free_r+0x4e>
 8003f3e:	6821      	ldr	r1, [r4, #0]
 8003f40:	1862      	adds	r2, r4, r1
 8003f42:	4293      	cmp	r3, r2
 8003f44:	bf04      	itt	eq
 8003f46:	681a      	ldreq	r2, [r3, #0]
 8003f48:	685b      	ldreq	r3, [r3, #4]
 8003f4a:	6063      	str	r3, [r4, #4]
 8003f4c:	bf04      	itt	eq
 8003f4e:	1852      	addeq	r2, r2, r1
 8003f50:	6022      	streq	r2, [r4, #0]
 8003f52:	602c      	str	r4, [r5, #0]
 8003f54:	e7ec      	b.n	8003f30 <_free_r+0x28>
 8003f56:	461a      	mov	r2, r3
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	b10b      	cbz	r3, 8003f60 <_free_r+0x58>
 8003f5c:	42a3      	cmp	r3, r4
 8003f5e:	d9fa      	bls.n	8003f56 <_free_r+0x4e>
 8003f60:	6811      	ldr	r1, [r2, #0]
 8003f62:	1855      	adds	r5, r2, r1
 8003f64:	42a5      	cmp	r5, r4
 8003f66:	d10b      	bne.n	8003f80 <_free_r+0x78>
 8003f68:	6824      	ldr	r4, [r4, #0]
 8003f6a:	4421      	add	r1, r4
 8003f6c:	1854      	adds	r4, r2, r1
 8003f6e:	42a3      	cmp	r3, r4
 8003f70:	6011      	str	r1, [r2, #0]
 8003f72:	d1dd      	bne.n	8003f30 <_free_r+0x28>
 8003f74:	681c      	ldr	r4, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	6053      	str	r3, [r2, #4]
 8003f7a:	4421      	add	r1, r4
 8003f7c:	6011      	str	r1, [r2, #0]
 8003f7e:	e7d7      	b.n	8003f30 <_free_r+0x28>
 8003f80:	d902      	bls.n	8003f88 <_free_r+0x80>
 8003f82:	230c      	movs	r3, #12
 8003f84:	6003      	str	r3, [r0, #0]
 8003f86:	e7d3      	b.n	8003f30 <_free_r+0x28>
 8003f88:	6825      	ldr	r5, [r4, #0]
 8003f8a:	1961      	adds	r1, r4, r5
 8003f8c:	428b      	cmp	r3, r1
 8003f8e:	bf04      	itt	eq
 8003f90:	6819      	ldreq	r1, [r3, #0]
 8003f92:	685b      	ldreq	r3, [r3, #4]
 8003f94:	6063      	str	r3, [r4, #4]
 8003f96:	bf04      	itt	eq
 8003f98:	1949      	addeq	r1, r1, r5
 8003f9a:	6021      	streq	r1, [r4, #0]
 8003f9c:	6054      	str	r4, [r2, #4]
 8003f9e:	e7c7      	b.n	8003f30 <_free_r+0x28>
 8003fa0:	b003      	add	sp, #12
 8003fa2:	bd30      	pop	{r4, r5, pc}
 8003fa4:	20000090 	.word	0x20000090

08003fa8 <_malloc_r>:
 8003fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003faa:	1ccd      	adds	r5, r1, #3
 8003fac:	f025 0503 	bic.w	r5, r5, #3
 8003fb0:	3508      	adds	r5, #8
 8003fb2:	2d0c      	cmp	r5, #12
 8003fb4:	bf38      	it	cc
 8003fb6:	250c      	movcc	r5, #12
 8003fb8:	2d00      	cmp	r5, #0
 8003fba:	4606      	mov	r6, r0
 8003fbc:	db01      	blt.n	8003fc2 <_malloc_r+0x1a>
 8003fbe:	42a9      	cmp	r1, r5
 8003fc0:	d903      	bls.n	8003fca <_malloc_r+0x22>
 8003fc2:	230c      	movs	r3, #12
 8003fc4:	6033      	str	r3, [r6, #0]
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fca:	f000 f87d 	bl	80040c8 <__malloc_lock>
 8003fce:	4921      	ldr	r1, [pc, #132]	; (8004054 <_malloc_r+0xac>)
 8003fd0:	680a      	ldr	r2, [r1, #0]
 8003fd2:	4614      	mov	r4, r2
 8003fd4:	b99c      	cbnz	r4, 8003ffe <_malloc_r+0x56>
 8003fd6:	4f20      	ldr	r7, [pc, #128]	; (8004058 <_malloc_r+0xb0>)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	b923      	cbnz	r3, 8003fe6 <_malloc_r+0x3e>
 8003fdc:	4621      	mov	r1, r4
 8003fde:	4630      	mov	r0, r6
 8003fe0:	f000 f862 	bl	80040a8 <_sbrk_r>
 8003fe4:	6038      	str	r0, [r7, #0]
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	4630      	mov	r0, r6
 8003fea:	f000 f85d 	bl	80040a8 <_sbrk_r>
 8003fee:	1c43      	adds	r3, r0, #1
 8003ff0:	d123      	bne.n	800403a <_malloc_r+0x92>
 8003ff2:	230c      	movs	r3, #12
 8003ff4:	6033      	str	r3, [r6, #0]
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	f000 f86c 	bl	80040d4 <__malloc_unlock>
 8003ffc:	e7e3      	b.n	8003fc6 <_malloc_r+0x1e>
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	1b5b      	subs	r3, r3, r5
 8004002:	d417      	bmi.n	8004034 <_malloc_r+0x8c>
 8004004:	2b0b      	cmp	r3, #11
 8004006:	d903      	bls.n	8004010 <_malloc_r+0x68>
 8004008:	6023      	str	r3, [r4, #0]
 800400a:	441c      	add	r4, r3
 800400c:	6025      	str	r5, [r4, #0]
 800400e:	e004      	b.n	800401a <_malloc_r+0x72>
 8004010:	6863      	ldr	r3, [r4, #4]
 8004012:	42a2      	cmp	r2, r4
 8004014:	bf0c      	ite	eq
 8004016:	600b      	streq	r3, [r1, #0]
 8004018:	6053      	strne	r3, [r2, #4]
 800401a:	4630      	mov	r0, r6
 800401c:	f000 f85a 	bl	80040d4 <__malloc_unlock>
 8004020:	f104 000b 	add.w	r0, r4, #11
 8004024:	1d23      	adds	r3, r4, #4
 8004026:	f020 0007 	bic.w	r0, r0, #7
 800402a:	1ac2      	subs	r2, r0, r3
 800402c:	d0cc      	beq.n	8003fc8 <_malloc_r+0x20>
 800402e:	1a1b      	subs	r3, r3, r0
 8004030:	50a3      	str	r3, [r4, r2]
 8004032:	e7c9      	b.n	8003fc8 <_malloc_r+0x20>
 8004034:	4622      	mov	r2, r4
 8004036:	6864      	ldr	r4, [r4, #4]
 8004038:	e7cc      	b.n	8003fd4 <_malloc_r+0x2c>
 800403a:	1cc4      	adds	r4, r0, #3
 800403c:	f024 0403 	bic.w	r4, r4, #3
 8004040:	42a0      	cmp	r0, r4
 8004042:	d0e3      	beq.n	800400c <_malloc_r+0x64>
 8004044:	1a21      	subs	r1, r4, r0
 8004046:	4630      	mov	r0, r6
 8004048:	f000 f82e 	bl	80040a8 <_sbrk_r>
 800404c:	3001      	adds	r0, #1
 800404e:	d1dd      	bne.n	800400c <_malloc_r+0x64>
 8004050:	e7cf      	b.n	8003ff2 <_malloc_r+0x4a>
 8004052:	bf00      	nop
 8004054:	20000090 	.word	0x20000090
 8004058:	20000094 	.word	0x20000094

0800405c <_realloc_r>:
 800405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405e:	4607      	mov	r7, r0
 8004060:	4614      	mov	r4, r2
 8004062:	460e      	mov	r6, r1
 8004064:	b921      	cbnz	r1, 8004070 <_realloc_r+0x14>
 8004066:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800406a:	4611      	mov	r1, r2
 800406c:	f7ff bf9c 	b.w	8003fa8 <_malloc_r>
 8004070:	b922      	cbnz	r2, 800407c <_realloc_r+0x20>
 8004072:	f7ff ff49 	bl	8003f08 <_free_r>
 8004076:	4625      	mov	r5, r4
 8004078:	4628      	mov	r0, r5
 800407a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800407c:	f000 f830 	bl	80040e0 <_malloc_usable_size_r>
 8004080:	42a0      	cmp	r0, r4
 8004082:	d20f      	bcs.n	80040a4 <_realloc_r+0x48>
 8004084:	4621      	mov	r1, r4
 8004086:	4638      	mov	r0, r7
 8004088:	f7ff ff8e 	bl	8003fa8 <_malloc_r>
 800408c:	4605      	mov	r5, r0
 800408e:	2800      	cmp	r0, #0
 8004090:	d0f2      	beq.n	8004078 <_realloc_r+0x1c>
 8004092:	4631      	mov	r1, r6
 8004094:	4622      	mov	r2, r4
 8004096:	f7ff ff0f 	bl	8003eb8 <memcpy>
 800409a:	4631      	mov	r1, r6
 800409c:	4638      	mov	r0, r7
 800409e:	f7ff ff33 	bl	8003f08 <_free_r>
 80040a2:	e7e9      	b.n	8004078 <_realloc_r+0x1c>
 80040a4:	4635      	mov	r5, r6
 80040a6:	e7e7      	b.n	8004078 <_realloc_r+0x1c>

080040a8 <_sbrk_r>:
 80040a8:	b538      	push	{r3, r4, r5, lr}
 80040aa:	4d06      	ldr	r5, [pc, #24]	; (80040c4 <_sbrk_r+0x1c>)
 80040ac:	2300      	movs	r3, #0
 80040ae:	4604      	mov	r4, r0
 80040b0:	4608      	mov	r0, r1
 80040b2:	602b      	str	r3, [r5, #0]
 80040b4:	f7fc fd98 	bl	8000be8 <_sbrk>
 80040b8:	1c43      	adds	r3, r0, #1
 80040ba:	d102      	bne.n	80040c2 <_sbrk_r+0x1a>
 80040bc:	682b      	ldr	r3, [r5, #0]
 80040be:	b103      	cbz	r3, 80040c2 <_sbrk_r+0x1a>
 80040c0:	6023      	str	r3, [r4, #0]
 80040c2:	bd38      	pop	{r3, r4, r5, pc}
 80040c4:	20000204 	.word	0x20000204

080040c8 <__malloc_lock>:
 80040c8:	4801      	ldr	r0, [pc, #4]	; (80040d0 <__malloc_lock+0x8>)
 80040ca:	f000 b811 	b.w	80040f0 <__retarget_lock_acquire_recursive>
 80040ce:	bf00      	nop
 80040d0:	2000020c 	.word	0x2000020c

080040d4 <__malloc_unlock>:
 80040d4:	4801      	ldr	r0, [pc, #4]	; (80040dc <__malloc_unlock+0x8>)
 80040d6:	f000 b80c 	b.w	80040f2 <__retarget_lock_release_recursive>
 80040da:	bf00      	nop
 80040dc:	2000020c 	.word	0x2000020c

080040e0 <_malloc_usable_size_r>:
 80040e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040e4:	1f18      	subs	r0, r3, #4
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bfbc      	itt	lt
 80040ea:	580b      	ldrlt	r3, [r1, r0]
 80040ec:	18c0      	addlt	r0, r0, r3
 80040ee:	4770      	bx	lr

080040f0 <__retarget_lock_acquire_recursive>:
 80040f0:	4770      	bx	lr

080040f2 <__retarget_lock_release_recursive>:
 80040f2:	4770      	bx	lr

080040f4 <_init>:
 80040f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f6:	bf00      	nop
 80040f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fa:	bc08      	pop	{r3}
 80040fc:	469e      	mov	lr, r3
 80040fe:	4770      	bx	lr

08004100 <_fini>:
 8004100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004102:	bf00      	nop
 8004104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004106:	bc08      	pop	{r3}
 8004108:	469e      	mov	lr, r3
 800410a:	4770      	bx	lr
