
STM32-C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800438c  0800438c  0001438c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043e4  080043e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080043e4  080043e4  000143e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043ec  080043ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043ec  080043ec  000143ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043f0  080043f0  000143f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080043f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000070  08004464  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08004464  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133be  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025aa  00000000  00000000  0003345e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00035a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  00036900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179e3  00000000  00000000  00037728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131eb  00000000  00000000  0004f10b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090ab2  00000000  00000000  000622f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2da8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042a0  00000000  00000000  000f2dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004374 	.word	0x08004374

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004374 	.word	0x08004374

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <IMU_init>:
/// @brief Set the IMU address and full scale ranges.
/// @param addr Hex address based on AD0 pin - 0x68 low or 0x69 high.
/// @param aScale Set accelerometer full scale range: 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
/// @param gScale Set gyroscope full scale range: 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
void IMU_init(uint8_t addr, uint8_t aScale, uint8_t gScale)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
 8000592:	460b      	mov	r3, r1
 8000594:	71bb      	strb	r3, [r7, #6]
 8000596:	4613      	mov	r3, r2
 8000598:	717b      	strb	r3, [r7, #5]
	// Save values
	_addr = addr << 1;
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <IMU_init+0x34>)
 80005a2:	701a      	strb	r2, [r3, #0]
	_aScale = aScale;
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <IMU_init+0x38>)
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	7013      	strb	r3, [r2, #0]
	_gScale = gScale;
 80005aa:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <IMU_init+0x3c>)
 80005ac:	797b      	ldrb	r3, [r7, #5]
 80005ae:	7013      	strb	r3, [r2, #0]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	200000c0 	.word	0x200000c0
 80005c0:	20000098 	.word	0x20000098
 80005c4:	200000e8 	.word	0x200000e8

080005c8 <IMU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale.
void IMU_begin(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af04      	add	r7, sp, #16
    uint8_t check;
    uint8_t data;

    ret = HAL_I2C_Mem_Read(&hi2c1, _addr, WHO_AM_I, 1, &check, 1, HAL_MAX_DELAY);
 80005ce:	4b19      	ldr	r3, [pc, #100]	; (8000634 <IMU_begin+0x6c>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	b299      	uxth	r1, r3
 80005d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005d8:	9302      	str	r3, [sp, #8]
 80005da:	2301      	movs	r3, #1
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2301      	movs	r3, #1
 80005e4:	2275      	movs	r2, #117	; 0x75
 80005e6:	4814      	ldr	r0, [pc, #80]	; (8000638 <IMU_begin+0x70>)
 80005e8:	f001 fae2 	bl	8001bb0 <HAL_I2C_Mem_Read>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <IMU_begin+0x74>)
 80005f2:	701a      	strb	r2, [r3, #0]

    // Startup / reset the sensor
    data = 0x00;
 80005f4:	2300      	movs	r3, #0
 80005f6:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, _addr, PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY);
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <IMU_begin+0x6c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b299      	uxth	r1, r3
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000602:	9302      	str	r3, [sp, #8]
 8000604:	2301      	movs	r3, #1
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	1dbb      	adds	r3, r7, #6
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2301      	movs	r3, #1
 800060e:	226b      	movs	r2, #107	; 0x6b
 8000610:	4809      	ldr	r0, [pc, #36]	; (8000638 <IMU_begin+0x70>)
 8000612:	f001 f9d3 	bl	80019bc <HAL_I2C_Mem_Write>

    // Set the full scale ranges
    setAccFullScaleRange(_aScale);
 8000616:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <IMU_begin+0x78>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f814 	bl	8000648 <setAccFullScaleRange>
    setGyroFullScaleRange(_gScale);
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <IMU_begin+0x7c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	f000 f8a1 	bl	800076c <setGyroFullScaleRange>
//
//        // Set the full scale ranges
//        setAccFullScaleRange(_aScale);
//        setGyroFullScaleRange(_gScale);
//    }
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200000c0 	.word	0x200000c0
 8000638:	20000104 	.word	0x20000104
 800063c:	200000e9 	.word	0x200000e9
 8000640:	20000098 	.word	0x20000098
 8000644:	200000e8 	.word	0x200000e8

08000648 <setAccFullScaleRange>:

/// @brief Set the accelerometer full scale range.
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
void setAccFullScaleRange(uint8_t aScale)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af04      	add	r7, sp, #16
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t select;

    // Set the value
    switch (aScale)
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b03      	cmp	r3, #3
 8000656:	d867      	bhi.n	8000728 <setAccFullScaleRange+0xe0>
 8000658:	a201      	add	r2, pc, #4	; (adr r2, 8000660 <setAccFullScaleRange+0x18>)
 800065a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065e:	bf00      	nop
 8000660:	08000671 	.word	0x08000671
 8000664:	0800069f 	.word	0x0800069f
 8000668:	080006cd 	.word	0x080006cd
 800066c:	080006fb 	.word	0x080006fb
    {
    case AFS_2G:
        aRes = 16384.0;
 8000670:	4b3b      	ldr	r3, [pc, #236]	; (8000760 <setAccFullScaleRange+0x118>)
 8000672:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8000676:	601a      	str	r2, [r3, #0]
        select = 0x00;
 8000678:	2300      	movs	r3, #0
 800067a:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, ACCEL_CONFIG, 1, &select, 1, HAL_MAX_DELAY);
 800067c:	4b39      	ldr	r3, [pc, #228]	; (8000764 <setAccFullScaleRange+0x11c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b299      	uxth	r1, r3
 8000682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000686:	9302      	str	r3, [sp, #8]
 8000688:	2301      	movs	r3, #1
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	f107 030f 	add.w	r3, r7, #15
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	221c      	movs	r2, #28
 8000696:	4834      	ldr	r0, [pc, #208]	; (8000768 <setAccFullScaleRange+0x120>)
 8000698:	f001 f990 	bl	80019bc <HAL_I2C_Mem_Write>
        break;
 800069c:	e05b      	b.n	8000756 <setAccFullScaleRange+0x10e>
    case AFS_4G:
        aRes = 8192.0;
 800069e:	4b30      	ldr	r3, [pc, #192]	; (8000760 <setAccFullScaleRange+0x118>)
 80006a0:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80006a4:	601a      	str	r2, [r3, #0]
        select = 0x08;
 80006a6:	2308      	movs	r3, #8
 80006a8:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, ACCEL_CONFIG, 1, &select, 1, HAL_MAX_DELAY);
 80006aa:	4b2e      	ldr	r3, [pc, #184]	; (8000764 <setAccFullScaleRange+0x11c>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	b299      	uxth	r1, r3
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006b4:	9302      	str	r3, [sp, #8]
 80006b6:	2301      	movs	r3, #1
 80006b8:	9301      	str	r3, [sp, #4]
 80006ba:	f107 030f 	add.w	r3, r7, #15
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2301      	movs	r3, #1
 80006c2:	221c      	movs	r2, #28
 80006c4:	4828      	ldr	r0, [pc, #160]	; (8000768 <setAccFullScaleRange+0x120>)
 80006c6:	f001 f979 	bl	80019bc <HAL_I2C_Mem_Write>
        break;
 80006ca:	e044      	b.n	8000756 <setAccFullScaleRange+0x10e>
    case AFS_8G:
        aRes = 4096.0;
 80006cc:	4b24      	ldr	r3, [pc, #144]	; (8000760 <setAccFullScaleRange+0x118>)
 80006ce:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80006d2:	601a      	str	r2, [r3, #0]
        select = 0x10;
 80006d4:	2310      	movs	r3, #16
 80006d6:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, ACCEL_CONFIG, 1, &select, 1, HAL_MAX_DELAY);
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <setAccFullScaleRange+0x11c>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	b299      	uxth	r1, r3
 80006de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006e2:	9302      	str	r3, [sp, #8]
 80006e4:	2301      	movs	r3, #1
 80006e6:	9301      	str	r3, [sp, #4]
 80006e8:	f107 030f 	add.w	r3, r7, #15
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2301      	movs	r3, #1
 80006f0:	221c      	movs	r2, #28
 80006f2:	481d      	ldr	r0, [pc, #116]	; (8000768 <setAccFullScaleRange+0x120>)
 80006f4:	f001 f962 	bl	80019bc <HAL_I2C_Mem_Write>
        break;
 80006f8:	e02d      	b.n	8000756 <setAccFullScaleRange+0x10e>
    case AFS_16G:
        aRes = 2048.0;
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <setAccFullScaleRange+0x118>)
 80006fc:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8000700:	601a      	str	r2, [r3, #0]
        select = 0x18;
 8000702:	2318      	movs	r3, #24
 8000704:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, ACCEL_CONFIG, 1, &select, 1, HAL_MAX_DELAY);
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <setAccFullScaleRange+0x11c>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	b299      	uxth	r1, r3
 800070c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000710:	9302      	str	r3, [sp, #8]
 8000712:	2301      	movs	r3, #1
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	f107 030f 	add.w	r3, r7, #15
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	2301      	movs	r3, #1
 800071e:	221c      	movs	r2, #28
 8000720:	4811      	ldr	r0, [pc, #68]	; (8000768 <setAccFullScaleRange+0x120>)
 8000722:	f001 f94b 	bl	80019bc <HAL_I2C_Mem_Write>
        break;
 8000726:	e016      	b.n	8000756 <setAccFullScaleRange+0x10e>
    default:
        aRes = 8192.0;
 8000728:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <setAccFullScaleRange+0x118>)
 800072a:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800072e:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8000730:	2308      	movs	r3, #8
 8000732:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, ACCEL_CONFIG, 1, &select, 1, HAL_MAX_DELAY);
 8000734:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <setAccFullScaleRange+0x11c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b299      	uxth	r1, r3
 800073a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800073e:	9302      	str	r3, [sp, #8]
 8000740:	2301      	movs	r3, #1
 8000742:	9301      	str	r3, [sp, #4]
 8000744:	f107 030f 	add.w	r3, r7, #15
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	221c      	movs	r2, #28
 800074e:	4806      	ldr	r0, [pc, #24]	; (8000768 <setAccFullScaleRange+0x120>)
 8000750:	f001 f934 	bl	80019bc <HAL_I2C_Mem_Write>
        break;
 8000754:	bf00      	nop
    }
}
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000c4 	.word	0x200000c4
 8000764:	200000c0 	.word	0x200000c0
 8000768:	20000104 	.word	0x20000104

0800076c <setGyroFullScaleRange>:

/// @brief Set the gyroscope full scale range.
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
void setGyroFullScaleRange(uint8_t gScale)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af04      	add	r7, sp, #16
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t select;

    // Set the value
    switch (gScale)
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2b03      	cmp	r3, #3
 800077a:	d863      	bhi.n	8000844 <setGyroFullScaleRange+0xd8>
 800077c:	a201      	add	r2, pc, #4	; (adr r2, 8000784 <setGyroFullScaleRange+0x18>)
 800077e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000782:	bf00      	nop
 8000784:	08000795 	.word	0x08000795
 8000788:	080007c1 	.word	0x080007c1
 800078c:	080007ed 	.word	0x080007ed
 8000790:	08000819 	.word	0x08000819
    {
    case GFS_250DPS:
        gRes = 131.0;
 8000794:	4b38      	ldr	r3, [pc, #224]	; (8000878 <setGyroFullScaleRange+0x10c>)
 8000796:	4a39      	ldr	r2, [pc, #228]	; (800087c <setGyroFullScaleRange+0x110>)
 8000798:	601a      	str	r2, [r3, #0]
        select = 0x00;
 800079a:	2300      	movs	r3, #0
 800079c:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, GYRO_CONFIG, 1, &select, 1, HAL_MAX_DELAY);
 800079e:	4b38      	ldr	r3, [pc, #224]	; (8000880 <setGyroFullScaleRange+0x114>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	b299      	uxth	r1, r3
 80007a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007a8:	9302      	str	r3, [sp, #8]
 80007aa:	2301      	movs	r3, #1
 80007ac:	9301      	str	r3, [sp, #4]
 80007ae:	f107 030f 	add.w	r3, r7, #15
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2301      	movs	r3, #1
 80007b6:	221b      	movs	r2, #27
 80007b8:	4832      	ldr	r0, [pc, #200]	; (8000884 <setGyroFullScaleRange+0x118>)
 80007ba:	f001 f8ff 	bl	80019bc <HAL_I2C_Mem_Write>
        break;
 80007be:	e057      	b.n	8000870 <setGyroFullScaleRange+0x104>
    case GFS_500DPS:
        gRes = 65.5;
 80007c0:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <setGyroFullScaleRange+0x10c>)
 80007c2:	4a31      	ldr	r2, [pc, #196]	; (8000888 <setGyroFullScaleRange+0x11c>)
 80007c4:	601a      	str	r2, [r3, #0]
        select = 0x00;
 80007c6:	2300      	movs	r3, #0
 80007c8:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, GYRO_CONFIG, 1, &select, 1, HAL_MAX_DELAY);
 80007ca:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <setGyroFullScaleRange+0x114>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b299      	uxth	r1, r3
 80007d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007d4:	9302      	str	r3, [sp, #8]
 80007d6:	2301      	movs	r3, #1
 80007d8:	9301      	str	r3, [sp, #4]
 80007da:	f107 030f 	add.w	r3, r7, #15
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2301      	movs	r3, #1
 80007e2:	221b      	movs	r2, #27
 80007e4:	4827      	ldr	r0, [pc, #156]	; (8000884 <setGyroFullScaleRange+0x118>)
 80007e6:	f001 f8e9 	bl	80019bc <HAL_I2C_Mem_Write>
        break;
 80007ea:	e041      	b.n	8000870 <setGyroFullScaleRange+0x104>
    case GFS_1000DPS:
        gRes = 32.8;
 80007ec:	4b22      	ldr	r3, [pc, #136]	; (8000878 <setGyroFullScaleRange+0x10c>)
 80007ee:	4a27      	ldr	r2, [pc, #156]	; (800088c <setGyroFullScaleRange+0x120>)
 80007f0:	601a      	str	r2, [r3, #0]
        select = 0x00;
 80007f2:	2300      	movs	r3, #0
 80007f4:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, GYRO_CONFIG, 1, &select, 1, HAL_MAX_DELAY);
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <setGyroFullScaleRange+0x114>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	b299      	uxth	r1, r3
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000800:	9302      	str	r3, [sp, #8]
 8000802:	2301      	movs	r3, #1
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	f107 030f 	add.w	r3, r7, #15
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	2301      	movs	r3, #1
 800080e:	221b      	movs	r2, #27
 8000810:	481c      	ldr	r0, [pc, #112]	; (8000884 <setGyroFullScaleRange+0x118>)
 8000812:	f001 f8d3 	bl	80019bc <HAL_I2C_Mem_Write>
        break;
 8000816:	e02b      	b.n	8000870 <setGyroFullScaleRange+0x104>
    case GFS_2000DPS:
        gRes = 16.4;
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <setGyroFullScaleRange+0x10c>)
 800081a:	4a1d      	ldr	r2, [pc, #116]	; (8000890 <setGyroFullScaleRange+0x124>)
 800081c:	601a      	str	r2, [r3, #0]
        select = 0x00;
 800081e:	2300      	movs	r3, #0
 8000820:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, GYRO_CONFIG, 1, &select, 1, HAL_MAX_DELAY);
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <setGyroFullScaleRange+0x114>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b299      	uxth	r1, r3
 8000828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800082c:	9302      	str	r3, [sp, #8]
 800082e:	2301      	movs	r3, #1
 8000830:	9301      	str	r3, [sp, #4]
 8000832:	f107 030f 	add.w	r3, r7, #15
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2301      	movs	r3, #1
 800083a:	221b      	movs	r2, #27
 800083c:	4811      	ldr	r0, [pc, #68]	; (8000884 <setGyroFullScaleRange+0x118>)
 800083e:	f001 f8bd 	bl	80019bc <HAL_I2C_Mem_Write>
        break;
 8000842:	e015      	b.n	8000870 <setGyroFullScaleRange+0x104>
    default:
        gRes = 65.5;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <setGyroFullScaleRange+0x10c>)
 8000846:	4a10      	ldr	r2, [pc, #64]	; (8000888 <setGyroFullScaleRange+0x11c>)
 8000848:	601a      	str	r2, [r3, #0]
        select = 0x00;
 800084a:	2300      	movs	r3, #0
 800084c:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, GYRO_CONFIG, 1, &select, 1, HAL_MAX_DELAY);
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <setGyroFullScaleRange+0x114>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b299      	uxth	r1, r3
 8000854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000858:	9302      	str	r3, [sp, #8]
 800085a:	2301      	movs	r3, #1
 800085c:	9301      	str	r3, [sp, #4]
 800085e:	f107 030f 	add.w	r3, r7, #15
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2301      	movs	r3, #1
 8000866:	221b      	movs	r2, #27
 8000868:	4806      	ldr	r0, [pc, #24]	; (8000884 <setGyroFullScaleRange+0x118>)
 800086a:	f001 f8a7 	bl	80019bc <HAL_I2C_Mem_Write>
        break;
 800086e:	bf00      	nop
    }
}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200000e4 	.word	0x200000e4
 800087c:	43030000 	.word	0x43030000
 8000880:	200000c0 	.word	0x200000c0
 8000884:	20000104 	.word	0x20000104
 8000888:	42830000 	.word	0x42830000
 800088c:	42033333 	.word	0x42033333
 8000890:	41833333 	.word	0x41833333

08000894 <readRawData>:

/// @brief Read raw data from IMU
void readRawData()
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af04      	add	r7, sp, #16
    // Subroutine for reading the raw data
    HAL_I2C_Mem_Read(&hi2c1, _addr, ACCEL_XOUT_H, 1, buf, 14, HAL_MAX_DELAY);
 800089a:	4b30      	ldr	r3, [pc, #192]	; (800095c <readRawData+0xc8>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b299      	uxth	r1, r3
 80008a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008a4:	9302      	str	r3, [sp, #8]
 80008a6:	230e      	movs	r3, #14
 80008a8:	9301      	str	r3, [sp, #4]
 80008aa:	4b2d      	ldr	r3, [pc, #180]	; (8000960 <readRawData+0xcc>)
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	2301      	movs	r3, #1
 80008b0:	223b      	movs	r2, #59	; 0x3b
 80008b2:	482c      	ldr	r0, [pc, #176]	; (8000964 <readRawData+0xd0>)
 80008b4:	f001 f97c 	bl	8001bb0 <HAL_I2C_Mem_Read>
    
    // Bit shift the data
    sensorRaw.ax = buf[0] << 8 | buf[1];
 80008b8:	4b29      	ldr	r3, [pc, #164]	; (8000960 <readRawData+0xcc>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	4a28      	ldr	r2, [pc, #160]	; (8000960 <readRawData+0xcc>)
 80008c0:	7852      	ldrb	r2, [r2, #1]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	4b26      	ldr	r3, [pc, #152]	; (8000968 <readRawData+0xd4>)
 80008ce:	edc3 7a00 	vstr	s15, [r3]
    sensorRaw.ay = buf[2] << 8 | buf[3];
 80008d2:	4b23      	ldr	r3, [pc, #140]	; (8000960 <readRawData+0xcc>)
 80008d4:	789b      	ldrb	r3, [r3, #2]
 80008d6:	021b      	lsls	r3, r3, #8
 80008d8:	4a21      	ldr	r2, [pc, #132]	; (8000960 <readRawData+0xcc>)
 80008da:	78d2      	ldrb	r2, [r2, #3]
 80008dc:	4313      	orrs	r3, r2
 80008de:	ee07 3a90 	vmov	s15, r3
 80008e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <readRawData+0xd4>)
 80008e8:	edc3 7a01 	vstr	s15, [r3, #4]
    sensorRaw.az = buf[4] << 8 | buf[5];
 80008ec:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <readRawData+0xcc>)
 80008ee:	791b      	ldrb	r3, [r3, #4]
 80008f0:	021b      	lsls	r3, r3, #8
 80008f2:	4a1b      	ldr	r2, [pc, #108]	; (8000960 <readRawData+0xcc>)
 80008f4:	7952      	ldrb	r2, [r2, #5]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	ee07 3a90 	vmov	s15, r3
 80008fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000900:	4b19      	ldr	r3, [pc, #100]	; (8000968 <readRawData+0xd4>)
 8000902:	edc3 7a02 	vstr	s15, [r3, #8]

    // temperature = buf[6] << 8 | buf[7];

    sensorRaw.gx = buf[8]  << 8 | buf[9];
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <readRawData+0xcc>)
 8000908:	7a1b      	ldrb	r3, [r3, #8]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	4a14      	ldr	r2, [pc, #80]	; (8000960 <readRawData+0xcc>)
 800090e:	7a52      	ldrb	r2, [r2, #9]
 8000910:	4313      	orrs	r3, r2
 8000912:	ee07 3a90 	vmov	s15, r3
 8000916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <readRawData+0xd4>)
 800091c:	edc3 7a03 	vstr	s15, [r3, #12]
    sensorRaw.gy = buf[10] << 8 | buf[11];
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <readRawData+0xcc>)
 8000922:	7a9b      	ldrb	r3, [r3, #10]
 8000924:	021b      	lsls	r3, r3, #8
 8000926:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <readRawData+0xcc>)
 8000928:	7ad2      	ldrb	r2, [r2, #11]
 800092a:	4313      	orrs	r3, r2
 800092c:	ee07 3a90 	vmov	s15, r3
 8000930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <readRawData+0xd4>)
 8000936:	edc3 7a04 	vstr	s15, [r3, #16]
    sensorRaw.gz = buf[12] << 8 | buf[13];
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <readRawData+0xcc>)
 800093c:	7b1b      	ldrb	r3, [r3, #12]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	4a07      	ldr	r2, [pc, #28]	; (8000960 <readRawData+0xcc>)
 8000942:	7b52      	ldrb	r2, [r2, #13]
 8000944:	4313      	orrs	r3, r2
 8000946:	ee07 3a90 	vmov	s15, r3
 800094a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <readRawData+0xd4>)
 8000950:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200000c0 	.word	0x200000c0
 8000960:	200000d4 	.word	0x200000d4
 8000964:	20000104 	.word	0x20000104
 8000968:	200000ec 	.word	0x200000ec

0800096c <IMU_calibrateGyro>:

/// @brief Find offsets for each axis of gyroscope.
/// @param numCalPoints Number of data points to average.
void IMU_calibrateGyro(uint16_t numCalPoints)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	80fb      	strh	r3, [r7, #6]
    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8000976:	2300      	movs	r3, #0
 8000978:	81fb      	strh	r3, [r7, #14]
 800097a:	e007      	b.n	800098c <IMU_calibrateGyro+0x20>
    {
        readRawData();
 800097c:	f7ff ff8a 	bl	8000894 <readRawData>
        // gyroCal.x += sensorRaw.gx;
        // gyroCal.y += sensorRaw.gy;
        // gyroCal.z += sensorRaw.gz;
        HAL_Delay(3);
 8000980:	2003      	movs	r0, #3
 8000982:	f000 fbe9 	bl	8001158 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8000986:	89fb      	ldrh	r3, [r7, #14]
 8000988:	3301      	adds	r3, #1
 800098a:	81fb      	strh	r3, [r7, #14]
 800098c:	89fa      	ldrh	r2, [r7, #14]
 800098e:	88fb      	ldrh	r3, [r7, #6]
 8000990:	429a      	cmp	r2, r3
 8000992:	d3f3      	bcc.n	800097c <IMU_calibrateGyro+0x10>
    }

    // Average the saved data points to find the gyroscope offset
    gyroCal.x /= (float)numCalPoints;
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <IMU_calibrateGyro+0x80>)
 8000996:	edd3 6a00 	vldr	s13, [r3]
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	ee07 3a90 	vmov	s15, r3
 80009a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <IMU_calibrateGyro+0x80>)
 80009aa:	edc3 7a00 	vstr	s15, [r3]
    gyroCal.y /= (float)numCalPoints;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <IMU_calibrateGyro+0x80>)
 80009b0:	edd3 6a01 	vldr	s13, [r3, #4]
 80009b4:	88fb      	ldrh	r3, [r7, #6]
 80009b6:	ee07 3a90 	vmov	s15, r3
 80009ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <IMU_calibrateGyro+0x80>)
 80009c4:	edc3 7a01 	vstr	s15, [r3, #4]
    gyroCal.z /= (float)numCalPoints;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <IMU_calibrateGyro+0x80>)
 80009ca:	edd3 6a02 	vldr	s13, [r3, #8]
 80009ce:	88fb      	ldrh	r3, [r7, #6]
 80009d0:	ee07 3a90 	vmov	s15, r3
 80009d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009dc:	4b03      	ldr	r3, [pc, #12]	; (80009ec <IMU_calibrateGyro+0x80>)
 80009de:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200000c8 	.word	0x200000c8

080009f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <MX_GPIO_Init+0xd0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a2c      	ldr	r2, [pc, #176]	; (8000ac0 <MX_GPIO_Init+0xd0>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <MX_GPIO_Init+0xd0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b26      	ldr	r3, [pc, #152]	; (8000ac0 <MX_GPIO_Init+0xd0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a25      	ldr	r2, [pc, #148]	; (8000ac0 <MX_GPIO_Init+0xd0>)
 8000a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <MX_GPIO_Init+0xd0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <MX_GPIO_Init+0xd0>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a1e      	ldr	r2, [pc, #120]	; (8000ac0 <MX_GPIO_Init+0xd0>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <MX_GPIO_Init+0xd0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <MX_GPIO_Init+0xd0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <MX_GPIO_Init+0xd0>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <MX_GPIO_Init+0xd0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2120      	movs	r1, #32
 8000a7a:	4812      	ldr	r0, [pc, #72]	; (8000ac4 <MX_GPIO_Init+0xd4>)
 8000a7c:	f000 fe26 	bl	80016cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a86:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <MX_GPIO_Init+0xd8>)
 8000a98:	f000 fc94 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a9c:	2320      	movs	r3, #32
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <MX_GPIO_Init+0xd4>)
 8000ab4:	f000 fc86 	bl	80013c4 <HAL_GPIO_Init>

}
 8000ab8:	bf00      	nop
 8000aba:	3728      	adds	r7, #40	; 0x28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000
 8000ac8:	40020800 	.word	0x40020800

08000acc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000ad2:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <MX_I2C1_Init+0x54>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000ad8:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <MX_I2C1_Init+0x58>)
 8000ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000aea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000b0a:	f000 fe13 	bl	8001734 <HAL_I2C_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b14:	f000 f91c 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000104 	.word	0x20000104
 8000b20:	40005400 	.word	0x40005400
 8000b24:	000186a0 	.word	0x000186a0

08000b28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a19      	ldr	r2, [pc, #100]	; (8000bac <HAL_I2C_MspInit+0x84>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d12b      	bne.n	8000ba2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b66:	23c0      	movs	r3, #192	; 0xc0
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b6a:	2312      	movs	r3, #18
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b76:	2304      	movs	r3, #4
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <HAL_I2C_MspInit+0x8c>)
 8000b82:	f000 fc1f 	bl	80013c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	; 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40005400 	.word	0x40005400
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020400 	.word	0x40020400

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbe:	f000 fa59 	bl	8001074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc2:	f000 f845 	bl	8000c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc6:	f7ff ff13 	bl	80009f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bca:	f000 f9b7 	bl	8000f3c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000bce:	f7ff ff7d 	bl	8000acc <MX_I2C1_Init>
  MX_TIM11_Init();
 8000bd2:	f000 f967 	bl	8000ea4 <MX_TIM11_Init>

  /* USER CODE BEGIN 2 */
  IMU_init(AD0_LOW, AFS_4G, GFS_500DPS);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2101      	movs	r1, #1
 8000bda:	2068      	movs	r0, #104	; 0x68
 8000bdc:	f7ff fcd4 	bl	8000588 <IMU_init>
  IMU_begin();
 8000be0:	f7ff fcf2 	bl	80005c8 <IMU_begin>

  sprintf((char*)serialBuf, "%d,%d,%d\r\n", 0, 1, 0);
 8000be4:	2300      	movs	r3, #0
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2301      	movs	r3, #1
 8000bea:	2200      	movs	r2, #0
 8000bec:	4914      	ldr	r1, [pc, #80]	; (8000c40 <main+0x88>)
 8000bee:	4815      	ldr	r0, [pc, #84]	; (8000c44 <main+0x8c>)
 8000bf0:	f002 ff92 	bl	8003b18 <siprintf>
HAL_UART_Transmit(&huart2, serialBuf, strlen((char*)serialBuf), HAL_MAX_DELAY);
 8000bf4:	4813      	ldr	r0, [pc, #76]	; (8000c44 <main+0x8c>)
 8000bf6:	f7ff faf3 	bl	80001e0 <strlen>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c02:	4910      	ldr	r1, [pc, #64]	; (8000c44 <main+0x8c>)
 8000c04:	4810      	ldr	r0, [pc, #64]	; (8000c48 <main+0x90>)
 8000c06:	f002 fc8c 	bl	8003522 <HAL_UART_Transmit>

  IMU_calibrateGyro(500);
 8000c0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c0e:	f7ff fead 	bl	800096c <IMU_calibrateGyro>

sprintf((char*)serialBuf, "%d,%d,%d\r\n", 0, 2, 0);
 8000c12:	2300      	movs	r3, #0
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	2302      	movs	r3, #2
 8000c18:	2200      	movs	r2, #0
 8000c1a:	4909      	ldr	r1, [pc, #36]	; (8000c40 <main+0x88>)
 8000c1c:	4809      	ldr	r0, [pc, #36]	; (8000c44 <main+0x8c>)
 8000c1e:	f002 ff7b 	bl	8003b18 <siprintf>
HAL_UART_Transmit(&huart2, serialBuf, strlen((char*)serialBuf), HAL_MAX_DELAY);
 8000c22:	4808      	ldr	r0, [pc, #32]	; (8000c44 <main+0x8c>)
 8000c24:	f7ff fadc 	bl	80001e0 <strlen>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c30:	4904      	ldr	r1, [pc, #16]	; (8000c44 <main+0x8c>)
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <main+0x90>)
 8000c34:	f002 fc75 	bl	8003522 <HAL_UART_Transmit>
// HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);


  /* USER CODE END 2 */

HAL_TIM_Base_Start_IT(&htim11);
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <main+0x94>)
 8000c3a:	f002 f9ff 	bl	800303c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <main+0x86>
 8000c40:	0800438c 	.word	0x0800438c
 8000c44:	20000158 	.word	0x20000158
 8000c48:	200001bc 	.word	0x200001bc
 8000c4c:	20000174 	.word	0x20000174

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b094      	sub	sp, #80	; 0x50
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 0320 	add.w	r3, r7, #32
 8000c5a:	2230      	movs	r2, #48	; 0x30
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f002 ff52 	bl	8003b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <SystemClock_Config+0xd0>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	4a28      	ldr	r2, [pc, #160]	; (8000d20 <SystemClock_Config+0xd0>)
 8000c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c82:	6413      	str	r3, [r2, #64]	; 0x40
 8000c84:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <SystemClock_Config+0xd0>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <SystemClock_Config+0xd4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c9c:	4a21      	ldr	r2, [pc, #132]	; (8000d24 <SystemClock_Config+0xd4>)
 8000c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <SystemClock_Config+0xd4>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb8:	2310      	movs	r3, #16
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cc4:	2310      	movs	r3, #16
 8000cc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cc8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ccc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cd2:	2307      	movs	r3, #7
 8000cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd6:	f107 0320 	add.w	r3, r7, #32
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f001 fcea 	bl	80026b4 <HAL_RCC_OscConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ce6:	f000 f833 	bl	8000d50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cea:	230f      	movs	r3, #15
 8000cec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	2102      	movs	r1, #2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 ff4c 	bl	8002ba4 <HAL_RCC_ClockConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d12:	f000 f81d 	bl	8000d50 <Error_Handler>
  }
}
 8000d16:	bf00      	nop
 8000d18:	3750      	adds	r7, #80	; 0x50
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40007000 	.word	0x40007000

08000d28 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim11 )
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d103      	bne.n	8000d40 <HAL_TIM_PeriodElapsedCallback+0x18>
//	  int16_t Y = attitude.r * 10;
//
//      sprintf((char*)serialBuf, "%d,%d,%d\r\n", R, P, Y);
//      HAL_UART_Transmit(&huart2, serialBuf, strlen((char*)serialBuf), HAL_MAX_DELAY);

    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000d38:	2120      	movs	r1, #32
 8000d3a:	4804      	ldr	r0, [pc, #16]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000d3c:	f000 fcdf 	bl	80016fe <HAL_GPIO_TogglePin>
  }
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000174 	.word	0x20000174
 8000d4c:	40020000 	.word	0x40020000

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <Error_Handler+0x8>
	...

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d70:	6453      	str	r3, [r2, #68]	; 0x44
 8000d72:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	4a08      	ldr	r2, [pc, #32]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d9a:	2007      	movs	r0, #7
 8000d9c:	f000 fad0 	bl	8001340 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40023800 	.word	0x40023800

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <NMI_Handler+0x4>

08000db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <HardFault_Handler+0x4>

08000db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <MemManage_Handler+0x4>

08000dbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df8:	f000 f98e 	bl	8001118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000e06:	f002 f97b 	bl	8003100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000174 	.word	0x20000174

08000e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e1c:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <_sbrk+0x5c>)
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <_sbrk+0x60>)
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <_sbrk+0x64>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <_sbrk+0x68>)
 8000e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d207      	bcs.n	8000e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e44:	f002 fe36 	bl	8003ab4 <__errno>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e52:	e009      	b.n	8000e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <_sbrk+0x64>)
 8000e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20018000 	.word	0x20018000
 8000e74:	00000400 	.word	0x00000400
 8000e78:	2000008c 	.word	0x2000008c
 8000e7c:	20000218 	.word	0x20000218

08000e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <SystemInit+0x20>)
 8000e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <SystemInit+0x20>)
 8000e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_TIM11_Init+0x40>)
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ee8 <MX_TIM11_Init+0x44>)
 8000eac:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8400-1;
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <MX_TIM11_Init+0x40>)
 8000eb0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000eb4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <MX_TIM11_Init+0x40>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 5000-1;						// Was 40 for 250 Hz sampling rate
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_TIM11_Init+0x40>)
 8000ebe:	f241 3287 	movw	r2, #4999	; 0x1387
 8000ec2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <MX_TIM11_Init+0x40>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_TIM11_Init+0x40>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <MX_TIM11_Init+0x40>)
 8000ed2:	f002 f863 	bl	8002f9c <HAL_TIM_Base_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8000edc:	f7ff ff38 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000174 	.word	0x20000174
 8000ee8:	40014800 	.word	0x40014800

08000eec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <HAL_TIM_Base_MspInit+0x48>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d115      	bne.n	8000f2a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <HAL_TIM_Base_MspInit+0x4c>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	4a0c      	ldr	r2, [pc, #48]	; (8000f38 <HAL_TIM_Base_MspInit+0x4c>)
 8000f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_TIM_Base_MspInit+0x4c>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	201a      	movs	r0, #26
 8000f20:	f000 fa19 	bl	8001356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000f24:	201a      	movs	r0, #26
 8000f26:	f000 fa32 	bl	800138e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40014800 	.word	0x40014800
 8000f38:	40023800 	.word	0x40023800

08000f3c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <MX_USART2_UART_Init+0x50>)
 8000f44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f62:	220c      	movs	r2, #12
 8000f64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f74:	f002 fa88 	bl	8003488 <HAL_UART_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f7e:	f7ff fee7 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200001bc 	.word	0x200001bc
 8000f8c:	40004400 	.word	0x40004400

08000f90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a19      	ldr	r2, [pc, #100]	; (8001014 <HAL_UART_MspInit+0x84>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d12b      	bne.n	800100a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	4a17      	ldr	r2, [pc, #92]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a10      	ldr	r2, [pc, #64]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fea:	230c      	movs	r3, #12
 8000fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <HAL_UART_MspInit+0x8c>)
 8001006:	f000 f9dd 	bl	80013c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	; 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40004400 	.word	0x40004400
 8001018:	40023800 	.word	0x40023800
 800101c:	40020000 	.word	0x40020000

08001020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001058 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001024:	480d      	ldr	r0, [pc, #52]	; (800105c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001026:	490e      	ldr	r1, [pc, #56]	; (8001060 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001028:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800102c:	e002      	b.n	8001034 <LoopCopyDataInit>

0800102e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001032:	3304      	adds	r3, #4

08001034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001038:	d3f9      	bcc.n	800102e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103a:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800103c:	4c0b      	ldr	r4, [pc, #44]	; (800106c <LoopFillZerobss+0x26>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001040:	e001      	b.n	8001046 <LoopFillZerobss>

08001042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001044:	3204      	adds	r2, #4

08001046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001048:	d3fb      	bcc.n	8001042 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800104a:	f7ff ff19 	bl	8000e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104e:	f002 fd37 	bl	8003ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001052:	f7ff fdb1 	bl	8000bb8 <main>
  bx  lr    
 8001056:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001058:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001060:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001064:	080043f4 	.word	0x080043f4
  ldr r2, =_sbss
 8001068:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800106c:	20000214 	.word	0x20000214

08001070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC_IRQHandler>
	...

08001074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <HAL_Init+0x40>)
 800107e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001082:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_Init+0x40>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <HAL_Init+0x40>)
 800108a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <HAL_Init+0x40>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <HAL_Init+0x40>)
 8001096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800109c:	2003      	movs	r0, #3
 800109e:	f000 f94f 	bl	8001340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 f808 	bl	80010b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a8:	f7ff fe58 	bl	8000d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023c00 	.word	0x40023c00

080010b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_InitTick+0x54>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_InitTick+0x58>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 f967 	bl	80013aa <HAL_SYSTICK_Config>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00e      	b.n	8001104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b0f      	cmp	r3, #15
 80010ea:	d80a      	bhi.n	8001102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ec:	2200      	movs	r2, #0
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010f4:	f000 f92f 	bl	8001356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f8:	4a06      	ldr	r2, [pc, #24]	; (8001114 <HAL_InitTick+0x5c>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	e000      	b.n	8001104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000000 	.word	0x20000000
 8001110:	20000008 	.word	0x20000008
 8001114:	20000004 	.word	0x20000004

08001118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x20>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_IncTick+0x24>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <HAL_IncTick+0x24>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000008 	.word	0x20000008
 800113c:	20000200 	.word	0x20000200

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <HAL_GetTick+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000200 	.word	0x20000200

08001158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001160:	f7ff ffee 	bl	8001140 <HAL_GetTick>
 8001164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001170:	d005      	beq.n	800117e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_Delay+0x44>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4413      	add	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800117e:	bf00      	nop
 8001180:	f7ff ffde 	bl	8001140 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	429a      	cmp	r2, r3
 800118e:	d8f7      	bhi.n	8001180 <HAL_Delay+0x28>
  {
  }
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000008 	.word	0x20000008

080011a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011bc:	4013      	ands	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d2:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	60d3      	str	r3, [r2, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <__NVIC_GetPriorityGrouping+0x18>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	f003 0307 	and.w	r3, r3, #7
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	db0b      	blt.n	800122e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	f003 021f 	and.w	r2, r3, #31
 800121c:	4907      	ldr	r1, [pc, #28]	; (800123c <__NVIC_EnableIRQ+0x38>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	095b      	lsrs	r3, r3, #5
 8001224:	2001      	movs	r0, #1
 8001226:	fa00 f202 	lsl.w	r2, r0, r2
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000e100 	.word	0xe000e100

08001240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	db0a      	blt.n	800126a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	490c      	ldr	r1, [pc, #48]	; (800128c <__NVIC_SetPriority+0x4c>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	0112      	lsls	r2, r2, #4
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	440b      	add	r3, r1
 8001264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001268:	e00a      	b.n	8001280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4908      	ldr	r1, [pc, #32]	; (8001290 <__NVIC_SetPriority+0x50>)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	3b04      	subs	r3, #4
 8001278:	0112      	lsls	r2, r2, #4
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	440b      	add	r3, r1
 800127e:	761a      	strb	r2, [r3, #24]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000e100 	.word	0xe000e100
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	; 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f1c3 0307 	rsb	r3, r3, #7
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	bf28      	it	cs
 80012b2:	2304      	movcs	r3, #4
 80012b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3304      	adds	r3, #4
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d902      	bls.n	80012c4 <NVIC_EncodePriority+0x30>
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3b03      	subs	r3, #3
 80012c2:	e000      	b.n	80012c6 <NVIC_EncodePriority+0x32>
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43d9      	mvns	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	4313      	orrs	r3, r2
         );
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3724      	adds	r7, #36	; 0x24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800130c:	d301      	bcc.n	8001312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130e:	2301      	movs	r3, #1
 8001310:	e00f      	b.n	8001332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <SysTick_Config+0x40>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131a:	210f      	movs	r1, #15
 800131c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001320:	f7ff ff8e 	bl	8001240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <SysTick_Config+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132a:	4b04      	ldr	r3, [pc, #16]	; (800133c <SysTick_Config+0x40>)
 800132c:	2207      	movs	r2, #7
 800132e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	e000e010 	.word	0xe000e010

08001340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff29 	bl	80011a0 <__NVIC_SetPriorityGrouping>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001368:	f7ff ff3e 	bl	80011e8 <__NVIC_GetPriorityGrouping>
 800136c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f7ff ff8e 	bl	8001294 <NVIC_EncodePriority>
 8001378:	4602      	mov	r2, r0
 800137a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff5d 	bl	8001240 <__NVIC_SetPriority>
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff31 	bl	8001204 <__NVIC_EnableIRQ>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ffa2 	bl	80012fc <SysTick_Config>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
 80013de:	e159      	b.n	8001694 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013e0:	2201      	movs	r2, #1
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	f040 8148 	bne.w	800168e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	2b01      	cmp	r3, #1
 8001408:	d005      	beq.n	8001416 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001412:	2b02      	cmp	r3, #2
 8001414:	d130      	bne.n	8001478 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	68da      	ldr	r2, [r3, #12]
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800144c:	2201      	movs	r2, #1
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	091b      	lsrs	r3, r3, #4
 8001462:	f003 0201 	and.w	r2, r3, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b03      	cmp	r3, #3
 8001482:	d017      	beq.n	80014b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d123      	bne.n	8001508 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	08da      	lsrs	r2, r3, #3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3208      	adds	r2, #8
 80014c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	f003 0307 	and.w	r3, r3, #7
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	220f      	movs	r2, #15
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	691a      	ldr	r2, [r3, #16]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	08da      	lsrs	r2, r3, #3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3208      	adds	r2, #8
 8001502:	69b9      	ldr	r1, [r7, #24]
 8001504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	2203      	movs	r2, #3
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0203 	and.w	r2, r3, #3
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 80a2 	beq.w	800168e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b57      	ldr	r3, [pc, #348]	; (80016ac <HAL_GPIO_Init+0x2e8>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	4a56      	ldr	r2, [pc, #344]	; (80016ac <HAL_GPIO_Init+0x2e8>)
 8001554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001558:	6453      	str	r3, [r2, #68]	; 0x44
 800155a:	4b54      	ldr	r3, [pc, #336]	; (80016ac <HAL_GPIO_Init+0x2e8>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001566:	4a52      	ldr	r2, [pc, #328]	; (80016b0 <HAL_GPIO_Init+0x2ec>)
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3302      	adds	r3, #2
 800156e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	220f      	movs	r2, #15
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a49      	ldr	r2, [pc, #292]	; (80016b4 <HAL_GPIO_Init+0x2f0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d019      	beq.n	80015c6 <HAL_GPIO_Init+0x202>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a48      	ldr	r2, [pc, #288]	; (80016b8 <HAL_GPIO_Init+0x2f4>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d013      	beq.n	80015c2 <HAL_GPIO_Init+0x1fe>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a47      	ldr	r2, [pc, #284]	; (80016bc <HAL_GPIO_Init+0x2f8>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d00d      	beq.n	80015be <HAL_GPIO_Init+0x1fa>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a46      	ldr	r2, [pc, #280]	; (80016c0 <HAL_GPIO_Init+0x2fc>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d007      	beq.n	80015ba <HAL_GPIO_Init+0x1f6>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a45      	ldr	r2, [pc, #276]	; (80016c4 <HAL_GPIO_Init+0x300>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d101      	bne.n	80015b6 <HAL_GPIO_Init+0x1f2>
 80015b2:	2304      	movs	r3, #4
 80015b4:	e008      	b.n	80015c8 <HAL_GPIO_Init+0x204>
 80015b6:	2307      	movs	r3, #7
 80015b8:	e006      	b.n	80015c8 <HAL_GPIO_Init+0x204>
 80015ba:	2303      	movs	r3, #3
 80015bc:	e004      	b.n	80015c8 <HAL_GPIO_Init+0x204>
 80015be:	2302      	movs	r3, #2
 80015c0:	e002      	b.n	80015c8 <HAL_GPIO_Init+0x204>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <HAL_GPIO_Init+0x204>
 80015c6:	2300      	movs	r3, #0
 80015c8:	69fa      	ldr	r2, [r7, #28]
 80015ca:	f002 0203 	and.w	r2, r2, #3
 80015ce:	0092      	lsls	r2, r2, #2
 80015d0:	4093      	lsls	r3, r2
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d8:	4935      	ldr	r1, [pc, #212]	; (80016b0 <HAL_GPIO_Init+0x2ec>)
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e6:	4b38      	ldr	r3, [pc, #224]	; (80016c8 <HAL_GPIO_Init+0x304>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800160a:	4a2f      	ldr	r2, [pc, #188]	; (80016c8 <HAL_GPIO_Init+0x304>)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001610:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <HAL_GPIO_Init+0x304>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001634:	4a24      	ldr	r2, [pc, #144]	; (80016c8 <HAL_GPIO_Init+0x304>)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163a:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <HAL_GPIO_Init+0x304>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800165e:	4a1a      	ldr	r2, [pc, #104]	; (80016c8 <HAL_GPIO_Init+0x304>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001664:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_GPIO_Init+0x304>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001688:	4a0f      	ldr	r2, [pc, #60]	; (80016c8 <HAL_GPIO_Init+0x304>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3301      	adds	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	2b0f      	cmp	r3, #15
 8001698:	f67f aea2 	bls.w	80013e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3724      	adds	r7, #36	; 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40013800 	.word	0x40013800
 80016b4:	40020000 	.word	0x40020000
 80016b8:	40020400 	.word	0x40020400
 80016bc:	40020800 	.word	0x40020800
 80016c0:	40020c00 	.word	0x40020c00
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40013c00 	.word	0x40013c00

080016cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]
 80016d8:	4613      	mov	r3, r2
 80016da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016dc:	787b      	ldrb	r3, [r7, #1]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016e8:	e003      	b.n	80016f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ea:	887b      	ldrh	r3, [r7, #2]
 80016ec:	041a      	lsls	r2, r3, #16
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	619a      	str	r2, [r3, #24]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016fe:	b480      	push	{r7}
 8001700:	b085      	sub	sp, #20
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	460b      	mov	r3, r1
 8001708:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001710:	887a      	ldrh	r2, [r7, #2]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4013      	ands	r3, r2
 8001716:	041a      	lsls	r2, r3, #16
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	43d9      	mvns	r1, r3
 800171c:	887b      	ldrh	r3, [r7, #2]
 800171e:	400b      	ands	r3, r1
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	619a      	str	r2, [r3, #24]
}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e12b      	b.n	800199e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d106      	bne.n	8001760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff f9e4 	bl	8000b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2224      	movs	r2, #36	; 0x24
 8001764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0201 	bic.w	r2, r2, #1
 8001776:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001786:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001796:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001798:	f001 fbd8 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 800179c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4a81      	ldr	r2, [pc, #516]	; (80019a8 <HAL_I2C_Init+0x274>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d807      	bhi.n	80017b8 <HAL_I2C_Init+0x84>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4a80      	ldr	r2, [pc, #512]	; (80019ac <HAL_I2C_Init+0x278>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	bf94      	ite	ls
 80017b0:	2301      	movls	r3, #1
 80017b2:	2300      	movhi	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	e006      	b.n	80017c6 <HAL_I2C_Init+0x92>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4a7d      	ldr	r2, [pc, #500]	; (80019b0 <HAL_I2C_Init+0x27c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	bf94      	ite	ls
 80017c0:	2301      	movls	r3, #1
 80017c2:	2300      	movhi	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e0e7      	b.n	800199e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4a78      	ldr	r2, [pc, #480]	; (80019b4 <HAL_I2C_Init+0x280>)
 80017d2:	fba2 2303 	umull	r2, r3, r2, r3
 80017d6:	0c9b      	lsrs	r3, r3, #18
 80017d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4a6a      	ldr	r2, [pc, #424]	; (80019a8 <HAL_I2C_Init+0x274>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d802      	bhi.n	8001808 <HAL_I2C_Init+0xd4>
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	3301      	adds	r3, #1
 8001806:	e009      	b.n	800181c <HAL_I2C_Init+0xe8>
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800180e:	fb02 f303 	mul.w	r3, r2, r3
 8001812:	4a69      	ldr	r2, [pc, #420]	; (80019b8 <HAL_I2C_Init+0x284>)
 8001814:	fba2 2303 	umull	r2, r3, r2, r3
 8001818:	099b      	lsrs	r3, r3, #6
 800181a:	3301      	adds	r3, #1
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	430b      	orrs	r3, r1
 8001822:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800182e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	495c      	ldr	r1, [pc, #368]	; (80019a8 <HAL_I2C_Init+0x274>)
 8001838:	428b      	cmp	r3, r1
 800183a:	d819      	bhi.n	8001870 <HAL_I2C_Init+0x13c>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1e59      	subs	r1, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fbb1 f3f3 	udiv	r3, r1, r3
 800184a:	1c59      	adds	r1, r3, #1
 800184c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001850:	400b      	ands	r3, r1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00a      	beq.n	800186c <HAL_I2C_Init+0x138>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	1e59      	subs	r1, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	fbb1 f3f3 	udiv	r3, r1, r3
 8001864:	3301      	adds	r3, #1
 8001866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186a:	e051      	b.n	8001910 <HAL_I2C_Init+0x1dc>
 800186c:	2304      	movs	r3, #4
 800186e:	e04f      	b.n	8001910 <HAL_I2C_Init+0x1dc>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d111      	bne.n	800189c <HAL_I2C_Init+0x168>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	1e58      	subs	r0, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6859      	ldr	r1, [r3, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	440b      	add	r3, r1
 8001886:	fbb0 f3f3 	udiv	r3, r0, r3
 800188a:	3301      	adds	r3, #1
 800188c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf0c      	ite	eq
 8001894:	2301      	moveq	r3, #1
 8001896:	2300      	movne	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	e012      	b.n	80018c2 <HAL_I2C_Init+0x18e>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1e58      	subs	r0, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	0099      	lsls	r1, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b2:	3301      	adds	r3, #1
 80018b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_I2C_Init+0x196>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e022      	b.n	8001910 <HAL_I2C_Init+0x1dc>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10e      	bne.n	80018f0 <HAL_I2C_Init+0x1bc>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1e58      	subs	r0, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6859      	ldr	r1, [r3, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	440b      	add	r3, r1
 80018e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80018e4:	3301      	adds	r3, #1
 80018e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ee:	e00f      	b.n	8001910 <HAL_I2C_Init+0x1dc>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1e58      	subs	r0, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	0099      	lsls	r1, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	fbb0 f3f3 	udiv	r3, r0, r3
 8001906:	3301      	adds	r3, #1
 8001908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800190c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	6809      	ldr	r1, [r1, #0]
 8001914:	4313      	orrs	r3, r2
 8001916:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69da      	ldr	r2, [r3, #28]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800193e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6911      	ldr	r1, [r2, #16]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68d2      	ldr	r2, [r2, #12]
 800194a:	4311      	orrs	r1, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	430b      	orrs	r3, r1
 8001952:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0201 	orr.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2220      	movs	r2, #32
 800198a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	000186a0 	.word	0x000186a0
 80019ac:	001e847f 	.word	0x001e847f
 80019b0:	003d08ff 	.word	0x003d08ff
 80019b4:	431bde83 	.word	0x431bde83
 80019b8:	10624dd3 	.word	0x10624dd3

080019bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	4608      	mov	r0, r1
 80019c6:	4611      	mov	r1, r2
 80019c8:	461a      	mov	r2, r3
 80019ca:	4603      	mov	r3, r0
 80019cc:	817b      	strh	r3, [r7, #10]
 80019ce:	460b      	mov	r3, r1
 80019d0:	813b      	strh	r3, [r7, #8]
 80019d2:	4613      	mov	r3, r2
 80019d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019d6:	f7ff fbb3 	bl	8001140 <HAL_GetTick>
 80019da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b20      	cmp	r3, #32
 80019e6:	f040 80d9 	bne.w	8001b9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	2319      	movs	r3, #25
 80019f0:	2201      	movs	r2, #1
 80019f2:	496d      	ldr	r1, [pc, #436]	; (8001ba8 <HAL_I2C_Mem_Write+0x1ec>)
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f000 fc7f 	bl	80022f8 <I2C_WaitOnFlagUntilTimeout>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a00:	2302      	movs	r3, #2
 8001a02:	e0cc      	b.n	8001b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d101      	bne.n	8001a12 <HAL_I2C_Mem_Write+0x56>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e0c5      	b.n	8001b9e <HAL_I2C_Mem_Write+0x1e2>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d007      	beq.n	8001a38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2221      	movs	r2, #33	; 0x21
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2240      	movs	r2, #64	; 0x40
 8001a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6a3a      	ldr	r2, [r7, #32]
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4a4d      	ldr	r2, [pc, #308]	; (8001bac <HAL_I2C_Mem_Write+0x1f0>)
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a7a:	88f8      	ldrh	r0, [r7, #6]
 8001a7c:	893a      	ldrh	r2, [r7, #8]
 8001a7e:	8979      	ldrh	r1, [r7, #10]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	4603      	mov	r3, r0
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f000 fab6 	bl	8001ffc <I2C_RequestMemoryWrite>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d052      	beq.n	8001b3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e081      	b.n	8001b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 fd00 	bl	80024a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00d      	beq.n	8001ac6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d107      	bne.n	8001ac2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ac0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e06b      	b.n	8001b9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d11b      	bne.n	8001b3c <HAL_I2C_Mem_Write+0x180>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d017      	beq.n	8001b3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	781a      	ldrb	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1aa      	bne.n	8001a9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 fcec 	bl	8002526 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00d      	beq.n	8001b70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d107      	bne.n	8001b6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e016      	b.n	8001b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e000      	b.n	8001b9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001b9c:	2302      	movs	r3, #2
  }
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	00100002 	.word	0x00100002
 8001bac:	ffff0000 	.word	0xffff0000

08001bb0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	4608      	mov	r0, r1
 8001bba:	4611      	mov	r1, r2
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	817b      	strh	r3, [r7, #10]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	813b      	strh	r3, [r7, #8]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bca:	f7ff fab9 	bl	8001140 <HAL_GetTick>
 8001bce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b20      	cmp	r3, #32
 8001bda:	f040 8208 	bne.w	8001fee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	2319      	movs	r3, #25
 8001be4:	2201      	movs	r2, #1
 8001be6:	497b      	ldr	r1, [pc, #492]	; (8001dd4 <HAL_I2C_Mem_Read+0x224>)
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f000 fb85 	bl	80022f8 <I2C_WaitOnFlagUntilTimeout>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	e1fb      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_I2C_Mem_Read+0x56>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e1f4      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x440>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d007      	beq.n	8001c2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2222      	movs	r2, #34	; 0x22
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2240      	movs	r2, #64	; 0x40
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4a5b      	ldr	r2, [pc, #364]	; (8001dd8 <HAL_I2C_Mem_Read+0x228>)
 8001c6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c6e:	88f8      	ldrh	r0, [r7, #6]
 8001c70:	893a      	ldrh	r2, [r7, #8]
 8001c72:	8979      	ldrh	r1, [r7, #10]
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 fa52 	bl	8002128 <I2C_RequestMemoryRead>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e1b0      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d113      	bne.n	8001cbe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	623b      	str	r3, [r7, #32]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	623b      	str	r3, [r7, #32]
 8001caa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	e184      	b.n	8001fc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d11b      	bne.n	8001cfe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	e164      	b.n	8001fc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d11b      	bne.n	8001d3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d26:	2300      	movs	r3, #0
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	e144      	b.n	8001fc8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001d54:	e138      	b.n	8001fc8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	f200 80f1 	bhi.w	8001f42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d123      	bne.n	8001db0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 fc1b 	bl	80025a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e139      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dae:	e10b      	b.n	8001fc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d14e      	bne.n	8001e56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	4906      	ldr	r1, [pc, #24]	; (8001ddc <HAL_I2C_Mem_Read+0x22c>)
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f000 fa98 	bl	80022f8 <I2C_WaitOnFlagUntilTimeout>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d008      	beq.n	8001de0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e10e      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x440>
 8001dd2:	bf00      	nop
 8001dd4:	00100002 	.word	0x00100002
 8001dd8:	ffff0000 	.word	0xffff0000
 8001ddc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691a      	ldr	r2, [r3, #16]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e54:	e0b8      	b.n	8001fc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	4966      	ldr	r1, [pc, #408]	; (8001ff8 <HAL_I2C_Mem_Read+0x448>)
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 fa49 	bl	80022f8 <I2C_WaitOnFlagUntilTimeout>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0bf      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691a      	ldr	r2, [r3, #16]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb8:	2200      	movs	r2, #0
 8001eba:	494f      	ldr	r1, [pc, #316]	; (8001ff8 <HAL_I2C_Mem_Read+0x448>)
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 fa1b 	bl	80022f8 <I2C_WaitOnFlagUntilTimeout>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e091      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f40:	e042      	b.n	8001fc8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 fb2e 	bl	80025a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e04c      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f72:	3b01      	subs	r3, #1
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d118      	bne.n	8001fc8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f47f aec2 	bne.w	8001d56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e000      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001fee:	2302      	movs	r3, #2
  }
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3728      	adds	r7, #40	; 0x28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	00010004 	.word	0x00010004

08001ffc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	4608      	mov	r0, r1
 8002006:	4611      	mov	r1, r2
 8002008:	461a      	mov	r2, r3
 800200a:	4603      	mov	r3, r0
 800200c:	817b      	strh	r3, [r7, #10]
 800200e:	460b      	mov	r3, r1
 8002010:	813b      	strh	r3, [r7, #8]
 8002012:	4613      	mov	r3, r2
 8002014:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002024:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	2200      	movs	r2, #0
 800202e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 f960 	bl	80022f8 <I2C_WaitOnFlagUntilTimeout>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00d      	beq.n	800205a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800204c:	d103      	bne.n	8002056 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002054:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e05f      	b.n	800211a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800205a:	897b      	ldrh	r3, [r7, #10]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002068:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	6a3a      	ldr	r2, [r7, #32]
 800206e:	492d      	ldr	r1, [pc, #180]	; (8002124 <I2C_RequestMemoryWrite+0x128>)
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 f998 	bl	80023a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e04c      	b.n	800211a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002098:	6a39      	ldr	r1, [r7, #32]
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 fa02 	bl	80024a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00d      	beq.n	80020c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d107      	bne.n	80020be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e02b      	b.n	800211a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d105      	bne.n	80020d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020c8:	893b      	ldrh	r3, [r7, #8]
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	611a      	str	r2, [r3, #16]
 80020d2:	e021      	b.n	8002118 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80020d4:	893b      	ldrh	r3, [r7, #8]
 80020d6:	0a1b      	lsrs	r3, r3, #8
 80020d8:	b29b      	uxth	r3, r3
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e4:	6a39      	ldr	r1, [r7, #32]
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f9dc 	bl	80024a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00d      	beq.n	800210e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d107      	bne.n	800210a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002108:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e005      	b.n	800211a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800210e:	893b      	ldrh	r3, [r7, #8]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	00010002 	.word	0x00010002

08002128 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af02      	add	r7, sp, #8
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	4608      	mov	r0, r1
 8002132:	4611      	mov	r1, r2
 8002134:	461a      	mov	r2, r3
 8002136:	4603      	mov	r3, r0
 8002138:	817b      	strh	r3, [r7, #10]
 800213a:	460b      	mov	r3, r1
 800213c:	813b      	strh	r3, [r7, #8]
 800213e:	4613      	mov	r3, r2
 8002140:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002150:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002160:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	2200      	movs	r2, #0
 800216a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 f8c2 	bl	80022f8 <I2C_WaitOnFlagUntilTimeout>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00d      	beq.n	8002196 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002188:	d103      	bne.n	8002192 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002190:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e0aa      	b.n	80022ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002196:	897b      	ldrh	r3, [r7, #10]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	6a3a      	ldr	r2, [r7, #32]
 80021aa:	4952      	ldr	r1, [pc, #328]	; (80022f4 <I2C_RequestMemoryRead+0x1cc>)
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f8fa 	bl	80023a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e097      	b.n	80022ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d4:	6a39      	ldr	r1, [r7, #32]
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 f964 	bl	80024a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00d      	beq.n	80021fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d107      	bne.n	80021fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e076      	b.n	80022ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d105      	bne.n	8002210 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002204:	893b      	ldrh	r3, [r7, #8]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	611a      	str	r2, [r3, #16]
 800220e:	e021      	b.n	8002254 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002210:	893b      	ldrh	r3, [r7, #8]
 8002212:	0a1b      	lsrs	r3, r3, #8
 8002214:	b29b      	uxth	r3, r3
 8002216:	b2da      	uxtb	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800221e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002220:	6a39      	ldr	r1, [r7, #32]
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 f93e 	bl	80024a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00d      	beq.n	800224a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	2b04      	cmp	r3, #4
 8002234:	d107      	bne.n	8002246 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002244:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e050      	b.n	80022ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800224a:	893b      	ldrh	r3, [r7, #8]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002256:	6a39      	ldr	r1, [r7, #32]
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 f923 	bl	80024a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00d      	beq.n	8002280 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	2b04      	cmp	r3, #4
 800226a:	d107      	bne.n	800227c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800227a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e035      	b.n	80022ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800228e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	2200      	movs	r2, #0
 8002298:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 f82b 	bl	80022f8 <I2C_WaitOnFlagUntilTimeout>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00d      	beq.n	80022c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022b6:	d103      	bne.n	80022c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e013      	b.n	80022ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80022c4:	897b      	ldrh	r3, [r7, #10]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	6a3a      	ldr	r2, [r7, #32]
 80022d8:	4906      	ldr	r1, [pc, #24]	; (80022f4 <I2C_RequestMemoryRead+0x1cc>)
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f863 	bl	80023a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	00010002 	.word	0x00010002

080022f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	4613      	mov	r3, r2
 8002306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002308:	e025      	b.n	8002356 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002310:	d021      	beq.n	8002356 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002312:	f7fe ff15 	bl	8001140 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d302      	bcc.n	8002328 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d116      	bne.n	8002356 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2220      	movs	r2, #32
 8002332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f043 0220 	orr.w	r2, r3, #32
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e023      	b.n	800239e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	0c1b      	lsrs	r3, r3, #16
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b01      	cmp	r3, #1
 800235e:	d10d      	bne.n	800237c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	43da      	mvns	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	4013      	ands	r3, r2
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	bf0c      	ite	eq
 8002372:	2301      	moveq	r3, #1
 8002374:	2300      	movne	r3, #0
 8002376:	b2db      	uxtb	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	e00c      	b.n	8002396 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	43da      	mvns	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4013      	ands	r3, r2
 8002388:	b29b      	uxth	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	bf0c      	ite	eq
 800238e:	2301      	moveq	r3, #1
 8002390:	2300      	movne	r3, #0
 8002392:	b2db      	uxtb	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	429a      	cmp	r2, r3
 800239a:	d0b6      	beq.n	800230a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b084      	sub	sp, #16
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023b4:	e051      	b.n	800245a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c4:	d123      	bne.n	800240e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f043 0204 	orr.w	r2, r3, #4
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e046      	b.n	800249c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002414:	d021      	beq.n	800245a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002416:	f7fe fe93 	bl	8001140 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	429a      	cmp	r2, r3
 8002424:	d302      	bcc.n	800242c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d116      	bne.n	800245a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f043 0220 	orr.w	r2, r3, #32
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e020      	b.n	800249c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	0c1b      	lsrs	r3, r3, #16
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b01      	cmp	r3, #1
 8002462:	d10c      	bne.n	800247e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	43da      	mvns	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	4013      	ands	r3, r2
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	bf14      	ite	ne
 8002476:	2301      	movne	r3, #1
 8002478:	2300      	moveq	r3, #0
 800247a:	b2db      	uxtb	r3, r3
 800247c:	e00b      	b.n	8002496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	43da      	mvns	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	4013      	ands	r3, r2
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	bf14      	ite	ne
 8002490:	2301      	movne	r3, #1
 8002492:	2300      	moveq	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d18d      	bne.n	80023b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024b0:	e02d      	b.n	800250e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f8ce 	bl	8002654 <I2C_IsAcknowledgeFailed>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e02d      	b.n	800251e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024c8:	d021      	beq.n	800250e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ca:	f7fe fe39 	bl	8001140 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d302      	bcc.n	80024e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d116      	bne.n	800250e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2220      	movs	r2, #32
 80024ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f043 0220 	orr.w	r2, r3, #32
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e007      	b.n	800251e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002518:	2b80      	cmp	r3, #128	; 0x80
 800251a:	d1ca      	bne.n	80024b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002532:	e02d      	b.n	8002590 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 f88d 	bl	8002654 <I2C_IsAcknowledgeFailed>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e02d      	b.n	80025a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800254a:	d021      	beq.n	8002590 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254c:	f7fe fdf8 	bl	8001140 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	429a      	cmp	r2, r3
 800255a:	d302      	bcc.n	8002562 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d116      	bne.n	8002590 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	f043 0220 	orr.w	r2, r3, #32
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e007      	b.n	80025a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b04      	cmp	r3, #4
 800259c:	d1ca      	bne.n	8002534 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025b4:	e042      	b.n	800263c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	f003 0310 	and.w	r3, r3, #16
 80025c0:	2b10      	cmp	r3, #16
 80025c2:	d119      	bne.n	80025f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0210 	mvn.w	r2, #16
 80025cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e029      	b.n	800264c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f8:	f7fe fda2 	bl	8001140 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	429a      	cmp	r2, r3
 8002606:	d302      	bcc.n	800260e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d116      	bne.n	800263c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	f043 0220 	orr.w	r2, r3, #32
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e007      	b.n	800264c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002646:	2b40      	cmp	r3, #64	; 0x40
 8002648:	d1b5      	bne.n	80025b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800266a:	d11b      	bne.n	80026a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002674:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f043 0204 	orr.w	r2, r3, #4
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e264      	b.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d075      	beq.n	80027be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026d2:	4ba3      	ldr	r3, [pc, #652]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d00c      	beq.n	80026f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026de:	4ba0      	ldr	r3, [pc, #640]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d112      	bne.n	8002710 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ea:	4b9d      	ldr	r3, [pc, #628]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f6:	d10b      	bne.n	8002710 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	4b99      	ldr	r3, [pc, #612]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d05b      	beq.n	80027bc <HAL_RCC_OscConfig+0x108>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d157      	bne.n	80027bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e23f      	b.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002718:	d106      	bne.n	8002728 <HAL_RCC_OscConfig+0x74>
 800271a:	4b91      	ldr	r3, [pc, #580]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a90      	ldr	r2, [pc, #576]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e01d      	b.n	8002764 <HAL_RCC_OscConfig+0xb0>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0x98>
 8002732:	4b8b      	ldr	r3, [pc, #556]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a8a      	ldr	r2, [pc, #552]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b88      	ldr	r3, [pc, #544]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a87      	ldr	r2, [pc, #540]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e00b      	b.n	8002764 <HAL_RCC_OscConfig+0xb0>
 800274c:	4b84      	ldr	r3, [pc, #528]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a83      	ldr	r2, [pc, #524]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	4b81      	ldr	r3, [pc, #516]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a80      	ldr	r2, [pc, #512]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 800275e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d013      	beq.n	8002794 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7fe fce8 	bl	8001140 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002774:	f7fe fce4 	bl	8001140 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	; 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e204      	b.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002786:	4b76      	ldr	r3, [pc, #472]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0xc0>
 8002792:	e014      	b.n	80027be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7fe fcd4 	bl	8001140 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800279c:	f7fe fcd0 	bl	8001140 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e1f0      	b.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ae:	4b6c      	ldr	r3, [pc, #432]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0xe8>
 80027ba:	e000      	b.n	80027be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d063      	beq.n	8002892 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ca:	4b65      	ldr	r3, [pc, #404]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00b      	beq.n	80027ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d6:	4b62      	ldr	r3, [pc, #392]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d11c      	bne.n	800281c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e2:	4b5f      	ldr	r3, [pc, #380]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d116      	bne.n	800281c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ee:	4b5c      	ldr	r3, [pc, #368]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <HAL_RCC_OscConfig+0x152>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d001      	beq.n	8002806 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e1c4      	b.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002806:	4b56      	ldr	r3, [pc, #344]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4952      	ldr	r1, [pc, #328]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281a:	e03a      	b.n	8002892 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d020      	beq.n	8002866 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002824:	4b4f      	ldr	r3, [pc, #316]	; (8002964 <HAL_RCC_OscConfig+0x2b0>)
 8002826:	2201      	movs	r2, #1
 8002828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282a:	f7fe fc89 	bl	8001140 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002832:	f7fe fc85 	bl	8001140 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e1a5      	b.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002844:	4b46      	ldr	r3, [pc, #280]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002850:	4b43      	ldr	r3, [pc, #268]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4940      	ldr	r1, [pc, #256]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002860:	4313      	orrs	r3, r2
 8002862:	600b      	str	r3, [r1, #0]
 8002864:	e015      	b.n	8002892 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002866:	4b3f      	ldr	r3, [pc, #252]	; (8002964 <HAL_RCC_OscConfig+0x2b0>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7fe fc68 	bl	8001140 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002874:	f7fe fc64 	bl	8001140 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e184      	b.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002886:	4b36      	ldr	r3, [pc, #216]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d030      	beq.n	8002900 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d016      	beq.n	80028d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a6:	4b30      	ldr	r3, [pc, #192]	; (8002968 <HAL_RCC_OscConfig+0x2b4>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ac:	f7fe fc48 	bl	8001140 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b4:	f7fe fc44 	bl	8001140 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e164      	b.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c6:	4b26      	ldr	r3, [pc, #152]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x200>
 80028d2:	e015      	b.n	8002900 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d4:	4b24      	ldr	r3, [pc, #144]	; (8002968 <HAL_RCC_OscConfig+0x2b4>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028da:	f7fe fc31 	bl	8001140 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e2:	f7fe fc2d 	bl	8001140 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e14d      	b.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f4:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 80028f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1f0      	bne.n	80028e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80a0 	beq.w	8002a4e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10f      	bne.n	800293e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292c:	6413      	str	r3, [r2, #64]	; 0x40
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <HAL_RCC_OscConfig+0x2ac>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293a:	2301      	movs	r3, #1
 800293c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293e:	4b0b      	ldr	r3, [pc, #44]	; (800296c <HAL_RCC_OscConfig+0x2b8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d121      	bne.n	800298e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <HAL_RCC_OscConfig+0x2b8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a07      	ldr	r2, [pc, #28]	; (800296c <HAL_RCC_OscConfig+0x2b8>)
 8002950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002956:	f7fe fbf3 	bl	8001140 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295c:	e011      	b.n	8002982 <HAL_RCC_OscConfig+0x2ce>
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800
 8002964:	42470000 	.word	0x42470000
 8002968:	42470e80 	.word	0x42470e80
 800296c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002970:	f7fe fbe6 	bl	8001140 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e106      	b.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002982:	4b85      	ldr	r3, [pc, #532]	; (8002b98 <HAL_RCC_OscConfig+0x4e4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d106      	bne.n	80029a4 <HAL_RCC_OscConfig+0x2f0>
 8002996:	4b81      	ldr	r3, [pc, #516]	; (8002b9c <HAL_RCC_OscConfig+0x4e8>)
 8002998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299a:	4a80      	ldr	r2, [pc, #512]	; (8002b9c <HAL_RCC_OscConfig+0x4e8>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6713      	str	r3, [r2, #112]	; 0x70
 80029a2:	e01c      	b.n	80029de <HAL_RCC_OscConfig+0x32a>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2b05      	cmp	r3, #5
 80029aa:	d10c      	bne.n	80029c6 <HAL_RCC_OscConfig+0x312>
 80029ac:	4b7b      	ldr	r3, [pc, #492]	; (8002b9c <HAL_RCC_OscConfig+0x4e8>)
 80029ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b0:	4a7a      	ldr	r2, [pc, #488]	; (8002b9c <HAL_RCC_OscConfig+0x4e8>)
 80029b2:	f043 0304 	orr.w	r3, r3, #4
 80029b6:	6713      	str	r3, [r2, #112]	; 0x70
 80029b8:	4b78      	ldr	r3, [pc, #480]	; (8002b9c <HAL_RCC_OscConfig+0x4e8>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	4a77      	ldr	r2, [pc, #476]	; (8002b9c <HAL_RCC_OscConfig+0x4e8>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6713      	str	r3, [r2, #112]	; 0x70
 80029c4:	e00b      	b.n	80029de <HAL_RCC_OscConfig+0x32a>
 80029c6:	4b75      	ldr	r3, [pc, #468]	; (8002b9c <HAL_RCC_OscConfig+0x4e8>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	4a74      	ldr	r2, [pc, #464]	; (8002b9c <HAL_RCC_OscConfig+0x4e8>)
 80029cc:	f023 0301 	bic.w	r3, r3, #1
 80029d0:	6713      	str	r3, [r2, #112]	; 0x70
 80029d2:	4b72      	ldr	r3, [pc, #456]	; (8002b9c <HAL_RCC_OscConfig+0x4e8>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	4a71      	ldr	r2, [pc, #452]	; (8002b9c <HAL_RCC_OscConfig+0x4e8>)
 80029d8:	f023 0304 	bic.w	r3, r3, #4
 80029dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d015      	beq.n	8002a12 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e6:	f7fe fbab 	bl	8001140 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ec:	e00a      	b.n	8002a04 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7fe fba7 	bl	8001140 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e0c5      	b.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a04:	4b65      	ldr	r3, [pc, #404]	; (8002b9c <HAL_RCC_OscConfig+0x4e8>)
 8002a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0ee      	beq.n	80029ee <HAL_RCC_OscConfig+0x33a>
 8002a10:	e014      	b.n	8002a3c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a12:	f7fe fb95 	bl	8001140 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a18:	e00a      	b.n	8002a30 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a1a:	f7fe fb91 	bl	8001140 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e0af      	b.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a30:	4b5a      	ldr	r3, [pc, #360]	; (8002b9c <HAL_RCC_OscConfig+0x4e8>)
 8002a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1ee      	bne.n	8002a1a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a3c:	7dfb      	ldrb	r3, [r7, #23]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d105      	bne.n	8002a4e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a42:	4b56      	ldr	r3, [pc, #344]	; (8002b9c <HAL_RCC_OscConfig+0x4e8>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a55      	ldr	r2, [pc, #340]	; (8002b9c <HAL_RCC_OscConfig+0x4e8>)
 8002a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 809b 	beq.w	8002b8e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a58:	4b50      	ldr	r3, [pc, #320]	; (8002b9c <HAL_RCC_OscConfig+0x4e8>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d05c      	beq.n	8002b1e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d141      	bne.n	8002af0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6c:	4b4c      	ldr	r3, [pc, #304]	; (8002ba0 <HAL_RCC_OscConfig+0x4ec>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a72:	f7fe fb65 	bl	8001140 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a7a:	f7fe fb61 	bl	8001140 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e081      	b.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8c:	4b43      	ldr	r3, [pc, #268]	; (8002b9c <HAL_RCC_OscConfig+0x4e8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f0      	bne.n	8002a7a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69da      	ldr	r2, [r3, #28]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	019b      	lsls	r3, r3, #6
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	085b      	lsrs	r3, r3, #1
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	041b      	lsls	r3, r3, #16
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	061b      	lsls	r3, r3, #24
 8002abc:	4937      	ldr	r1, [pc, #220]	; (8002b9c <HAL_RCC_OscConfig+0x4e8>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac2:	4b37      	ldr	r3, [pc, #220]	; (8002ba0 <HAL_RCC_OscConfig+0x4ec>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fb3a 	bl	8001140 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7fe fb36 	bl	8001140 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e056      	b.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae2:	4b2e      	ldr	r3, [pc, #184]	; (8002b9c <HAL_RCC_OscConfig+0x4e8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x41c>
 8002aee:	e04e      	b.n	8002b8e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af0:	4b2b      	ldr	r3, [pc, #172]	; (8002ba0 <HAL_RCC_OscConfig+0x4ec>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af6:	f7fe fb23 	bl	8001140 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002afe:	f7fe fb1f 	bl	8001140 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e03f      	b.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b10:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <HAL_RCC_OscConfig+0x4e8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f0      	bne.n	8002afe <HAL_RCC_OscConfig+0x44a>
 8002b1c:	e037      	b.n	8002b8e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e032      	b.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b2a:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <HAL_RCC_OscConfig+0x4e8>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d028      	beq.n	8002b8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d121      	bne.n	8002b8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d11a      	bne.n	8002b8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b60:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d111      	bne.n	8002b8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	085b      	lsrs	r3, r3, #1
 8002b72:	3b01      	subs	r3, #1
 8002b74:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d107      	bne.n	8002b8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d001      	beq.n	8002b8e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40007000 	.word	0x40007000
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	42470060 	.word	0x42470060

08002ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0cc      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb8:	4b68      	ldr	r3, [pc, #416]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d90c      	bls.n	8002be0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc6:	4b65      	ldr	r3, [pc, #404]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bce:	4b63      	ldr	r3, [pc, #396]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0b8      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d020      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bf8:	4b59      	ldr	r3, [pc, #356]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	4a58      	ldr	r2, [pc, #352]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c10:	4b53      	ldr	r3, [pc, #332]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a52      	ldr	r2, [pc, #328]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c1c:	4b50      	ldr	r3, [pc, #320]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	494d      	ldr	r1, [pc, #308]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d044      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d107      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	4b47      	ldr	r3, [pc, #284]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d119      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e07f      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d003      	beq.n	8002c62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d107      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c62:	4b3f      	ldr	r3, [pc, #252]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e06f      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c72:	4b3b      	ldr	r3, [pc, #236]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e067      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c82:	4b37      	ldr	r3, [pc, #220]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f023 0203 	bic.w	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	4934      	ldr	r1, [pc, #208]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c94:	f7fe fa54 	bl	8001140 <HAL_GetTick>
 8002c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9a:	e00a      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c9c:	f7fe fa50 	bl	8001140 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e04f      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb2:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 020c 	and.w	r2, r3, #12
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d1eb      	bne.n	8002c9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc4:	4b25      	ldr	r3, [pc, #148]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d20c      	bcs.n	8002cec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd2:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e032      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf8:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4916      	ldr	r1, [pc, #88]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d16:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	490e      	ldr	r1, [pc, #56]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d2a:	f000 f821 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	490a      	ldr	r1, [pc, #40]	; (8002d64 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3c:	5ccb      	ldrb	r3, [r1, r3]
 8002d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d42:	4a09      	ldr	r2, [pc, #36]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d46:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe f9b4 	bl	80010b8 <HAL_InitTick>

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40023c00 	.word	0x40023c00
 8002d60:	40023800 	.word	0x40023800
 8002d64:	08004398 	.word	0x08004398
 8002d68:	20000000 	.word	0x20000000
 8002d6c:	20000004 	.word	0x20000004

08002d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	607b      	str	r3, [r7, #4]
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	2300      	movs	r3, #0
 8002d82:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d88:	4b67      	ldr	r3, [pc, #412]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d00d      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x40>
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	f200 80bd 	bhi.w	8002f14 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0x34>
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d003      	beq.n	8002daa <HAL_RCC_GetSysClockFreq+0x3a>
 8002da2:	e0b7      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da4:	4b61      	ldr	r3, [pc, #388]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002da6:	60bb      	str	r3, [r7, #8]
       break;
 8002da8:	e0b7      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002daa:	4b61      	ldr	r3, [pc, #388]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002dac:	60bb      	str	r3, [r7, #8]
      break;
 8002dae:	e0b4      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db0:	4b5d      	ldr	r3, [pc, #372]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002db8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dba:	4b5b      	ldr	r3, [pc, #364]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d04d      	beq.n	8002e62 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc6:	4b58      	ldr	r3, [pc, #352]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	099b      	lsrs	r3, r3, #6
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dd6:	f04f 0100 	mov.w	r1, #0
 8002dda:	ea02 0800 	and.w	r8, r2, r0
 8002dde:	ea03 0901 	and.w	r9, r3, r1
 8002de2:	4640      	mov	r0, r8
 8002de4:	4649      	mov	r1, r9
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	014b      	lsls	r3, r1, #5
 8002df0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002df4:	0142      	lsls	r2, r0, #5
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
 8002dfa:	ebb0 0008 	subs.w	r0, r0, r8
 8002dfe:	eb61 0109 	sbc.w	r1, r1, r9
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	018b      	lsls	r3, r1, #6
 8002e0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e10:	0182      	lsls	r2, r0, #6
 8002e12:	1a12      	subs	r2, r2, r0
 8002e14:	eb63 0301 	sbc.w	r3, r3, r1
 8002e18:	f04f 0000 	mov.w	r0, #0
 8002e1c:	f04f 0100 	mov.w	r1, #0
 8002e20:	00d9      	lsls	r1, r3, #3
 8002e22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e26:	00d0      	lsls	r0, r2, #3
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	eb12 0208 	adds.w	r2, r2, r8
 8002e30:	eb43 0309 	adc.w	r3, r3, r9
 8002e34:	f04f 0000 	mov.w	r0, #0
 8002e38:	f04f 0100 	mov.w	r1, #0
 8002e3c:	0259      	lsls	r1, r3, #9
 8002e3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002e42:	0250      	lsls	r0, r2, #9
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	f7fd fa1c 	bl	8000290 <__aeabi_uldivmod>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	e04a      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e62:	4b31      	ldr	r3, [pc, #196]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	099b      	lsrs	r3, r3, #6
 8002e68:	461a      	mov	r2, r3
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e72:	f04f 0100 	mov.w	r1, #0
 8002e76:	ea02 0400 	and.w	r4, r2, r0
 8002e7a:	ea03 0501 	and.w	r5, r3, r1
 8002e7e:	4620      	mov	r0, r4
 8002e80:	4629      	mov	r1, r5
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	014b      	lsls	r3, r1, #5
 8002e8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e90:	0142      	lsls	r2, r0, #5
 8002e92:	4610      	mov	r0, r2
 8002e94:	4619      	mov	r1, r3
 8002e96:	1b00      	subs	r0, r0, r4
 8002e98:	eb61 0105 	sbc.w	r1, r1, r5
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	018b      	lsls	r3, r1, #6
 8002ea6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002eaa:	0182      	lsls	r2, r0, #6
 8002eac:	1a12      	subs	r2, r2, r0
 8002eae:	eb63 0301 	sbc.w	r3, r3, r1
 8002eb2:	f04f 0000 	mov.w	r0, #0
 8002eb6:	f04f 0100 	mov.w	r1, #0
 8002eba:	00d9      	lsls	r1, r3, #3
 8002ebc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ec0:	00d0      	lsls	r0, r2, #3
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	1912      	adds	r2, r2, r4
 8002ec8:	eb45 0303 	adc.w	r3, r5, r3
 8002ecc:	f04f 0000 	mov.w	r0, #0
 8002ed0:	f04f 0100 	mov.w	r1, #0
 8002ed4:	0299      	lsls	r1, r3, #10
 8002ed6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002eda:	0290      	lsls	r0, r2, #10
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	f7fd f9d0 	bl	8000290 <__aeabi_uldivmod>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	0c1b      	lsrs	r3, r3, #16
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	3301      	adds	r3, #1
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f10:	60bb      	str	r3, [r7, #8]
      break;
 8002f12:	e002      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f14:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f16:	60bb      	str	r3, [r7, #8]
      break;
 8002f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f26:	bf00      	nop
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	00f42400 	.word	0x00f42400
 8002f30:	007a1200 	.word	0x007a1200

08002f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f38:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20000000 	.word	0x20000000

08002f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f50:	f7ff fff0 	bl	8002f34 <HAL_RCC_GetHCLKFreq>
 8002f54:	4602      	mov	r2, r0
 8002f56:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	0a9b      	lsrs	r3, r3, #10
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	4903      	ldr	r1, [pc, #12]	; (8002f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f62:	5ccb      	ldrb	r3, [r1, r3]
 8002f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	080043a8 	.word	0x080043a8

08002f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f78:	f7ff ffdc 	bl	8002f34 <HAL_RCC_GetHCLKFreq>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	0b5b      	lsrs	r3, r3, #13
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	4903      	ldr	r1, [pc, #12]	; (8002f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f8a:	5ccb      	ldrb	r3, [r1, r3]
 8002f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40023800 	.word	0x40023800
 8002f98:	080043a8 	.word	0x080043a8

08002f9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e041      	b.n	8003032 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fd ff92 	bl	8000eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	f000 f9c0 	bl	8003360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b01      	cmp	r3, #1
 800304e:	d001      	beq.n	8003054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e044      	b.n	80030de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a1e      	ldr	r2, [pc, #120]	; (80030ec <HAL_TIM_Base_Start_IT+0xb0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d018      	beq.n	80030a8 <HAL_TIM_Base_Start_IT+0x6c>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307e:	d013      	beq.n	80030a8 <HAL_TIM_Base_Start_IT+0x6c>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a1a      	ldr	r2, [pc, #104]	; (80030f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00e      	beq.n	80030a8 <HAL_TIM_Base_Start_IT+0x6c>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a19      	ldr	r2, [pc, #100]	; (80030f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d009      	beq.n	80030a8 <HAL_TIM_Base_Start_IT+0x6c>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a17      	ldr	r2, [pc, #92]	; (80030f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d004      	beq.n	80030a8 <HAL_TIM_Base_Start_IT+0x6c>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a16      	ldr	r2, [pc, #88]	; (80030fc <HAL_TIM_Base_Start_IT+0xc0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d111      	bne.n	80030cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2b06      	cmp	r3, #6
 80030b8:	d010      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0201 	orr.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ca:	e007      	b.n	80030dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40010000 	.word	0x40010000
 80030f0:	40000400 	.word	0x40000400
 80030f4:	40000800 	.word	0x40000800
 80030f8:	40000c00 	.word	0x40000c00
 80030fc:	40014000 	.word	0x40014000

08003100 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	d122      	bne.n	800315c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b02      	cmp	r3, #2
 8003122:	d11b      	bne.n	800315c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f06f 0202 	mvn.w	r2, #2
 800312c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f8ee 	bl	8003324 <HAL_TIM_IC_CaptureCallback>
 8003148:	e005      	b.n	8003156 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f8e0 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f8f1 	bl	8003338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b04      	cmp	r3, #4
 8003168:	d122      	bne.n	80031b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b04      	cmp	r3, #4
 8003176:	d11b      	bne.n	80031b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0204 	mvn.w	r2, #4
 8003180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2202      	movs	r2, #2
 8003186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f8c4 	bl	8003324 <HAL_TIM_IC_CaptureCallback>
 800319c:	e005      	b.n	80031aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f8b6 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f8c7 	bl	8003338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d122      	bne.n	8003204 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d11b      	bne.n	8003204 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0208 	mvn.w	r2, #8
 80031d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2204      	movs	r2, #4
 80031da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f89a 	bl	8003324 <HAL_TIM_IC_CaptureCallback>
 80031f0:	e005      	b.n	80031fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f88c 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f89d 	bl	8003338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b10      	cmp	r3, #16
 8003210:	d122      	bne.n	8003258 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	2b10      	cmp	r3, #16
 800321e:	d11b      	bne.n	8003258 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0210 	mvn.w	r2, #16
 8003228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2208      	movs	r2, #8
 800322e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f870 	bl	8003324 <HAL_TIM_IC_CaptureCallback>
 8003244:	e005      	b.n	8003252 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f862 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f873 	bl	8003338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b01      	cmp	r3, #1
 8003264:	d10e      	bne.n	8003284 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b01      	cmp	r3, #1
 8003272:	d107      	bne.n	8003284 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0201 	mvn.w	r2, #1
 800327c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fd fd52 	bl	8000d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328e:	2b80      	cmp	r3, #128	; 0x80
 8003290:	d10e      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329c:	2b80      	cmp	r3, #128	; 0x80
 800329e:	d107      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f8e2 	bl	8003474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ba:	2b40      	cmp	r3, #64	; 0x40
 80032bc:	d10e      	bne.n	80032dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c8:	2b40      	cmp	r3, #64	; 0x40
 80032ca:	d107      	bne.n	80032dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f838 	bl	800334c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d10e      	bne.n	8003308 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b20      	cmp	r3, #32
 80032f6:	d107      	bne.n	8003308 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0220 	mvn.w	r2, #32
 8003300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f8ac 	bl	8003460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a34      	ldr	r2, [pc, #208]	; (8003444 <TIM_Base_SetConfig+0xe4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d00f      	beq.n	8003398 <TIM_Base_SetConfig+0x38>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337e:	d00b      	beq.n	8003398 <TIM_Base_SetConfig+0x38>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a31      	ldr	r2, [pc, #196]	; (8003448 <TIM_Base_SetConfig+0xe8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d007      	beq.n	8003398 <TIM_Base_SetConfig+0x38>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a30      	ldr	r2, [pc, #192]	; (800344c <TIM_Base_SetConfig+0xec>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d003      	beq.n	8003398 <TIM_Base_SetConfig+0x38>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a2f      	ldr	r2, [pc, #188]	; (8003450 <TIM_Base_SetConfig+0xf0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d108      	bne.n	80033aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a25      	ldr	r2, [pc, #148]	; (8003444 <TIM_Base_SetConfig+0xe4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d01b      	beq.n	80033ea <TIM_Base_SetConfig+0x8a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b8:	d017      	beq.n	80033ea <TIM_Base_SetConfig+0x8a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a22      	ldr	r2, [pc, #136]	; (8003448 <TIM_Base_SetConfig+0xe8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d013      	beq.n	80033ea <TIM_Base_SetConfig+0x8a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a21      	ldr	r2, [pc, #132]	; (800344c <TIM_Base_SetConfig+0xec>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00f      	beq.n	80033ea <TIM_Base_SetConfig+0x8a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a20      	ldr	r2, [pc, #128]	; (8003450 <TIM_Base_SetConfig+0xf0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00b      	beq.n	80033ea <TIM_Base_SetConfig+0x8a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a1f      	ldr	r2, [pc, #124]	; (8003454 <TIM_Base_SetConfig+0xf4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d007      	beq.n	80033ea <TIM_Base_SetConfig+0x8a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a1e      	ldr	r2, [pc, #120]	; (8003458 <TIM_Base_SetConfig+0xf8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d003      	beq.n	80033ea <TIM_Base_SetConfig+0x8a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a1d      	ldr	r2, [pc, #116]	; (800345c <TIM_Base_SetConfig+0xfc>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d108      	bne.n	80033fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a08      	ldr	r2, [pc, #32]	; (8003444 <TIM_Base_SetConfig+0xe4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d103      	bne.n	8003430 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	615a      	str	r2, [r3, #20]
}
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40010000 	.word	0x40010000
 8003448:	40000400 	.word	0x40000400
 800344c:	40000800 	.word	0x40000800
 8003450:	40000c00 	.word	0x40000c00
 8003454:	40014000 	.word	0x40014000
 8003458:	40014400 	.word	0x40014400
 800345c:	40014800 	.word	0x40014800

08003460 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e03f      	b.n	800351a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fd fd6e 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2224      	movs	r2, #36	; 0x24
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f929 	bl	8003724 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003500:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b08a      	sub	sp, #40	; 0x28
 8003526:	af02      	add	r7, sp, #8
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	603b      	str	r3, [r7, #0]
 800352e:	4613      	mov	r3, r2
 8003530:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b20      	cmp	r3, #32
 8003540:	d17c      	bne.n	800363c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <HAL_UART_Transmit+0x2c>
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e075      	b.n	800363e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_UART_Transmit+0x3e>
 800355c:	2302      	movs	r3, #2
 800355e:	e06e      	b.n	800363e <HAL_UART_Transmit+0x11c>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2221      	movs	r2, #33	; 0x21
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003576:	f7fd fde3 	bl	8001140 <HAL_GetTick>
 800357a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	88fa      	ldrh	r2, [r7, #6]
 8003580:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	88fa      	ldrh	r2, [r7, #6]
 8003586:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003590:	d108      	bne.n	80035a4 <HAL_UART_Transmit+0x82>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d104      	bne.n	80035a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	61bb      	str	r3, [r7, #24]
 80035a2:	e003      	b.n	80035ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035b4:	e02a      	b.n	800360c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2200      	movs	r2, #0
 80035be:	2180      	movs	r1, #128	; 0x80
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f840 	bl	8003646 <UART_WaitOnFlagUntilTimeout>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e036      	b.n	800363e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10b      	bne.n	80035ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	3302      	adds	r3, #2
 80035ea:	61bb      	str	r3, [r7, #24]
 80035ec:	e007      	b.n	80035fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	781a      	ldrb	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	3301      	adds	r3, #1
 80035fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1cf      	bne.n	80035b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2200      	movs	r2, #0
 800361e:	2140      	movs	r1, #64	; 0x40
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f810 	bl	8003646 <UART_WaitOnFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e006      	b.n	800363e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	e000      	b.n	800363e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800363c:	2302      	movs	r3, #2
  }
}
 800363e:	4618      	mov	r0, r3
 8003640:	3720      	adds	r7, #32
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b090      	sub	sp, #64	; 0x40
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	4613      	mov	r3, r2
 8003654:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003656:	e050      	b.n	80036fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800365a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800365e:	d04c      	beq.n	80036fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003662:	2b00      	cmp	r3, #0
 8003664:	d007      	beq.n	8003676 <UART_WaitOnFlagUntilTimeout+0x30>
 8003666:	f7fd fd6b 	bl	8001140 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003672:	429a      	cmp	r2, r3
 8003674:	d241      	bcs.n	80036fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	330c      	adds	r3, #12
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003680:	e853 3f00 	ldrex	r3, [r3]
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800368c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	330c      	adds	r3, #12
 8003694:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003696:	637a      	str	r2, [r7, #52]	; 0x34
 8003698:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800369c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800369e:	e841 2300 	strex	r3, r2, [r1]
 80036a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1e5      	bne.n	8003676 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3314      	adds	r3, #20
 80036b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	613b      	str	r3, [r7, #16]
   return(result);
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f023 0301 	bic.w	r3, r3, #1
 80036c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3314      	adds	r3, #20
 80036c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036ca:	623a      	str	r2, [r7, #32]
 80036cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ce:	69f9      	ldr	r1, [r7, #28]
 80036d0:	6a3a      	ldr	r2, [r7, #32]
 80036d2:	e841 2300 	strex	r3, r2, [r1]
 80036d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1e5      	bne.n	80036aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e00f      	b.n	800371a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4013      	ands	r3, r2
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	429a      	cmp	r2, r3
 8003708:	bf0c      	ite	eq
 800370a:	2301      	moveq	r3, #1
 800370c:	2300      	movne	r3, #0
 800370e:	b2db      	uxtb	r3, r3
 8003710:	461a      	mov	r2, r3
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	429a      	cmp	r2, r3
 8003716:	d09f      	beq.n	8003658 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3740      	adds	r7, #64	; 0x40
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003728:	b09f      	sub	sp, #124	; 0x7c
 800372a:	af00      	add	r7, sp, #0
 800372c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800372e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373a:	68d9      	ldr	r1, [r3, #12]
 800373c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	ea40 0301 	orr.w	r3, r0, r1
 8003744:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	431a      	orrs	r2, r3
 8003750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	431a      	orrs	r2, r3
 8003756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	4313      	orrs	r3, r2
 800375c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800375e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003768:	f021 010c 	bic.w	r1, r1, #12
 800376c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003772:	430b      	orrs	r3, r1
 8003774:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003782:	6999      	ldr	r1, [r3, #24]
 8003784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	ea40 0301 	orr.w	r3, r0, r1
 800378c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800378e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	4bc5      	ldr	r3, [pc, #788]	; (8003aa8 <UART_SetConfig+0x384>)
 8003794:	429a      	cmp	r2, r3
 8003796:	d004      	beq.n	80037a2 <UART_SetConfig+0x7e>
 8003798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	4bc3      	ldr	r3, [pc, #780]	; (8003aac <UART_SetConfig+0x388>)
 800379e:	429a      	cmp	r2, r3
 80037a0:	d103      	bne.n	80037aa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037a2:	f7ff fbe7 	bl	8002f74 <HAL_RCC_GetPCLK2Freq>
 80037a6:	6778      	str	r0, [r7, #116]	; 0x74
 80037a8:	e002      	b.n	80037b0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037aa:	f7ff fbcf 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 80037ae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b8:	f040 80b6 	bne.w	8003928 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037be:	461c      	mov	r4, r3
 80037c0:	f04f 0500 	mov.w	r5, #0
 80037c4:	4622      	mov	r2, r4
 80037c6:	462b      	mov	r3, r5
 80037c8:	1891      	adds	r1, r2, r2
 80037ca:	6439      	str	r1, [r7, #64]	; 0x40
 80037cc:	415b      	adcs	r3, r3
 80037ce:	647b      	str	r3, [r7, #68]	; 0x44
 80037d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037d4:	1912      	adds	r2, r2, r4
 80037d6:	eb45 0303 	adc.w	r3, r5, r3
 80037da:	f04f 0000 	mov.w	r0, #0
 80037de:	f04f 0100 	mov.w	r1, #0
 80037e2:	00d9      	lsls	r1, r3, #3
 80037e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037e8:	00d0      	lsls	r0, r2, #3
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	1911      	adds	r1, r2, r4
 80037f0:	6639      	str	r1, [r7, #96]	; 0x60
 80037f2:	416b      	adcs	r3, r5
 80037f4:	667b      	str	r3, [r7, #100]	; 0x64
 80037f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	461a      	mov	r2, r3
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	1891      	adds	r1, r2, r2
 8003802:	63b9      	str	r1, [r7, #56]	; 0x38
 8003804:	415b      	adcs	r3, r3
 8003806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003808:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800380c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003810:	f7fc fd3e 	bl	8000290 <__aeabi_uldivmod>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4ba5      	ldr	r3, [pc, #660]	; (8003ab0 <UART_SetConfig+0x38c>)
 800381a:	fba3 2302 	umull	r2, r3, r3, r2
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	011e      	lsls	r6, r3, #4
 8003822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003824:	461c      	mov	r4, r3
 8003826:	f04f 0500 	mov.w	r5, #0
 800382a:	4622      	mov	r2, r4
 800382c:	462b      	mov	r3, r5
 800382e:	1891      	adds	r1, r2, r2
 8003830:	6339      	str	r1, [r7, #48]	; 0x30
 8003832:	415b      	adcs	r3, r3
 8003834:	637b      	str	r3, [r7, #52]	; 0x34
 8003836:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800383a:	1912      	adds	r2, r2, r4
 800383c:	eb45 0303 	adc.w	r3, r5, r3
 8003840:	f04f 0000 	mov.w	r0, #0
 8003844:	f04f 0100 	mov.w	r1, #0
 8003848:	00d9      	lsls	r1, r3, #3
 800384a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800384e:	00d0      	lsls	r0, r2, #3
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	1911      	adds	r1, r2, r4
 8003856:	65b9      	str	r1, [r7, #88]	; 0x58
 8003858:	416b      	adcs	r3, r5
 800385a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800385c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	461a      	mov	r2, r3
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	1891      	adds	r1, r2, r2
 8003868:	62b9      	str	r1, [r7, #40]	; 0x28
 800386a:	415b      	adcs	r3, r3
 800386c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800386e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003872:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003876:	f7fc fd0b 	bl	8000290 <__aeabi_uldivmod>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4b8c      	ldr	r3, [pc, #560]	; (8003ab0 <UART_SetConfig+0x38c>)
 8003880:	fba3 1302 	umull	r1, r3, r3, r2
 8003884:	095b      	lsrs	r3, r3, #5
 8003886:	2164      	movs	r1, #100	; 0x64
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	3332      	adds	r3, #50	; 0x32
 8003892:	4a87      	ldr	r2, [pc, #540]	; (8003ab0 <UART_SetConfig+0x38c>)
 8003894:	fba2 2303 	umull	r2, r3, r2, r3
 8003898:	095b      	lsrs	r3, r3, #5
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038a0:	441e      	add	r6, r3
 80038a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038a4:	4618      	mov	r0, r3
 80038a6:	f04f 0100 	mov.w	r1, #0
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	1894      	adds	r4, r2, r2
 80038b0:	623c      	str	r4, [r7, #32]
 80038b2:	415b      	adcs	r3, r3
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
 80038b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038ba:	1812      	adds	r2, r2, r0
 80038bc:	eb41 0303 	adc.w	r3, r1, r3
 80038c0:	f04f 0400 	mov.w	r4, #0
 80038c4:	f04f 0500 	mov.w	r5, #0
 80038c8:	00dd      	lsls	r5, r3, #3
 80038ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80038ce:	00d4      	lsls	r4, r2, #3
 80038d0:	4622      	mov	r2, r4
 80038d2:	462b      	mov	r3, r5
 80038d4:	1814      	adds	r4, r2, r0
 80038d6:	653c      	str	r4, [r7, #80]	; 0x50
 80038d8:	414b      	adcs	r3, r1
 80038da:	657b      	str	r3, [r7, #84]	; 0x54
 80038dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	461a      	mov	r2, r3
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	1891      	adds	r1, r2, r2
 80038e8:	61b9      	str	r1, [r7, #24]
 80038ea:	415b      	adcs	r3, r3
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80038f6:	f7fc fccb 	bl	8000290 <__aeabi_uldivmod>
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4b6c      	ldr	r3, [pc, #432]	; (8003ab0 <UART_SetConfig+0x38c>)
 8003900:	fba3 1302 	umull	r1, r3, r3, r2
 8003904:	095b      	lsrs	r3, r3, #5
 8003906:	2164      	movs	r1, #100	; 0x64
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	3332      	adds	r3, #50	; 0x32
 8003912:	4a67      	ldr	r2, [pc, #412]	; (8003ab0 <UART_SetConfig+0x38c>)
 8003914:	fba2 2303 	umull	r2, r3, r2, r3
 8003918:	095b      	lsrs	r3, r3, #5
 800391a:	f003 0207 	and.w	r2, r3, #7
 800391e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4432      	add	r2, r6
 8003924:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003926:	e0b9      	b.n	8003a9c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003928:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800392a:	461c      	mov	r4, r3
 800392c:	f04f 0500 	mov.w	r5, #0
 8003930:	4622      	mov	r2, r4
 8003932:	462b      	mov	r3, r5
 8003934:	1891      	adds	r1, r2, r2
 8003936:	6139      	str	r1, [r7, #16]
 8003938:	415b      	adcs	r3, r3
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003940:	1912      	adds	r2, r2, r4
 8003942:	eb45 0303 	adc.w	r3, r5, r3
 8003946:	f04f 0000 	mov.w	r0, #0
 800394a:	f04f 0100 	mov.w	r1, #0
 800394e:	00d9      	lsls	r1, r3, #3
 8003950:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003954:	00d0      	lsls	r0, r2, #3
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	eb12 0804 	adds.w	r8, r2, r4
 800395e:	eb43 0905 	adc.w	r9, r3, r5
 8003962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4618      	mov	r0, r3
 8003968:	f04f 0100 	mov.w	r1, #0
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	008b      	lsls	r3, r1, #2
 8003976:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800397a:	0082      	lsls	r2, r0, #2
 800397c:	4640      	mov	r0, r8
 800397e:	4649      	mov	r1, r9
 8003980:	f7fc fc86 	bl	8000290 <__aeabi_uldivmod>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4b49      	ldr	r3, [pc, #292]	; (8003ab0 <UART_SetConfig+0x38c>)
 800398a:	fba3 2302 	umull	r2, r3, r3, r2
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	011e      	lsls	r6, r3, #4
 8003992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003994:	4618      	mov	r0, r3
 8003996:	f04f 0100 	mov.w	r1, #0
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	1894      	adds	r4, r2, r2
 80039a0:	60bc      	str	r4, [r7, #8]
 80039a2:	415b      	adcs	r3, r3
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039aa:	1812      	adds	r2, r2, r0
 80039ac:	eb41 0303 	adc.w	r3, r1, r3
 80039b0:	f04f 0400 	mov.w	r4, #0
 80039b4:	f04f 0500 	mov.w	r5, #0
 80039b8:	00dd      	lsls	r5, r3, #3
 80039ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039be:	00d4      	lsls	r4, r2, #3
 80039c0:	4622      	mov	r2, r4
 80039c2:	462b      	mov	r3, r5
 80039c4:	1814      	adds	r4, r2, r0
 80039c6:	64bc      	str	r4, [r7, #72]	; 0x48
 80039c8:	414b      	adcs	r3, r1
 80039ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f04f 0100 	mov.w	r1, #0
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	008b      	lsls	r3, r1, #2
 80039e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039e4:	0082      	lsls	r2, r0, #2
 80039e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80039ea:	f7fc fc51 	bl	8000290 <__aeabi_uldivmod>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4b2f      	ldr	r3, [pc, #188]	; (8003ab0 <UART_SetConfig+0x38c>)
 80039f4:	fba3 1302 	umull	r1, r3, r3, r2
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	2164      	movs	r1, #100	; 0x64
 80039fc:	fb01 f303 	mul.w	r3, r1, r3
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	3332      	adds	r3, #50	; 0x32
 8003a06:	4a2a      	ldr	r2, [pc, #168]	; (8003ab0 <UART_SetConfig+0x38c>)
 8003a08:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a12:	441e      	add	r6, r3
 8003a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a16:	4618      	mov	r0, r3
 8003a18:	f04f 0100 	mov.w	r1, #0
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	1894      	adds	r4, r2, r2
 8003a22:	603c      	str	r4, [r7, #0]
 8003a24:	415b      	adcs	r3, r3
 8003a26:	607b      	str	r3, [r7, #4]
 8003a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a2c:	1812      	adds	r2, r2, r0
 8003a2e:	eb41 0303 	adc.w	r3, r1, r3
 8003a32:	f04f 0400 	mov.w	r4, #0
 8003a36:	f04f 0500 	mov.w	r5, #0
 8003a3a:	00dd      	lsls	r5, r3, #3
 8003a3c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a40:	00d4      	lsls	r4, r2, #3
 8003a42:	4622      	mov	r2, r4
 8003a44:	462b      	mov	r3, r5
 8003a46:	eb12 0a00 	adds.w	sl, r2, r0
 8003a4a:	eb43 0b01 	adc.w	fp, r3, r1
 8003a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f04f 0100 	mov.w	r1, #0
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	008b      	lsls	r3, r1, #2
 8003a62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a66:	0082      	lsls	r2, r0, #2
 8003a68:	4650      	mov	r0, sl
 8003a6a:	4659      	mov	r1, fp
 8003a6c:	f7fc fc10 	bl	8000290 <__aeabi_uldivmod>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <UART_SetConfig+0x38c>)
 8003a76:	fba3 1302 	umull	r1, r3, r3, r2
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	2164      	movs	r1, #100	; 0x64
 8003a7e:	fb01 f303 	mul.w	r3, r1, r3
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	3332      	adds	r3, #50	; 0x32
 8003a88:	4a09      	ldr	r2, [pc, #36]	; (8003ab0 <UART_SetConfig+0x38c>)
 8003a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	f003 020f 	and.w	r2, r3, #15
 8003a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4432      	add	r2, r6
 8003a9a:	609a      	str	r2, [r3, #8]
}
 8003a9c:	bf00      	nop
 8003a9e:	377c      	adds	r7, #124	; 0x7c
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40011000 	.word	0x40011000
 8003aac:	40011400 	.word	0x40011400
 8003ab0:	51eb851f 	.word	0x51eb851f

08003ab4 <__errno>:
 8003ab4:	4b01      	ldr	r3, [pc, #4]	; (8003abc <__errno+0x8>)
 8003ab6:	6818      	ldr	r0, [r3, #0]
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	2000000c 	.word	0x2000000c

08003ac0 <__libc_init_array>:
 8003ac0:	b570      	push	{r4, r5, r6, lr}
 8003ac2:	4d0d      	ldr	r5, [pc, #52]	; (8003af8 <__libc_init_array+0x38>)
 8003ac4:	4c0d      	ldr	r4, [pc, #52]	; (8003afc <__libc_init_array+0x3c>)
 8003ac6:	1b64      	subs	r4, r4, r5
 8003ac8:	10a4      	asrs	r4, r4, #2
 8003aca:	2600      	movs	r6, #0
 8003acc:	42a6      	cmp	r6, r4
 8003ace:	d109      	bne.n	8003ae4 <__libc_init_array+0x24>
 8003ad0:	4d0b      	ldr	r5, [pc, #44]	; (8003b00 <__libc_init_array+0x40>)
 8003ad2:	4c0c      	ldr	r4, [pc, #48]	; (8003b04 <__libc_init_array+0x44>)
 8003ad4:	f000 fc4e 	bl	8004374 <_init>
 8003ad8:	1b64      	subs	r4, r4, r5
 8003ada:	10a4      	asrs	r4, r4, #2
 8003adc:	2600      	movs	r6, #0
 8003ade:	42a6      	cmp	r6, r4
 8003ae0:	d105      	bne.n	8003aee <__libc_init_array+0x2e>
 8003ae2:	bd70      	pop	{r4, r5, r6, pc}
 8003ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae8:	4798      	blx	r3
 8003aea:	3601      	adds	r6, #1
 8003aec:	e7ee      	b.n	8003acc <__libc_init_array+0xc>
 8003aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003af2:	4798      	blx	r3
 8003af4:	3601      	adds	r6, #1
 8003af6:	e7f2      	b.n	8003ade <__libc_init_array+0x1e>
 8003af8:	080043ec 	.word	0x080043ec
 8003afc:	080043ec 	.word	0x080043ec
 8003b00:	080043ec 	.word	0x080043ec
 8003b04:	080043f0 	.word	0x080043f0

08003b08 <memset>:
 8003b08:	4402      	add	r2, r0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d100      	bne.n	8003b12 <memset+0xa>
 8003b10:	4770      	bx	lr
 8003b12:	f803 1b01 	strb.w	r1, [r3], #1
 8003b16:	e7f9      	b.n	8003b0c <memset+0x4>

08003b18 <siprintf>:
 8003b18:	b40e      	push	{r1, r2, r3}
 8003b1a:	b500      	push	{lr}
 8003b1c:	b09c      	sub	sp, #112	; 0x70
 8003b1e:	ab1d      	add	r3, sp, #116	; 0x74
 8003b20:	9002      	str	r0, [sp, #8]
 8003b22:	9006      	str	r0, [sp, #24]
 8003b24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b28:	4809      	ldr	r0, [pc, #36]	; (8003b50 <siprintf+0x38>)
 8003b2a:	9107      	str	r1, [sp, #28]
 8003b2c:	9104      	str	r1, [sp, #16]
 8003b2e:	4909      	ldr	r1, [pc, #36]	; (8003b54 <siprintf+0x3c>)
 8003b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b34:	9105      	str	r1, [sp, #20]
 8003b36:	6800      	ldr	r0, [r0, #0]
 8003b38:	9301      	str	r3, [sp, #4]
 8003b3a:	a902      	add	r1, sp, #8
 8003b3c:	f000 f868 	bl	8003c10 <_svfiprintf_r>
 8003b40:	9b02      	ldr	r3, [sp, #8]
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
 8003b46:	b01c      	add	sp, #112	; 0x70
 8003b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b4c:	b003      	add	sp, #12
 8003b4e:	4770      	bx	lr
 8003b50:	2000000c 	.word	0x2000000c
 8003b54:	ffff0208 	.word	0xffff0208

08003b58 <__ssputs_r>:
 8003b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b5c:	688e      	ldr	r6, [r1, #8]
 8003b5e:	429e      	cmp	r6, r3
 8003b60:	4682      	mov	sl, r0
 8003b62:	460c      	mov	r4, r1
 8003b64:	4690      	mov	r8, r2
 8003b66:	461f      	mov	r7, r3
 8003b68:	d838      	bhi.n	8003bdc <__ssputs_r+0x84>
 8003b6a:	898a      	ldrh	r2, [r1, #12]
 8003b6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b70:	d032      	beq.n	8003bd8 <__ssputs_r+0x80>
 8003b72:	6825      	ldr	r5, [r4, #0]
 8003b74:	6909      	ldr	r1, [r1, #16]
 8003b76:	eba5 0901 	sub.w	r9, r5, r1
 8003b7a:	6965      	ldr	r5, [r4, #20]
 8003b7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b84:	3301      	adds	r3, #1
 8003b86:	444b      	add	r3, r9
 8003b88:	106d      	asrs	r5, r5, #1
 8003b8a:	429d      	cmp	r5, r3
 8003b8c:	bf38      	it	cc
 8003b8e:	461d      	movcc	r5, r3
 8003b90:	0553      	lsls	r3, r2, #21
 8003b92:	d531      	bpl.n	8003bf8 <__ssputs_r+0xa0>
 8003b94:	4629      	mov	r1, r5
 8003b96:	f000 fb47 	bl	8004228 <_malloc_r>
 8003b9a:	4606      	mov	r6, r0
 8003b9c:	b950      	cbnz	r0, 8003bb4 <__ssputs_r+0x5c>
 8003b9e:	230c      	movs	r3, #12
 8003ba0:	f8ca 3000 	str.w	r3, [sl]
 8003ba4:	89a3      	ldrh	r3, [r4, #12]
 8003ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003baa:	81a3      	strh	r3, [r4, #12]
 8003bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bb4:	6921      	ldr	r1, [r4, #16]
 8003bb6:	464a      	mov	r2, r9
 8003bb8:	f000 fabe 	bl	8004138 <memcpy>
 8003bbc:	89a3      	ldrh	r3, [r4, #12]
 8003bbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bc6:	81a3      	strh	r3, [r4, #12]
 8003bc8:	6126      	str	r6, [r4, #16]
 8003bca:	6165      	str	r5, [r4, #20]
 8003bcc:	444e      	add	r6, r9
 8003bce:	eba5 0509 	sub.w	r5, r5, r9
 8003bd2:	6026      	str	r6, [r4, #0]
 8003bd4:	60a5      	str	r5, [r4, #8]
 8003bd6:	463e      	mov	r6, r7
 8003bd8:	42be      	cmp	r6, r7
 8003bda:	d900      	bls.n	8003bde <__ssputs_r+0x86>
 8003bdc:	463e      	mov	r6, r7
 8003bde:	4632      	mov	r2, r6
 8003be0:	6820      	ldr	r0, [r4, #0]
 8003be2:	4641      	mov	r1, r8
 8003be4:	f000 fab6 	bl	8004154 <memmove>
 8003be8:	68a3      	ldr	r3, [r4, #8]
 8003bea:	6822      	ldr	r2, [r4, #0]
 8003bec:	1b9b      	subs	r3, r3, r6
 8003bee:	4432      	add	r2, r6
 8003bf0:	60a3      	str	r3, [r4, #8]
 8003bf2:	6022      	str	r2, [r4, #0]
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	e7db      	b.n	8003bb0 <__ssputs_r+0x58>
 8003bf8:	462a      	mov	r2, r5
 8003bfa:	f000 fb6f 	bl	80042dc <_realloc_r>
 8003bfe:	4606      	mov	r6, r0
 8003c00:	2800      	cmp	r0, #0
 8003c02:	d1e1      	bne.n	8003bc8 <__ssputs_r+0x70>
 8003c04:	6921      	ldr	r1, [r4, #16]
 8003c06:	4650      	mov	r0, sl
 8003c08:	f000 fabe 	bl	8004188 <_free_r>
 8003c0c:	e7c7      	b.n	8003b9e <__ssputs_r+0x46>
	...

08003c10 <_svfiprintf_r>:
 8003c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c14:	4698      	mov	r8, r3
 8003c16:	898b      	ldrh	r3, [r1, #12]
 8003c18:	061b      	lsls	r3, r3, #24
 8003c1a:	b09d      	sub	sp, #116	; 0x74
 8003c1c:	4607      	mov	r7, r0
 8003c1e:	460d      	mov	r5, r1
 8003c20:	4614      	mov	r4, r2
 8003c22:	d50e      	bpl.n	8003c42 <_svfiprintf_r+0x32>
 8003c24:	690b      	ldr	r3, [r1, #16]
 8003c26:	b963      	cbnz	r3, 8003c42 <_svfiprintf_r+0x32>
 8003c28:	2140      	movs	r1, #64	; 0x40
 8003c2a:	f000 fafd 	bl	8004228 <_malloc_r>
 8003c2e:	6028      	str	r0, [r5, #0]
 8003c30:	6128      	str	r0, [r5, #16]
 8003c32:	b920      	cbnz	r0, 8003c3e <_svfiprintf_r+0x2e>
 8003c34:	230c      	movs	r3, #12
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c3c:	e0d1      	b.n	8003de2 <_svfiprintf_r+0x1d2>
 8003c3e:	2340      	movs	r3, #64	; 0x40
 8003c40:	616b      	str	r3, [r5, #20]
 8003c42:	2300      	movs	r3, #0
 8003c44:	9309      	str	r3, [sp, #36]	; 0x24
 8003c46:	2320      	movs	r3, #32
 8003c48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c50:	2330      	movs	r3, #48	; 0x30
 8003c52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003dfc <_svfiprintf_r+0x1ec>
 8003c56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c5a:	f04f 0901 	mov.w	r9, #1
 8003c5e:	4623      	mov	r3, r4
 8003c60:	469a      	mov	sl, r3
 8003c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c66:	b10a      	cbz	r2, 8003c6c <_svfiprintf_r+0x5c>
 8003c68:	2a25      	cmp	r2, #37	; 0x25
 8003c6a:	d1f9      	bne.n	8003c60 <_svfiprintf_r+0x50>
 8003c6c:	ebba 0b04 	subs.w	fp, sl, r4
 8003c70:	d00b      	beq.n	8003c8a <_svfiprintf_r+0x7a>
 8003c72:	465b      	mov	r3, fp
 8003c74:	4622      	mov	r2, r4
 8003c76:	4629      	mov	r1, r5
 8003c78:	4638      	mov	r0, r7
 8003c7a:	f7ff ff6d 	bl	8003b58 <__ssputs_r>
 8003c7e:	3001      	adds	r0, #1
 8003c80:	f000 80aa 	beq.w	8003dd8 <_svfiprintf_r+0x1c8>
 8003c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c86:	445a      	add	r2, fp
 8003c88:	9209      	str	r2, [sp, #36]	; 0x24
 8003c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 80a2 	beq.w	8003dd8 <_svfiprintf_r+0x1c8>
 8003c94:	2300      	movs	r3, #0
 8003c96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c9e:	f10a 0a01 	add.w	sl, sl, #1
 8003ca2:	9304      	str	r3, [sp, #16]
 8003ca4:	9307      	str	r3, [sp, #28]
 8003ca6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003caa:	931a      	str	r3, [sp, #104]	; 0x68
 8003cac:	4654      	mov	r4, sl
 8003cae:	2205      	movs	r2, #5
 8003cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cb4:	4851      	ldr	r0, [pc, #324]	; (8003dfc <_svfiprintf_r+0x1ec>)
 8003cb6:	f7fc fa9b 	bl	80001f0 <memchr>
 8003cba:	9a04      	ldr	r2, [sp, #16]
 8003cbc:	b9d8      	cbnz	r0, 8003cf6 <_svfiprintf_r+0xe6>
 8003cbe:	06d0      	lsls	r0, r2, #27
 8003cc0:	bf44      	itt	mi
 8003cc2:	2320      	movmi	r3, #32
 8003cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cc8:	0711      	lsls	r1, r2, #28
 8003cca:	bf44      	itt	mi
 8003ccc:	232b      	movmi	r3, #43	; 0x2b
 8003cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8003cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8003cd8:	d015      	beq.n	8003d06 <_svfiprintf_r+0xf6>
 8003cda:	9a07      	ldr	r2, [sp, #28]
 8003cdc:	4654      	mov	r4, sl
 8003cde:	2000      	movs	r0, #0
 8003ce0:	f04f 0c0a 	mov.w	ip, #10
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cea:	3b30      	subs	r3, #48	; 0x30
 8003cec:	2b09      	cmp	r3, #9
 8003cee:	d94e      	bls.n	8003d8e <_svfiprintf_r+0x17e>
 8003cf0:	b1b0      	cbz	r0, 8003d20 <_svfiprintf_r+0x110>
 8003cf2:	9207      	str	r2, [sp, #28]
 8003cf4:	e014      	b.n	8003d20 <_svfiprintf_r+0x110>
 8003cf6:	eba0 0308 	sub.w	r3, r0, r8
 8003cfa:	fa09 f303 	lsl.w	r3, r9, r3
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	9304      	str	r3, [sp, #16]
 8003d02:	46a2      	mov	sl, r4
 8003d04:	e7d2      	b.n	8003cac <_svfiprintf_r+0x9c>
 8003d06:	9b03      	ldr	r3, [sp, #12]
 8003d08:	1d19      	adds	r1, r3, #4
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	9103      	str	r1, [sp, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	bfbb      	ittet	lt
 8003d12:	425b      	neglt	r3, r3
 8003d14:	f042 0202 	orrlt.w	r2, r2, #2
 8003d18:	9307      	strge	r3, [sp, #28]
 8003d1a:	9307      	strlt	r3, [sp, #28]
 8003d1c:	bfb8      	it	lt
 8003d1e:	9204      	strlt	r2, [sp, #16]
 8003d20:	7823      	ldrb	r3, [r4, #0]
 8003d22:	2b2e      	cmp	r3, #46	; 0x2e
 8003d24:	d10c      	bne.n	8003d40 <_svfiprintf_r+0x130>
 8003d26:	7863      	ldrb	r3, [r4, #1]
 8003d28:	2b2a      	cmp	r3, #42	; 0x2a
 8003d2a:	d135      	bne.n	8003d98 <_svfiprintf_r+0x188>
 8003d2c:	9b03      	ldr	r3, [sp, #12]
 8003d2e:	1d1a      	adds	r2, r3, #4
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	9203      	str	r2, [sp, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bfb8      	it	lt
 8003d38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003d3c:	3402      	adds	r4, #2
 8003d3e:	9305      	str	r3, [sp, #20]
 8003d40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003e0c <_svfiprintf_r+0x1fc>
 8003d44:	7821      	ldrb	r1, [r4, #0]
 8003d46:	2203      	movs	r2, #3
 8003d48:	4650      	mov	r0, sl
 8003d4a:	f7fc fa51 	bl	80001f0 <memchr>
 8003d4e:	b140      	cbz	r0, 8003d62 <_svfiprintf_r+0x152>
 8003d50:	2340      	movs	r3, #64	; 0x40
 8003d52:	eba0 000a 	sub.w	r0, r0, sl
 8003d56:	fa03 f000 	lsl.w	r0, r3, r0
 8003d5a:	9b04      	ldr	r3, [sp, #16]
 8003d5c:	4303      	orrs	r3, r0
 8003d5e:	3401      	adds	r4, #1
 8003d60:	9304      	str	r3, [sp, #16]
 8003d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d66:	4826      	ldr	r0, [pc, #152]	; (8003e00 <_svfiprintf_r+0x1f0>)
 8003d68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d6c:	2206      	movs	r2, #6
 8003d6e:	f7fc fa3f 	bl	80001f0 <memchr>
 8003d72:	2800      	cmp	r0, #0
 8003d74:	d038      	beq.n	8003de8 <_svfiprintf_r+0x1d8>
 8003d76:	4b23      	ldr	r3, [pc, #140]	; (8003e04 <_svfiprintf_r+0x1f4>)
 8003d78:	bb1b      	cbnz	r3, 8003dc2 <_svfiprintf_r+0x1b2>
 8003d7a:	9b03      	ldr	r3, [sp, #12]
 8003d7c:	3307      	adds	r3, #7
 8003d7e:	f023 0307 	bic.w	r3, r3, #7
 8003d82:	3308      	adds	r3, #8
 8003d84:	9303      	str	r3, [sp, #12]
 8003d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d88:	4433      	add	r3, r6
 8003d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d8c:	e767      	b.n	8003c5e <_svfiprintf_r+0x4e>
 8003d8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d92:	460c      	mov	r4, r1
 8003d94:	2001      	movs	r0, #1
 8003d96:	e7a5      	b.n	8003ce4 <_svfiprintf_r+0xd4>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	3401      	adds	r4, #1
 8003d9c:	9305      	str	r3, [sp, #20]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	f04f 0c0a 	mov.w	ip, #10
 8003da4:	4620      	mov	r0, r4
 8003da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003daa:	3a30      	subs	r2, #48	; 0x30
 8003dac:	2a09      	cmp	r2, #9
 8003dae:	d903      	bls.n	8003db8 <_svfiprintf_r+0x1a8>
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0c5      	beq.n	8003d40 <_svfiprintf_r+0x130>
 8003db4:	9105      	str	r1, [sp, #20]
 8003db6:	e7c3      	b.n	8003d40 <_svfiprintf_r+0x130>
 8003db8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dbc:	4604      	mov	r4, r0
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e7f0      	b.n	8003da4 <_svfiprintf_r+0x194>
 8003dc2:	ab03      	add	r3, sp, #12
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	462a      	mov	r2, r5
 8003dc8:	4b0f      	ldr	r3, [pc, #60]	; (8003e08 <_svfiprintf_r+0x1f8>)
 8003dca:	a904      	add	r1, sp, #16
 8003dcc:	4638      	mov	r0, r7
 8003dce:	f3af 8000 	nop.w
 8003dd2:	1c42      	adds	r2, r0, #1
 8003dd4:	4606      	mov	r6, r0
 8003dd6:	d1d6      	bne.n	8003d86 <_svfiprintf_r+0x176>
 8003dd8:	89ab      	ldrh	r3, [r5, #12]
 8003dda:	065b      	lsls	r3, r3, #25
 8003ddc:	f53f af2c 	bmi.w	8003c38 <_svfiprintf_r+0x28>
 8003de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003de2:	b01d      	add	sp, #116	; 0x74
 8003de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003de8:	ab03      	add	r3, sp, #12
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	462a      	mov	r2, r5
 8003dee:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <_svfiprintf_r+0x1f8>)
 8003df0:	a904      	add	r1, sp, #16
 8003df2:	4638      	mov	r0, r7
 8003df4:	f000 f87a 	bl	8003eec <_printf_i>
 8003df8:	e7eb      	b.n	8003dd2 <_svfiprintf_r+0x1c2>
 8003dfa:	bf00      	nop
 8003dfc:	080043b0 	.word	0x080043b0
 8003e00:	080043ba 	.word	0x080043ba
 8003e04:	00000000 	.word	0x00000000
 8003e08:	08003b59 	.word	0x08003b59
 8003e0c:	080043b6 	.word	0x080043b6

08003e10 <_printf_common>:
 8003e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e14:	4616      	mov	r6, r2
 8003e16:	4699      	mov	r9, r3
 8003e18:	688a      	ldr	r2, [r1, #8]
 8003e1a:	690b      	ldr	r3, [r1, #16]
 8003e1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e20:	4293      	cmp	r3, r2
 8003e22:	bfb8      	it	lt
 8003e24:	4613      	movlt	r3, r2
 8003e26:	6033      	str	r3, [r6, #0]
 8003e28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e2c:	4607      	mov	r7, r0
 8003e2e:	460c      	mov	r4, r1
 8003e30:	b10a      	cbz	r2, 8003e36 <_printf_common+0x26>
 8003e32:	3301      	adds	r3, #1
 8003e34:	6033      	str	r3, [r6, #0]
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	0699      	lsls	r1, r3, #26
 8003e3a:	bf42      	ittt	mi
 8003e3c:	6833      	ldrmi	r3, [r6, #0]
 8003e3e:	3302      	addmi	r3, #2
 8003e40:	6033      	strmi	r3, [r6, #0]
 8003e42:	6825      	ldr	r5, [r4, #0]
 8003e44:	f015 0506 	ands.w	r5, r5, #6
 8003e48:	d106      	bne.n	8003e58 <_printf_common+0x48>
 8003e4a:	f104 0a19 	add.w	sl, r4, #25
 8003e4e:	68e3      	ldr	r3, [r4, #12]
 8003e50:	6832      	ldr	r2, [r6, #0]
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	42ab      	cmp	r3, r5
 8003e56:	dc26      	bgt.n	8003ea6 <_printf_common+0x96>
 8003e58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e5c:	1e13      	subs	r3, r2, #0
 8003e5e:	6822      	ldr	r2, [r4, #0]
 8003e60:	bf18      	it	ne
 8003e62:	2301      	movne	r3, #1
 8003e64:	0692      	lsls	r2, r2, #26
 8003e66:	d42b      	bmi.n	8003ec0 <_printf_common+0xb0>
 8003e68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e6c:	4649      	mov	r1, r9
 8003e6e:	4638      	mov	r0, r7
 8003e70:	47c0      	blx	r8
 8003e72:	3001      	adds	r0, #1
 8003e74:	d01e      	beq.n	8003eb4 <_printf_common+0xa4>
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	68e5      	ldr	r5, [r4, #12]
 8003e7a:	6832      	ldr	r2, [r6, #0]
 8003e7c:	f003 0306 	and.w	r3, r3, #6
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	bf08      	it	eq
 8003e84:	1aad      	subeq	r5, r5, r2
 8003e86:	68a3      	ldr	r3, [r4, #8]
 8003e88:	6922      	ldr	r2, [r4, #16]
 8003e8a:	bf0c      	ite	eq
 8003e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e90:	2500      	movne	r5, #0
 8003e92:	4293      	cmp	r3, r2
 8003e94:	bfc4      	itt	gt
 8003e96:	1a9b      	subgt	r3, r3, r2
 8003e98:	18ed      	addgt	r5, r5, r3
 8003e9a:	2600      	movs	r6, #0
 8003e9c:	341a      	adds	r4, #26
 8003e9e:	42b5      	cmp	r5, r6
 8003ea0:	d11a      	bne.n	8003ed8 <_printf_common+0xc8>
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	e008      	b.n	8003eb8 <_printf_common+0xa8>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	4652      	mov	r2, sl
 8003eaa:	4649      	mov	r1, r9
 8003eac:	4638      	mov	r0, r7
 8003eae:	47c0      	blx	r8
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	d103      	bne.n	8003ebc <_printf_common+0xac>
 8003eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ebc:	3501      	adds	r5, #1
 8003ebe:	e7c6      	b.n	8003e4e <_printf_common+0x3e>
 8003ec0:	18e1      	adds	r1, r4, r3
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	2030      	movs	r0, #48	; 0x30
 8003ec6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003eca:	4422      	add	r2, r4
 8003ecc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ed0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ed4:	3302      	adds	r3, #2
 8003ed6:	e7c7      	b.n	8003e68 <_printf_common+0x58>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	4622      	mov	r2, r4
 8003edc:	4649      	mov	r1, r9
 8003ede:	4638      	mov	r0, r7
 8003ee0:	47c0      	blx	r8
 8003ee2:	3001      	adds	r0, #1
 8003ee4:	d0e6      	beq.n	8003eb4 <_printf_common+0xa4>
 8003ee6:	3601      	adds	r6, #1
 8003ee8:	e7d9      	b.n	8003e9e <_printf_common+0x8e>
	...

08003eec <_printf_i>:
 8003eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef0:	460c      	mov	r4, r1
 8003ef2:	4691      	mov	r9, r2
 8003ef4:	7e27      	ldrb	r7, [r4, #24]
 8003ef6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ef8:	2f78      	cmp	r7, #120	; 0x78
 8003efa:	4680      	mov	r8, r0
 8003efc:	469a      	mov	sl, r3
 8003efe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f02:	d807      	bhi.n	8003f14 <_printf_i+0x28>
 8003f04:	2f62      	cmp	r7, #98	; 0x62
 8003f06:	d80a      	bhi.n	8003f1e <_printf_i+0x32>
 8003f08:	2f00      	cmp	r7, #0
 8003f0a:	f000 80d8 	beq.w	80040be <_printf_i+0x1d2>
 8003f0e:	2f58      	cmp	r7, #88	; 0x58
 8003f10:	f000 80a3 	beq.w	800405a <_printf_i+0x16e>
 8003f14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f1c:	e03a      	b.n	8003f94 <_printf_i+0xa8>
 8003f1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f22:	2b15      	cmp	r3, #21
 8003f24:	d8f6      	bhi.n	8003f14 <_printf_i+0x28>
 8003f26:	a001      	add	r0, pc, #4	; (adr r0, 8003f2c <_printf_i+0x40>)
 8003f28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003f2c:	08003f85 	.word	0x08003f85
 8003f30:	08003f99 	.word	0x08003f99
 8003f34:	08003f15 	.word	0x08003f15
 8003f38:	08003f15 	.word	0x08003f15
 8003f3c:	08003f15 	.word	0x08003f15
 8003f40:	08003f15 	.word	0x08003f15
 8003f44:	08003f99 	.word	0x08003f99
 8003f48:	08003f15 	.word	0x08003f15
 8003f4c:	08003f15 	.word	0x08003f15
 8003f50:	08003f15 	.word	0x08003f15
 8003f54:	08003f15 	.word	0x08003f15
 8003f58:	080040a5 	.word	0x080040a5
 8003f5c:	08003fc9 	.word	0x08003fc9
 8003f60:	08004087 	.word	0x08004087
 8003f64:	08003f15 	.word	0x08003f15
 8003f68:	08003f15 	.word	0x08003f15
 8003f6c:	080040c7 	.word	0x080040c7
 8003f70:	08003f15 	.word	0x08003f15
 8003f74:	08003fc9 	.word	0x08003fc9
 8003f78:	08003f15 	.word	0x08003f15
 8003f7c:	08003f15 	.word	0x08003f15
 8003f80:	0800408f 	.word	0x0800408f
 8003f84:	680b      	ldr	r3, [r1, #0]
 8003f86:	1d1a      	adds	r2, r3, #4
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	600a      	str	r2, [r1, #0]
 8003f8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0a3      	b.n	80040e0 <_printf_i+0x1f4>
 8003f98:	6825      	ldr	r5, [r4, #0]
 8003f9a:	6808      	ldr	r0, [r1, #0]
 8003f9c:	062e      	lsls	r6, r5, #24
 8003f9e:	f100 0304 	add.w	r3, r0, #4
 8003fa2:	d50a      	bpl.n	8003fba <_printf_i+0xce>
 8003fa4:	6805      	ldr	r5, [r0, #0]
 8003fa6:	600b      	str	r3, [r1, #0]
 8003fa8:	2d00      	cmp	r5, #0
 8003faa:	da03      	bge.n	8003fb4 <_printf_i+0xc8>
 8003fac:	232d      	movs	r3, #45	; 0x2d
 8003fae:	426d      	negs	r5, r5
 8003fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fb4:	485e      	ldr	r0, [pc, #376]	; (8004130 <_printf_i+0x244>)
 8003fb6:	230a      	movs	r3, #10
 8003fb8:	e019      	b.n	8003fee <_printf_i+0x102>
 8003fba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003fbe:	6805      	ldr	r5, [r0, #0]
 8003fc0:	600b      	str	r3, [r1, #0]
 8003fc2:	bf18      	it	ne
 8003fc4:	b22d      	sxthne	r5, r5
 8003fc6:	e7ef      	b.n	8003fa8 <_printf_i+0xbc>
 8003fc8:	680b      	ldr	r3, [r1, #0]
 8003fca:	6825      	ldr	r5, [r4, #0]
 8003fcc:	1d18      	adds	r0, r3, #4
 8003fce:	6008      	str	r0, [r1, #0]
 8003fd0:	0628      	lsls	r0, r5, #24
 8003fd2:	d501      	bpl.n	8003fd8 <_printf_i+0xec>
 8003fd4:	681d      	ldr	r5, [r3, #0]
 8003fd6:	e002      	b.n	8003fde <_printf_i+0xf2>
 8003fd8:	0669      	lsls	r1, r5, #25
 8003fda:	d5fb      	bpl.n	8003fd4 <_printf_i+0xe8>
 8003fdc:	881d      	ldrh	r5, [r3, #0]
 8003fde:	4854      	ldr	r0, [pc, #336]	; (8004130 <_printf_i+0x244>)
 8003fe0:	2f6f      	cmp	r7, #111	; 0x6f
 8003fe2:	bf0c      	ite	eq
 8003fe4:	2308      	moveq	r3, #8
 8003fe6:	230a      	movne	r3, #10
 8003fe8:	2100      	movs	r1, #0
 8003fea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fee:	6866      	ldr	r6, [r4, #4]
 8003ff0:	60a6      	str	r6, [r4, #8]
 8003ff2:	2e00      	cmp	r6, #0
 8003ff4:	bfa2      	ittt	ge
 8003ff6:	6821      	ldrge	r1, [r4, #0]
 8003ff8:	f021 0104 	bicge.w	r1, r1, #4
 8003ffc:	6021      	strge	r1, [r4, #0]
 8003ffe:	b90d      	cbnz	r5, 8004004 <_printf_i+0x118>
 8004000:	2e00      	cmp	r6, #0
 8004002:	d04d      	beq.n	80040a0 <_printf_i+0x1b4>
 8004004:	4616      	mov	r6, r2
 8004006:	fbb5 f1f3 	udiv	r1, r5, r3
 800400a:	fb03 5711 	mls	r7, r3, r1, r5
 800400e:	5dc7      	ldrb	r7, [r0, r7]
 8004010:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004014:	462f      	mov	r7, r5
 8004016:	42bb      	cmp	r3, r7
 8004018:	460d      	mov	r5, r1
 800401a:	d9f4      	bls.n	8004006 <_printf_i+0x11a>
 800401c:	2b08      	cmp	r3, #8
 800401e:	d10b      	bne.n	8004038 <_printf_i+0x14c>
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	07df      	lsls	r7, r3, #31
 8004024:	d508      	bpl.n	8004038 <_printf_i+0x14c>
 8004026:	6923      	ldr	r3, [r4, #16]
 8004028:	6861      	ldr	r1, [r4, #4]
 800402a:	4299      	cmp	r1, r3
 800402c:	bfde      	ittt	le
 800402e:	2330      	movle	r3, #48	; 0x30
 8004030:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004034:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004038:	1b92      	subs	r2, r2, r6
 800403a:	6122      	str	r2, [r4, #16]
 800403c:	f8cd a000 	str.w	sl, [sp]
 8004040:	464b      	mov	r3, r9
 8004042:	aa03      	add	r2, sp, #12
 8004044:	4621      	mov	r1, r4
 8004046:	4640      	mov	r0, r8
 8004048:	f7ff fee2 	bl	8003e10 <_printf_common>
 800404c:	3001      	adds	r0, #1
 800404e:	d14c      	bne.n	80040ea <_printf_i+0x1fe>
 8004050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004054:	b004      	add	sp, #16
 8004056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800405a:	4835      	ldr	r0, [pc, #212]	; (8004130 <_printf_i+0x244>)
 800405c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	680e      	ldr	r6, [r1, #0]
 8004064:	061f      	lsls	r7, r3, #24
 8004066:	f856 5b04 	ldr.w	r5, [r6], #4
 800406a:	600e      	str	r6, [r1, #0]
 800406c:	d514      	bpl.n	8004098 <_printf_i+0x1ac>
 800406e:	07d9      	lsls	r1, r3, #31
 8004070:	bf44      	itt	mi
 8004072:	f043 0320 	orrmi.w	r3, r3, #32
 8004076:	6023      	strmi	r3, [r4, #0]
 8004078:	b91d      	cbnz	r5, 8004082 <_printf_i+0x196>
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	f023 0320 	bic.w	r3, r3, #32
 8004080:	6023      	str	r3, [r4, #0]
 8004082:	2310      	movs	r3, #16
 8004084:	e7b0      	b.n	8003fe8 <_printf_i+0xfc>
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	f043 0320 	orr.w	r3, r3, #32
 800408c:	6023      	str	r3, [r4, #0]
 800408e:	2378      	movs	r3, #120	; 0x78
 8004090:	4828      	ldr	r0, [pc, #160]	; (8004134 <_printf_i+0x248>)
 8004092:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004096:	e7e3      	b.n	8004060 <_printf_i+0x174>
 8004098:	065e      	lsls	r6, r3, #25
 800409a:	bf48      	it	mi
 800409c:	b2ad      	uxthmi	r5, r5
 800409e:	e7e6      	b.n	800406e <_printf_i+0x182>
 80040a0:	4616      	mov	r6, r2
 80040a2:	e7bb      	b.n	800401c <_printf_i+0x130>
 80040a4:	680b      	ldr	r3, [r1, #0]
 80040a6:	6826      	ldr	r6, [r4, #0]
 80040a8:	6960      	ldr	r0, [r4, #20]
 80040aa:	1d1d      	adds	r5, r3, #4
 80040ac:	600d      	str	r5, [r1, #0]
 80040ae:	0635      	lsls	r5, r6, #24
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	d501      	bpl.n	80040b8 <_printf_i+0x1cc>
 80040b4:	6018      	str	r0, [r3, #0]
 80040b6:	e002      	b.n	80040be <_printf_i+0x1d2>
 80040b8:	0671      	lsls	r1, r6, #25
 80040ba:	d5fb      	bpl.n	80040b4 <_printf_i+0x1c8>
 80040bc:	8018      	strh	r0, [r3, #0]
 80040be:	2300      	movs	r3, #0
 80040c0:	6123      	str	r3, [r4, #16]
 80040c2:	4616      	mov	r6, r2
 80040c4:	e7ba      	b.n	800403c <_printf_i+0x150>
 80040c6:	680b      	ldr	r3, [r1, #0]
 80040c8:	1d1a      	adds	r2, r3, #4
 80040ca:	600a      	str	r2, [r1, #0]
 80040cc:	681e      	ldr	r6, [r3, #0]
 80040ce:	6862      	ldr	r2, [r4, #4]
 80040d0:	2100      	movs	r1, #0
 80040d2:	4630      	mov	r0, r6
 80040d4:	f7fc f88c 	bl	80001f0 <memchr>
 80040d8:	b108      	cbz	r0, 80040de <_printf_i+0x1f2>
 80040da:	1b80      	subs	r0, r0, r6
 80040dc:	6060      	str	r0, [r4, #4]
 80040de:	6863      	ldr	r3, [r4, #4]
 80040e0:	6123      	str	r3, [r4, #16]
 80040e2:	2300      	movs	r3, #0
 80040e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040e8:	e7a8      	b.n	800403c <_printf_i+0x150>
 80040ea:	6923      	ldr	r3, [r4, #16]
 80040ec:	4632      	mov	r2, r6
 80040ee:	4649      	mov	r1, r9
 80040f0:	4640      	mov	r0, r8
 80040f2:	47d0      	blx	sl
 80040f4:	3001      	adds	r0, #1
 80040f6:	d0ab      	beq.n	8004050 <_printf_i+0x164>
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	079b      	lsls	r3, r3, #30
 80040fc:	d413      	bmi.n	8004126 <_printf_i+0x23a>
 80040fe:	68e0      	ldr	r0, [r4, #12]
 8004100:	9b03      	ldr	r3, [sp, #12]
 8004102:	4298      	cmp	r0, r3
 8004104:	bfb8      	it	lt
 8004106:	4618      	movlt	r0, r3
 8004108:	e7a4      	b.n	8004054 <_printf_i+0x168>
 800410a:	2301      	movs	r3, #1
 800410c:	4632      	mov	r2, r6
 800410e:	4649      	mov	r1, r9
 8004110:	4640      	mov	r0, r8
 8004112:	47d0      	blx	sl
 8004114:	3001      	adds	r0, #1
 8004116:	d09b      	beq.n	8004050 <_printf_i+0x164>
 8004118:	3501      	adds	r5, #1
 800411a:	68e3      	ldr	r3, [r4, #12]
 800411c:	9903      	ldr	r1, [sp, #12]
 800411e:	1a5b      	subs	r3, r3, r1
 8004120:	42ab      	cmp	r3, r5
 8004122:	dcf2      	bgt.n	800410a <_printf_i+0x21e>
 8004124:	e7eb      	b.n	80040fe <_printf_i+0x212>
 8004126:	2500      	movs	r5, #0
 8004128:	f104 0619 	add.w	r6, r4, #25
 800412c:	e7f5      	b.n	800411a <_printf_i+0x22e>
 800412e:	bf00      	nop
 8004130:	080043c1 	.word	0x080043c1
 8004134:	080043d2 	.word	0x080043d2

08004138 <memcpy>:
 8004138:	440a      	add	r2, r1
 800413a:	4291      	cmp	r1, r2
 800413c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004140:	d100      	bne.n	8004144 <memcpy+0xc>
 8004142:	4770      	bx	lr
 8004144:	b510      	push	{r4, lr}
 8004146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800414a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800414e:	4291      	cmp	r1, r2
 8004150:	d1f9      	bne.n	8004146 <memcpy+0xe>
 8004152:	bd10      	pop	{r4, pc}

08004154 <memmove>:
 8004154:	4288      	cmp	r0, r1
 8004156:	b510      	push	{r4, lr}
 8004158:	eb01 0402 	add.w	r4, r1, r2
 800415c:	d902      	bls.n	8004164 <memmove+0x10>
 800415e:	4284      	cmp	r4, r0
 8004160:	4623      	mov	r3, r4
 8004162:	d807      	bhi.n	8004174 <memmove+0x20>
 8004164:	1e43      	subs	r3, r0, #1
 8004166:	42a1      	cmp	r1, r4
 8004168:	d008      	beq.n	800417c <memmove+0x28>
 800416a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800416e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004172:	e7f8      	b.n	8004166 <memmove+0x12>
 8004174:	4402      	add	r2, r0
 8004176:	4601      	mov	r1, r0
 8004178:	428a      	cmp	r2, r1
 800417a:	d100      	bne.n	800417e <memmove+0x2a>
 800417c:	bd10      	pop	{r4, pc}
 800417e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004182:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004186:	e7f7      	b.n	8004178 <memmove+0x24>

08004188 <_free_r>:
 8004188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800418a:	2900      	cmp	r1, #0
 800418c:	d048      	beq.n	8004220 <_free_r+0x98>
 800418e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004192:	9001      	str	r0, [sp, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	f1a1 0404 	sub.w	r4, r1, #4
 800419a:	bfb8      	it	lt
 800419c:	18e4      	addlt	r4, r4, r3
 800419e:	f000 f8d3 	bl	8004348 <__malloc_lock>
 80041a2:	4a20      	ldr	r2, [pc, #128]	; (8004224 <_free_r+0x9c>)
 80041a4:	9801      	ldr	r0, [sp, #4]
 80041a6:	6813      	ldr	r3, [r2, #0]
 80041a8:	4615      	mov	r5, r2
 80041aa:	b933      	cbnz	r3, 80041ba <_free_r+0x32>
 80041ac:	6063      	str	r3, [r4, #4]
 80041ae:	6014      	str	r4, [r2, #0]
 80041b0:	b003      	add	sp, #12
 80041b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041b6:	f000 b8cd 	b.w	8004354 <__malloc_unlock>
 80041ba:	42a3      	cmp	r3, r4
 80041bc:	d90b      	bls.n	80041d6 <_free_r+0x4e>
 80041be:	6821      	ldr	r1, [r4, #0]
 80041c0:	1862      	adds	r2, r4, r1
 80041c2:	4293      	cmp	r3, r2
 80041c4:	bf04      	itt	eq
 80041c6:	681a      	ldreq	r2, [r3, #0]
 80041c8:	685b      	ldreq	r3, [r3, #4]
 80041ca:	6063      	str	r3, [r4, #4]
 80041cc:	bf04      	itt	eq
 80041ce:	1852      	addeq	r2, r2, r1
 80041d0:	6022      	streq	r2, [r4, #0]
 80041d2:	602c      	str	r4, [r5, #0]
 80041d4:	e7ec      	b.n	80041b0 <_free_r+0x28>
 80041d6:	461a      	mov	r2, r3
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	b10b      	cbz	r3, 80041e0 <_free_r+0x58>
 80041dc:	42a3      	cmp	r3, r4
 80041de:	d9fa      	bls.n	80041d6 <_free_r+0x4e>
 80041e0:	6811      	ldr	r1, [r2, #0]
 80041e2:	1855      	adds	r5, r2, r1
 80041e4:	42a5      	cmp	r5, r4
 80041e6:	d10b      	bne.n	8004200 <_free_r+0x78>
 80041e8:	6824      	ldr	r4, [r4, #0]
 80041ea:	4421      	add	r1, r4
 80041ec:	1854      	adds	r4, r2, r1
 80041ee:	42a3      	cmp	r3, r4
 80041f0:	6011      	str	r1, [r2, #0]
 80041f2:	d1dd      	bne.n	80041b0 <_free_r+0x28>
 80041f4:	681c      	ldr	r4, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	6053      	str	r3, [r2, #4]
 80041fa:	4421      	add	r1, r4
 80041fc:	6011      	str	r1, [r2, #0]
 80041fe:	e7d7      	b.n	80041b0 <_free_r+0x28>
 8004200:	d902      	bls.n	8004208 <_free_r+0x80>
 8004202:	230c      	movs	r3, #12
 8004204:	6003      	str	r3, [r0, #0]
 8004206:	e7d3      	b.n	80041b0 <_free_r+0x28>
 8004208:	6825      	ldr	r5, [r4, #0]
 800420a:	1961      	adds	r1, r4, r5
 800420c:	428b      	cmp	r3, r1
 800420e:	bf04      	itt	eq
 8004210:	6819      	ldreq	r1, [r3, #0]
 8004212:	685b      	ldreq	r3, [r3, #4]
 8004214:	6063      	str	r3, [r4, #4]
 8004216:	bf04      	itt	eq
 8004218:	1949      	addeq	r1, r1, r5
 800421a:	6021      	streq	r1, [r4, #0]
 800421c:	6054      	str	r4, [r2, #4]
 800421e:	e7c7      	b.n	80041b0 <_free_r+0x28>
 8004220:	b003      	add	sp, #12
 8004222:	bd30      	pop	{r4, r5, pc}
 8004224:	20000090 	.word	0x20000090

08004228 <_malloc_r>:
 8004228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422a:	1ccd      	adds	r5, r1, #3
 800422c:	f025 0503 	bic.w	r5, r5, #3
 8004230:	3508      	adds	r5, #8
 8004232:	2d0c      	cmp	r5, #12
 8004234:	bf38      	it	cc
 8004236:	250c      	movcc	r5, #12
 8004238:	2d00      	cmp	r5, #0
 800423a:	4606      	mov	r6, r0
 800423c:	db01      	blt.n	8004242 <_malloc_r+0x1a>
 800423e:	42a9      	cmp	r1, r5
 8004240:	d903      	bls.n	800424a <_malloc_r+0x22>
 8004242:	230c      	movs	r3, #12
 8004244:	6033      	str	r3, [r6, #0]
 8004246:	2000      	movs	r0, #0
 8004248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800424a:	f000 f87d 	bl	8004348 <__malloc_lock>
 800424e:	4921      	ldr	r1, [pc, #132]	; (80042d4 <_malloc_r+0xac>)
 8004250:	680a      	ldr	r2, [r1, #0]
 8004252:	4614      	mov	r4, r2
 8004254:	b99c      	cbnz	r4, 800427e <_malloc_r+0x56>
 8004256:	4f20      	ldr	r7, [pc, #128]	; (80042d8 <_malloc_r+0xb0>)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	b923      	cbnz	r3, 8004266 <_malloc_r+0x3e>
 800425c:	4621      	mov	r1, r4
 800425e:	4630      	mov	r0, r6
 8004260:	f000 f862 	bl	8004328 <_sbrk_r>
 8004264:	6038      	str	r0, [r7, #0]
 8004266:	4629      	mov	r1, r5
 8004268:	4630      	mov	r0, r6
 800426a:	f000 f85d 	bl	8004328 <_sbrk_r>
 800426e:	1c43      	adds	r3, r0, #1
 8004270:	d123      	bne.n	80042ba <_malloc_r+0x92>
 8004272:	230c      	movs	r3, #12
 8004274:	6033      	str	r3, [r6, #0]
 8004276:	4630      	mov	r0, r6
 8004278:	f000 f86c 	bl	8004354 <__malloc_unlock>
 800427c:	e7e3      	b.n	8004246 <_malloc_r+0x1e>
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	1b5b      	subs	r3, r3, r5
 8004282:	d417      	bmi.n	80042b4 <_malloc_r+0x8c>
 8004284:	2b0b      	cmp	r3, #11
 8004286:	d903      	bls.n	8004290 <_malloc_r+0x68>
 8004288:	6023      	str	r3, [r4, #0]
 800428a:	441c      	add	r4, r3
 800428c:	6025      	str	r5, [r4, #0]
 800428e:	e004      	b.n	800429a <_malloc_r+0x72>
 8004290:	6863      	ldr	r3, [r4, #4]
 8004292:	42a2      	cmp	r2, r4
 8004294:	bf0c      	ite	eq
 8004296:	600b      	streq	r3, [r1, #0]
 8004298:	6053      	strne	r3, [r2, #4]
 800429a:	4630      	mov	r0, r6
 800429c:	f000 f85a 	bl	8004354 <__malloc_unlock>
 80042a0:	f104 000b 	add.w	r0, r4, #11
 80042a4:	1d23      	adds	r3, r4, #4
 80042a6:	f020 0007 	bic.w	r0, r0, #7
 80042aa:	1ac2      	subs	r2, r0, r3
 80042ac:	d0cc      	beq.n	8004248 <_malloc_r+0x20>
 80042ae:	1a1b      	subs	r3, r3, r0
 80042b0:	50a3      	str	r3, [r4, r2]
 80042b2:	e7c9      	b.n	8004248 <_malloc_r+0x20>
 80042b4:	4622      	mov	r2, r4
 80042b6:	6864      	ldr	r4, [r4, #4]
 80042b8:	e7cc      	b.n	8004254 <_malloc_r+0x2c>
 80042ba:	1cc4      	adds	r4, r0, #3
 80042bc:	f024 0403 	bic.w	r4, r4, #3
 80042c0:	42a0      	cmp	r0, r4
 80042c2:	d0e3      	beq.n	800428c <_malloc_r+0x64>
 80042c4:	1a21      	subs	r1, r4, r0
 80042c6:	4630      	mov	r0, r6
 80042c8:	f000 f82e 	bl	8004328 <_sbrk_r>
 80042cc:	3001      	adds	r0, #1
 80042ce:	d1dd      	bne.n	800428c <_malloc_r+0x64>
 80042d0:	e7cf      	b.n	8004272 <_malloc_r+0x4a>
 80042d2:	bf00      	nop
 80042d4:	20000090 	.word	0x20000090
 80042d8:	20000094 	.word	0x20000094

080042dc <_realloc_r>:
 80042dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042de:	4607      	mov	r7, r0
 80042e0:	4614      	mov	r4, r2
 80042e2:	460e      	mov	r6, r1
 80042e4:	b921      	cbnz	r1, 80042f0 <_realloc_r+0x14>
 80042e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80042ea:	4611      	mov	r1, r2
 80042ec:	f7ff bf9c 	b.w	8004228 <_malloc_r>
 80042f0:	b922      	cbnz	r2, 80042fc <_realloc_r+0x20>
 80042f2:	f7ff ff49 	bl	8004188 <_free_r>
 80042f6:	4625      	mov	r5, r4
 80042f8:	4628      	mov	r0, r5
 80042fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042fc:	f000 f830 	bl	8004360 <_malloc_usable_size_r>
 8004300:	42a0      	cmp	r0, r4
 8004302:	d20f      	bcs.n	8004324 <_realloc_r+0x48>
 8004304:	4621      	mov	r1, r4
 8004306:	4638      	mov	r0, r7
 8004308:	f7ff ff8e 	bl	8004228 <_malloc_r>
 800430c:	4605      	mov	r5, r0
 800430e:	2800      	cmp	r0, #0
 8004310:	d0f2      	beq.n	80042f8 <_realloc_r+0x1c>
 8004312:	4631      	mov	r1, r6
 8004314:	4622      	mov	r2, r4
 8004316:	f7ff ff0f 	bl	8004138 <memcpy>
 800431a:	4631      	mov	r1, r6
 800431c:	4638      	mov	r0, r7
 800431e:	f7ff ff33 	bl	8004188 <_free_r>
 8004322:	e7e9      	b.n	80042f8 <_realloc_r+0x1c>
 8004324:	4635      	mov	r5, r6
 8004326:	e7e7      	b.n	80042f8 <_realloc_r+0x1c>

08004328 <_sbrk_r>:
 8004328:	b538      	push	{r3, r4, r5, lr}
 800432a:	4d06      	ldr	r5, [pc, #24]	; (8004344 <_sbrk_r+0x1c>)
 800432c:	2300      	movs	r3, #0
 800432e:	4604      	mov	r4, r0
 8004330:	4608      	mov	r0, r1
 8004332:	602b      	str	r3, [r5, #0]
 8004334:	f7fc fd6e 	bl	8000e14 <_sbrk>
 8004338:	1c43      	adds	r3, r0, #1
 800433a:	d102      	bne.n	8004342 <_sbrk_r+0x1a>
 800433c:	682b      	ldr	r3, [r5, #0]
 800433e:	b103      	cbz	r3, 8004342 <_sbrk_r+0x1a>
 8004340:	6023      	str	r3, [r4, #0]
 8004342:	bd38      	pop	{r3, r4, r5, pc}
 8004344:	20000204 	.word	0x20000204

08004348 <__malloc_lock>:
 8004348:	4801      	ldr	r0, [pc, #4]	; (8004350 <__malloc_lock+0x8>)
 800434a:	f000 b811 	b.w	8004370 <__retarget_lock_acquire_recursive>
 800434e:	bf00      	nop
 8004350:	2000020c 	.word	0x2000020c

08004354 <__malloc_unlock>:
 8004354:	4801      	ldr	r0, [pc, #4]	; (800435c <__malloc_unlock+0x8>)
 8004356:	f000 b80c 	b.w	8004372 <__retarget_lock_release_recursive>
 800435a:	bf00      	nop
 800435c:	2000020c 	.word	0x2000020c

08004360 <_malloc_usable_size_r>:
 8004360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004364:	1f18      	subs	r0, r3, #4
 8004366:	2b00      	cmp	r3, #0
 8004368:	bfbc      	itt	lt
 800436a:	580b      	ldrlt	r3, [r1, r0]
 800436c:	18c0      	addlt	r0, r0, r3
 800436e:	4770      	bx	lr

08004370 <__retarget_lock_acquire_recursive>:
 8004370:	4770      	bx	lr

08004372 <__retarget_lock_release_recursive>:
 8004372:	4770      	bx	lr

08004374 <_init>:
 8004374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004376:	bf00      	nop
 8004378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800437a:	bc08      	pop	{r3}
 800437c:	469e      	mov	lr, r3
 800437e:	4770      	bx	lr

08004380 <_fini>:
 8004380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004382:	bf00      	nop
 8004384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004386:	bc08      	pop	{r3}
 8004388:	469e      	mov	lr, r3
 800438a:	4770      	bx	lr
