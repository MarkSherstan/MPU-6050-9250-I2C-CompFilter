
STM32-C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030c4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003258  08003258  00013258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003270  08003270  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003270  08003270  00013270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003278  08003278  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003278  08003278  00013278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800327c  0800327c  0001327c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000000c  0800328c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  0800328c  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012999  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023eb  00000000  00000000  000329d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00034dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  00035c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173ba  00000000  00000000  00036ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012bcf  00000000  00000000  0004de6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f63f  00000000  00000000  00060a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f0078  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e74  00000000  00000000  000f00cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003240 	.word	0x08003240

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003240 	.word	0x08003240

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <IMU_init>:
/// @brief Set the IMU address and full scale ranges.
/// @param addr Hex address based on AD0 pin - 0x68 low or 0x69 high.
/// @param aScale Set accelerometer full scale range: 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
/// @param gScale Set gyroscope full scale range: 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
void IMU_init(uint8_t addr, uint8_t aScale, uint8_t gScale)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
 80004d6:	460b      	mov	r3, r1
 80004d8:	71bb      	strb	r3, [r7, #6]
 80004da:	4613      	mov	r3, r2
 80004dc:	717b      	strb	r3, [r7, #5]
	// Save values
	_addr = addr << 1;
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <IMU_init+0x34>)
 80004e6:	701a      	strb	r2, [r3, #0]
	_aScale = aScale;
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <IMU_init+0x38>)
 80004ea:	79bb      	ldrb	r3, [r7, #6]
 80004ec:	7013      	strb	r3, [r2, #0]
	_gScale = gScale;
 80004ee:	4a06      	ldr	r2, [pc, #24]	; (8000508 <IMU_init+0x3c>)
 80004f0:	797b      	ldrb	r3, [r7, #5]
 80004f2:	7013      	strb	r3, [r2, #0]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	20000050 	.word	0x20000050
 8000504:	20000028 	.word	0x20000028
 8000508:	20000078 	.word	0x20000078

0800050c <IMU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale.
void IMU_begin(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af04      	add	r7, sp, #16
    uint8_t check;
    uint8_t select;

    // Confirm device
    HAL_I2C_Mem_Read(&hi2c1, _addr, WHO_AM_I, 1, &check, 1, I2C_TIMOUT_MS);
 8000512:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <IMU_begin+0x78>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	b299      	uxth	r1, r3
 8000518:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051c:	9302      	str	r3, [sp, #8]
 800051e:	2301      	movs	r3, #1
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	1dfb      	adds	r3, r7, #7
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2301      	movs	r3, #1
 8000528:	2275      	movs	r2, #117	; 0x75
 800052a:	4817      	ldr	r0, [pc, #92]	; (8000588 <IMU_begin+0x7c>)
 800052c:	f001 f90c 	bl	8001748 <HAL_I2C_Mem_Read>

    if ( (check == WHO_AM_I_6050_ANS) || (check == WHO_AM_I_9250_ANS) )
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	2b68      	cmp	r3, #104	; 0x68
 8000534:	d002      	beq.n	800053c <IMU_begin+0x30>
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b71      	cmp	r3, #113	; 0x71
 800053a:	d11f      	bne.n	800057c <IMU_begin+0x70>
    {
        // Light to show success
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800053c:	2201      	movs	r2, #1
 800053e:	2120      	movs	r1, #32
 8000540:	4812      	ldr	r0, [pc, #72]	; (800058c <IMU_begin+0x80>)
 8000542:	f000 fea9 	bl	8001298 <HAL_GPIO_WritePin>

        // Startup / reset the sensor
        select = 0x00;
 8000546:	2300      	movs	r3, #0
 8000548:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, _addr, PWR_MGMT_1, 1, &select, 1, I2C_TIMOUT_MS);
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <IMU_begin+0x78>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	b299      	uxth	r1, r3
 8000550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000554:	9302      	str	r3, [sp, #8]
 8000556:	2301      	movs	r3, #1
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	1dbb      	adds	r3, r7, #6
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2301      	movs	r3, #1
 8000560:	226b      	movs	r2, #107	; 0x6b
 8000562:	4809      	ldr	r0, [pc, #36]	; (8000588 <IMU_begin+0x7c>)
 8000564:	f000 fff6 	bl	8001554 <HAL_I2C_Mem_Write>

        // Set the full scale ranges
        setAccFullScaleRange(_aScale);
 8000568:	4b09      	ldr	r3, [pc, #36]	; (8000590 <IMU_begin+0x84>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f813 	bl	8000598 <setAccFullScaleRange>
        setGyroFullScaleRange(_gScale);
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <IMU_begin+0x88>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f8a0 	bl	80006bc <setGyroFullScaleRange>
    }
}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000050 	.word	0x20000050
 8000588:	20000094 	.word	0x20000094
 800058c:	40020000 	.word	0x40020000
 8000590:	20000028 	.word	0x20000028
 8000594:	20000078 	.word	0x20000078

08000598 <setAccFullScaleRange>:

/// @brief Set the accelerometer full scale range.
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
void setAccFullScaleRange(uint8_t aScale)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af04      	add	r7, sp, #16
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t select;

    // Set the value
    switch (aScale)
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	2b03      	cmp	r3, #3
 80005a6:	d867      	bhi.n	8000678 <setAccFullScaleRange+0xe0>
 80005a8:	a201      	add	r2, pc, #4	; (adr r2, 80005b0 <setAccFullScaleRange+0x18>)
 80005aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ae:	bf00      	nop
 80005b0:	080005c1 	.word	0x080005c1
 80005b4:	080005ef 	.word	0x080005ef
 80005b8:	0800061d 	.word	0x0800061d
 80005bc:	0800064b 	.word	0x0800064b
    {
    case AFS_2G:
        aRes = 16384.0;
 80005c0:	4b3b      	ldr	r3, [pc, #236]	; (80006b0 <setAccFullScaleRange+0x118>)
 80005c2:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80005c6:	601a      	str	r2, [r3, #0]
        select = 0x00;
 80005c8:	2300      	movs	r3, #0
 80005ca:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80005cc:	4b39      	ldr	r3, [pc, #228]	; (80006b4 <setAccFullScaleRange+0x11c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	b299      	uxth	r1, r3
 80005d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d6:	9302      	str	r3, [sp, #8]
 80005d8:	2301      	movs	r3, #1
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	f107 030f 	add.w	r3, r7, #15
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2301      	movs	r3, #1
 80005e4:	221c      	movs	r2, #28
 80005e6:	4834      	ldr	r0, [pc, #208]	; (80006b8 <setAccFullScaleRange+0x120>)
 80005e8:	f000 ffb4 	bl	8001554 <HAL_I2C_Mem_Write>
        break;
 80005ec:	e05b      	b.n	80006a6 <setAccFullScaleRange+0x10e>
    case AFS_4G:
        aRes = 8192.0;
 80005ee:	4b30      	ldr	r3, [pc, #192]	; (80006b0 <setAccFullScaleRange+0x118>)
 80005f0:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80005f4:	601a      	str	r2, [r3, #0]
        select = 0x08;
 80005f6:	2308      	movs	r3, #8
 80005f8:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80005fa:	4b2e      	ldr	r3, [pc, #184]	; (80006b4 <setAccFullScaleRange+0x11c>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	b299      	uxth	r1, r3
 8000600:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000604:	9302      	str	r3, [sp, #8]
 8000606:	2301      	movs	r3, #1
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	f107 030f 	add.w	r3, r7, #15
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2301      	movs	r3, #1
 8000612:	221c      	movs	r2, #28
 8000614:	4828      	ldr	r0, [pc, #160]	; (80006b8 <setAccFullScaleRange+0x120>)
 8000616:	f000 ff9d 	bl	8001554 <HAL_I2C_Mem_Write>
        break;
 800061a:	e044      	b.n	80006a6 <setAccFullScaleRange+0x10e>
    case AFS_8G:
        aRes = 4096.0;
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <setAccFullScaleRange+0x118>)
 800061e:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8000622:	601a      	str	r2, [r3, #0]
        select = 0x10;
 8000624:	2310      	movs	r3, #16
 8000626:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <setAccFullScaleRange+0x11c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b299      	uxth	r1, r3
 800062e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000632:	9302      	str	r3, [sp, #8]
 8000634:	2301      	movs	r3, #1
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	f107 030f 	add.w	r3, r7, #15
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	221c      	movs	r2, #28
 8000642:	481d      	ldr	r0, [pc, #116]	; (80006b8 <setAccFullScaleRange+0x120>)
 8000644:	f000 ff86 	bl	8001554 <HAL_I2C_Mem_Write>
        break;
 8000648:	e02d      	b.n	80006a6 <setAccFullScaleRange+0x10e>
    case AFS_16G:
        aRes = 2048.0;
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <setAccFullScaleRange+0x118>)
 800064c:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8000650:	601a      	str	r2, [r3, #0]
        select = 0x18;
 8000652:	2318      	movs	r3, #24
 8000654:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8000656:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <setAccFullScaleRange+0x11c>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b299      	uxth	r1, r3
 800065c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000660:	9302      	str	r3, [sp, #8]
 8000662:	2301      	movs	r3, #1
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	f107 030f 	add.w	r3, r7, #15
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2301      	movs	r3, #1
 800066e:	221c      	movs	r2, #28
 8000670:	4811      	ldr	r0, [pc, #68]	; (80006b8 <setAccFullScaleRange+0x120>)
 8000672:	f000 ff6f 	bl	8001554 <HAL_I2C_Mem_Write>
        break;
 8000676:	e016      	b.n	80006a6 <setAccFullScaleRange+0x10e>
    default:
        aRes = 8192.0;
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <setAccFullScaleRange+0x118>)
 800067a:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800067e:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8000680:	2308      	movs	r3, #8
 8000682:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <setAccFullScaleRange+0x11c>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b299      	uxth	r1, r3
 800068a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068e:	9302      	str	r3, [sp, #8]
 8000690:	2301      	movs	r3, #1
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	f107 030f 	add.w	r3, r7, #15
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	221c      	movs	r2, #28
 800069e:	4806      	ldr	r0, [pc, #24]	; (80006b8 <setAccFullScaleRange+0x120>)
 80006a0:	f000 ff58 	bl	8001554 <HAL_I2C_Mem_Write>
        break;
 80006a4:	bf00      	nop
    }
}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000054 	.word	0x20000054
 80006b4:	20000050 	.word	0x20000050
 80006b8:	20000094 	.word	0x20000094

080006bc <setGyroFullScaleRange>:

/// @brief Set the gyroscope full scale range.
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
void setGyroFullScaleRange(uint8_t gScale)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af04      	add	r7, sp, #16
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t select;

    // Set the value
    switch (gScale)
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b03      	cmp	r3, #3
 80006ca:	d863      	bhi.n	8000794 <setGyroFullScaleRange+0xd8>
 80006cc:	a201      	add	r2, pc, #4	; (adr r2, 80006d4 <setGyroFullScaleRange+0x18>)
 80006ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d2:	bf00      	nop
 80006d4:	080006e5 	.word	0x080006e5
 80006d8:	08000711 	.word	0x08000711
 80006dc:	0800073d 	.word	0x0800073d
 80006e0:	08000769 	.word	0x08000769
    {
    case GFS_250DPS:
        gRes = 131.0;
 80006e4:	4b38      	ldr	r3, [pc, #224]	; (80007c8 <setGyroFullScaleRange+0x10c>)
 80006e6:	4a39      	ldr	r2, [pc, #228]	; (80007cc <setGyroFullScaleRange+0x110>)
 80006e8:	601a      	str	r2, [r3, #0]
        select = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80006ee:	4b38      	ldr	r3, [pc, #224]	; (80007d0 <setGyroFullScaleRange+0x114>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b299      	uxth	r1, r3
 80006f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f8:	9302      	str	r3, [sp, #8]
 80006fa:	2301      	movs	r3, #1
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	f107 030f 	add.w	r3, r7, #15
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2301      	movs	r3, #1
 8000706:	221b      	movs	r2, #27
 8000708:	4832      	ldr	r0, [pc, #200]	; (80007d4 <setGyroFullScaleRange+0x118>)
 800070a:	f000 ff23 	bl	8001554 <HAL_I2C_Mem_Write>
        break;
 800070e:	e057      	b.n	80007c0 <setGyroFullScaleRange+0x104>
    case GFS_500DPS:
        gRes = 65.5;
 8000710:	4b2d      	ldr	r3, [pc, #180]	; (80007c8 <setGyroFullScaleRange+0x10c>)
 8000712:	4a31      	ldr	r2, [pc, #196]	; (80007d8 <setGyroFullScaleRange+0x11c>)
 8000714:	601a      	str	r2, [r3, #0]
        select = 0x00;
 8000716:	2300      	movs	r3, #0
 8000718:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 800071a:	4b2d      	ldr	r3, [pc, #180]	; (80007d0 <setGyroFullScaleRange+0x114>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	b299      	uxth	r1, r3
 8000720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000724:	9302      	str	r3, [sp, #8]
 8000726:	2301      	movs	r3, #1
 8000728:	9301      	str	r3, [sp, #4]
 800072a:	f107 030f 	add.w	r3, r7, #15
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2301      	movs	r3, #1
 8000732:	221b      	movs	r2, #27
 8000734:	4827      	ldr	r0, [pc, #156]	; (80007d4 <setGyroFullScaleRange+0x118>)
 8000736:	f000 ff0d 	bl	8001554 <HAL_I2C_Mem_Write>
        break;
 800073a:	e041      	b.n	80007c0 <setGyroFullScaleRange+0x104>
    case GFS_1000DPS:
        gRes = 32.8;
 800073c:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <setGyroFullScaleRange+0x10c>)
 800073e:	4a27      	ldr	r2, [pc, #156]	; (80007dc <setGyroFullScaleRange+0x120>)
 8000740:	601a      	str	r2, [r3, #0]
        select = 0x00;
 8000742:	2300      	movs	r3, #0
 8000744:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8000746:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <setGyroFullScaleRange+0x114>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b299      	uxth	r1, r3
 800074c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000750:	9302      	str	r3, [sp, #8]
 8000752:	2301      	movs	r3, #1
 8000754:	9301      	str	r3, [sp, #4]
 8000756:	f107 030f 	add.w	r3, r7, #15
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2301      	movs	r3, #1
 800075e:	221b      	movs	r2, #27
 8000760:	481c      	ldr	r0, [pc, #112]	; (80007d4 <setGyroFullScaleRange+0x118>)
 8000762:	f000 fef7 	bl	8001554 <HAL_I2C_Mem_Write>
        break;
 8000766:	e02b      	b.n	80007c0 <setGyroFullScaleRange+0x104>
    case GFS_2000DPS:
        gRes = 16.4;
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <setGyroFullScaleRange+0x10c>)
 800076a:	4a1d      	ldr	r2, [pc, #116]	; (80007e0 <setGyroFullScaleRange+0x124>)
 800076c:	601a      	str	r2, [r3, #0]
        select = 0x00;
 800076e:	2300      	movs	r3, #0
 8000770:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <setGyroFullScaleRange+0x114>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	b299      	uxth	r1, r3
 8000778:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077c:	9302      	str	r3, [sp, #8]
 800077e:	2301      	movs	r3, #1
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	f107 030f 	add.w	r3, r7, #15
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	2301      	movs	r3, #1
 800078a:	221b      	movs	r2, #27
 800078c:	4811      	ldr	r0, [pc, #68]	; (80007d4 <setGyroFullScaleRange+0x118>)
 800078e:	f000 fee1 	bl	8001554 <HAL_I2C_Mem_Write>
        break;
 8000792:	e015      	b.n	80007c0 <setGyroFullScaleRange+0x104>
    default:
        gRes = 65.5;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <setGyroFullScaleRange+0x10c>)
 8000796:	4a10      	ldr	r2, [pc, #64]	; (80007d8 <setGyroFullScaleRange+0x11c>)
 8000798:	601a      	str	r2, [r3, #0]
        select = 0x00;
 800079a:	2300      	movs	r3, #0
 800079c:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <setGyroFullScaleRange+0x114>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	b299      	uxth	r1, r3
 80007a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a8:	9302      	str	r3, [sp, #8]
 80007aa:	2301      	movs	r3, #1
 80007ac:	9301      	str	r3, [sp, #4]
 80007ae:	f107 030f 	add.w	r3, r7, #15
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2301      	movs	r3, #1
 80007b6:	221b      	movs	r2, #27
 80007b8:	4806      	ldr	r0, [pc, #24]	; (80007d4 <setGyroFullScaleRange+0x118>)
 80007ba:	f000 fecb 	bl	8001554 <HAL_I2C_Mem_Write>
        break;
 80007be:	bf00      	nop
    }
}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000074 	.word	0x20000074
 80007cc:	43030000 	.word	0x43030000
 80007d0:	20000050 	.word	0x20000050
 80007d4:	20000094 	.word	0x20000094
 80007d8:	42830000 	.word	0x42830000
 80007dc:	42033333 	.word	0x42033333
 80007e0:	41833333 	.word	0x41833333

080007e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b2d      	ldr	r3, [pc, #180]	; (80008b4 <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a2c      	ldr	r2, [pc, #176]	; (80008b4 <MX_GPIO_Init+0xd0>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b2a      	ldr	r3, [pc, #168]	; (80008b4 <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a25      	ldr	r2, [pc, #148]	; (80008b4 <MX_GPIO_Init+0xd0>)
 8000820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a1e      	ldr	r2, [pc, #120]	; (80008b4 <MX_GPIO_Init+0xd0>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <MX_GPIO_Init+0xd0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a17      	ldr	r2, [pc, #92]	; (80008b4 <MX_GPIO_Init+0xd0>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_GPIO_Init+0xd0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2120      	movs	r1, #32
 800086e:	4812      	ldr	r0, [pc, #72]	; (80008b8 <MX_GPIO_Init+0xd4>)
 8000870:	f000 fd12 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800087a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	480c      	ldr	r0, [pc, #48]	; (80008bc <MX_GPIO_Init+0xd8>)
 800088c:	f000 fb80 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000890:	2320      	movs	r3, #32
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_GPIO_Init+0xd4>)
 80008a8:	f000 fb72 	bl	8000f90 <HAL_GPIO_Init>

}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	; 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40020000 	.word	0x40020000
 80008bc:	40020800 	.word	0x40020800

080008c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_I2C1_Init+0x50>)
 80008c6:	4a13      	ldr	r2, [pc, #76]	; (8000914 <MX_I2C1_Init+0x54>)
 80008c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_I2C1_Init+0x50>)
 80008cc:	4a12      	ldr	r2, [pc, #72]	; (8000918 <MX_I2C1_Init+0x58>)
 80008ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_I2C1_Init+0x50>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_I2C1_Init+0x50>)
 80008d8:	2200      	movs	r2, #0
 80008da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_I2C1_Init+0x50>)
 80008de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <MX_I2C1_Init+0x50>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_I2C1_Init+0x50>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <MX_I2C1_Init+0x50>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_I2C1_Init+0x50>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_I2C1_Init+0x50>)
 80008fe:	f000 fce5 	bl	80012cc <HAL_I2C_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000908:	f000 f8da 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000094 	.word	0x20000094
 8000914:	40005400 	.word	0x40005400
 8000918:	00061a80 	.word	0x00061a80

0800091c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <HAL_I2C_MspInit+0x84>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d12b      	bne.n	8000996 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800095a:	23c0      	movs	r3, #192	; 0xc0
 800095c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800095e:	2312      	movs	r3, #18
 8000960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800096a:	2304      	movs	r3, #4
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	480c      	ldr	r0, [pc, #48]	; (80009a8 <HAL_I2C_MspInit+0x8c>)
 8000976:	f000 fb0b 	bl	8000f90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 8000984:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_I2C_MspInit+0x88>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	; 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40005400 	.word	0x40005400
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020400 	.word	0x40020400

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b0:	f000 f996 	bl	8000ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b4:	f000 f80e 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b8:	f7ff ff14 	bl	80007e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009bc:	f000 f8f4 	bl	8000ba8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80009c0:	f7ff ff7e 	bl	80008c0 <MX_I2C1_Init>
  // MX_TIM11_Init();

  /* USER CODE BEGIN 2 */
  IMU_init(AD0_LOW, AFS_4G, GFS_500DPS);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2101      	movs	r1, #1
 80009c8:	2068      	movs	r0, #104	; 0x68
 80009ca:	f7ff fd7f 	bl	80004cc <IMU_init>
  IMU_begin();
 80009ce:	f7ff fd9d 	bl	800050c <IMU_begin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <main+0x26>

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b094      	sub	sp, #80	; 0x50
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 0320 	add.w	r3, r7, #32
 80009de:	2230      	movs	r2, #48	; 0x30
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f002 fc24 	bl	8003230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <SystemClock_Config+0xd0>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	4a28      	ldr	r2, [pc, #160]	; (8000aa4 <SystemClock_Config+0xd0>)
 8000a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
 8000a08:	4b26      	ldr	r3, [pc, #152]	; (8000aa4 <SystemClock_Config+0xd0>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a14:	2300      	movs	r3, #0
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <SystemClock_Config+0xd4>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a20:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <SystemClock_Config+0xd4>)
 8000a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <SystemClock_Config+0xd4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a34:	2302      	movs	r3, #2
 8000a36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3c:	2310      	movs	r3, #16
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a40:	2302      	movs	r3, #2
 8000a42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a44:	2300      	movs	r3, #0
 8000a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a48:	2310      	movs	r3, #16
 8000a4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a4c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a52:	2304      	movs	r3, #4
 8000a54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a56:	2307      	movs	r3, #7
 8000a58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 fbf4 	bl	800224c <HAL_RCC_OscConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a6a:	f000 f829 	bl	8000ac0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6e:	230f      	movs	r3, #15
 8000a70:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a72:	2302      	movs	r3, #2
 8000a74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2102      	movs	r1, #2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 fe56 	bl	800273c <HAL_RCC_ClockConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a96:	f000 f813 	bl	8000ac0 <Error_Handler>
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	3750      	adds	r7, #80	; 0x50
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40007000 	.word	0x40007000

08000aac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
//      sprintf((char*)serialBuf, "%d,%d,%d\r\n", R, P, Y);
//      HAL_UART_Transmit(&huart2, serialBuf, strlen((char*)serialBuf), HAL_MAX_DELAY);

    // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <Error_Handler+0x8>
	...

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <HAL_MspInit+0x4c>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <HAL_MspInit+0x4c>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afc:	6413      	str	r3, [r2, #64]	; 0x40
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b0a:	2007      	movs	r0, #7
 8000b0c:	f000 fa0c 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b68:	f000 f90c 	bl	8000d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000b76:	f001 ffdd 	bl	8002b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200000e8 	.word	0x200000e8

08000b84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <SystemInit+0x20>)
 8000b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8e:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <SystemInit+0x20>)
 8000b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <MX_USART2_UART_Init+0x50>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000be0:	f002 f8ec 	bl	8002dbc <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bea:	f7ff ff69 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000130 	.word	0x20000130
 8000bf8:	40004400 	.word	0x40004400

08000bfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0x84>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d12b      	bne.n	8000c76 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <HAL_UART_MspInit+0x88>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <HAL_UART_MspInit+0x88>)
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <HAL_UART_MspInit+0x88>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_UART_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <HAL_UART_MspInit+0x88>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_UART_MspInit+0x88>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c56:	230c      	movs	r3, #12
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c66:	2307      	movs	r3, #7
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <HAL_UART_MspInit+0x8c>)
 8000c72:	f000 f98d 	bl	8000f90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	; 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40004400 	.word	0x40004400
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000

08000c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c92:	490e      	ldr	r1, [pc, #56]	; (8000ccc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c94:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ca8:	4c0b      	ldr	r4, [pc, #44]	; (8000cd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cb6:	f7ff ff65 	bl	8000b84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cba:	f002 fa95 	bl	80031e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cbe:	f7ff fe75 	bl	80009ac <main>
  bx  lr    
 8000cc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cd0:	08003280 	.word	0x08003280
  ldr r2, =_sbss
 8000cd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cd8:	20000178 	.word	0x20000178

08000cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC_IRQHandler>
	...

08000ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	; (8000d20 <HAL_Init+0x40>)
 8000cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <HAL_Init+0x40>)
 8000cf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <HAL_Init+0x40>)
 8000d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d08:	2003      	movs	r0, #3
 8000d0a:	f000 f90d 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f000 f808 	bl	8000d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d14:	f7ff feda 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023c00 	.word	0x40023c00

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_InitTick+0x54>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_InitTick+0x58>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4619      	mov	r1, r3
 8000d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f917 	bl	8000f76 <HAL_SYSTICK_Config>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e00e      	b.n	8000d70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b0f      	cmp	r3, #15
 8000d56:	d80a      	bhi.n	8000d6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d60:	f000 f8ed 	bl	8000f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d64:	4a06      	ldr	r2, [pc, #24]	; (8000d80 <HAL_InitTick+0x5c>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e000      	b.n	8000d70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000004 	.word	0x20000004

08000d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x20>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x24>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_IncTick+0x24>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000174 	.word	0x20000174

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <HAL_GetTick+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000174 	.word	0x20000174

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	; (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef4:	d301      	bcc.n	8000efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00f      	b.n	8000f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <SysTick_Config+0x40>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f02:	210f      	movs	r1, #15
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f08:	f7ff ff8e 	bl	8000e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <SysTick_Config+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <SysTick_Config+0x40>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000e010 	.word	0xe000e010

08000f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff47 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f50:	f7ff ff5c 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	f7ff ff8e 	bl	8000e7c <NVIC_EncodePriority>
 8000f60:	4602      	mov	r2, r0
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff5d 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ffb0 	bl	8000ee4 <SysTick_Config>
 8000f84:	4603      	mov	r3, r0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
 8000faa:	e159      	b.n	8001260 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fac:	2201      	movs	r2, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	f040 8148 	bne.w	800125a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d005      	beq.n	8000fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d130      	bne.n	8001044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2203      	movs	r2, #3
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001018:	2201      	movs	r2, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	091b      	lsrs	r3, r3, #4
 800102e:	f003 0201 	and.w	r2, r3, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b03      	cmp	r3, #3
 800104e:	d017      	beq.n	8001080 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	2203      	movs	r2, #3
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d123      	bne.n	80010d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	08da      	lsrs	r2, r3, #3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3208      	adds	r2, #8
 8001094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	f003 0307 	and.w	r3, r3, #7
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	220f      	movs	r2, #15
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	691a      	ldr	r2, [r3, #16]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	08da      	lsrs	r2, r3, #3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3208      	adds	r2, #8
 80010ce:	69b9      	ldr	r1, [r7, #24]
 80010d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0203 	and.w	r2, r3, #3
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 80a2 	beq.w	800125a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b57      	ldr	r3, [pc, #348]	; (8001278 <HAL_GPIO_Init+0x2e8>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	4a56      	ldr	r2, [pc, #344]	; (8001278 <HAL_GPIO_Init+0x2e8>)
 8001120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001124:	6453      	str	r3, [r2, #68]	; 0x44
 8001126:	4b54      	ldr	r3, [pc, #336]	; (8001278 <HAL_GPIO_Init+0x2e8>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001132:	4a52      	ldr	r2, [pc, #328]	; (800127c <HAL_GPIO_Init+0x2ec>)
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	3302      	adds	r3, #2
 800113a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	220f      	movs	r2, #15
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a49      	ldr	r2, [pc, #292]	; (8001280 <HAL_GPIO_Init+0x2f0>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d019      	beq.n	8001192 <HAL_GPIO_Init+0x202>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a48      	ldr	r2, [pc, #288]	; (8001284 <HAL_GPIO_Init+0x2f4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d013      	beq.n	800118e <HAL_GPIO_Init+0x1fe>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a47      	ldr	r2, [pc, #284]	; (8001288 <HAL_GPIO_Init+0x2f8>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d00d      	beq.n	800118a <HAL_GPIO_Init+0x1fa>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a46      	ldr	r2, [pc, #280]	; (800128c <HAL_GPIO_Init+0x2fc>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d007      	beq.n	8001186 <HAL_GPIO_Init+0x1f6>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a45      	ldr	r2, [pc, #276]	; (8001290 <HAL_GPIO_Init+0x300>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d101      	bne.n	8001182 <HAL_GPIO_Init+0x1f2>
 800117e:	2304      	movs	r3, #4
 8001180:	e008      	b.n	8001194 <HAL_GPIO_Init+0x204>
 8001182:	2307      	movs	r3, #7
 8001184:	e006      	b.n	8001194 <HAL_GPIO_Init+0x204>
 8001186:	2303      	movs	r3, #3
 8001188:	e004      	b.n	8001194 <HAL_GPIO_Init+0x204>
 800118a:	2302      	movs	r3, #2
 800118c:	e002      	b.n	8001194 <HAL_GPIO_Init+0x204>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <HAL_GPIO_Init+0x204>
 8001192:	2300      	movs	r3, #0
 8001194:	69fa      	ldr	r2, [r7, #28]
 8001196:	f002 0203 	and.w	r2, r2, #3
 800119a:	0092      	lsls	r2, r2, #2
 800119c:	4093      	lsls	r3, r2
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a4:	4935      	ldr	r1, [pc, #212]	; (800127c <HAL_GPIO_Init+0x2ec>)
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b2:	4b38      	ldr	r3, [pc, #224]	; (8001294 <HAL_GPIO_Init+0x304>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d6:	4a2f      	ldr	r2, [pc, #188]	; (8001294 <HAL_GPIO_Init+0x304>)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011dc:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <HAL_GPIO_Init+0x304>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001200:	4a24      	ldr	r2, [pc, #144]	; (8001294 <HAL_GPIO_Init+0x304>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001206:	4b23      	ldr	r3, [pc, #140]	; (8001294 <HAL_GPIO_Init+0x304>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800122a:	4a1a      	ldr	r2, [pc, #104]	; (8001294 <HAL_GPIO_Init+0x304>)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <HAL_GPIO_Init+0x304>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001254:	4a0f      	ldr	r2, [pc, #60]	; (8001294 <HAL_GPIO_Init+0x304>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3301      	adds	r3, #1
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	2b0f      	cmp	r3, #15
 8001264:	f67f aea2 	bls.w	8000fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40013800 	.word	0x40013800
 8001280:	40020000 	.word	0x40020000
 8001284:	40020400 	.word	0x40020400
 8001288:	40020800 	.word	0x40020800
 800128c:	40020c00 	.word	0x40020c00
 8001290:	40021000 	.word	0x40021000
 8001294:	40013c00 	.word	0x40013c00

08001298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]
 80012a4:	4613      	mov	r3, r2
 80012a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a8:	787b      	ldrb	r3, [r7, #1]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012b4:	e003      	b.n	80012be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	041a      	lsls	r2, r3, #16
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	619a      	str	r2, [r3, #24]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e12b      	b.n	8001536 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d106      	bne.n	80012f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fb12 	bl	800091c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2224      	movs	r2, #36	; 0x24
 80012fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0201 	bic.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800131e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800132e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001330:	f001 fbd8 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 8001334:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	4a81      	ldr	r2, [pc, #516]	; (8001540 <HAL_I2C_Init+0x274>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d807      	bhi.n	8001350 <HAL_I2C_Init+0x84>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4a80      	ldr	r2, [pc, #512]	; (8001544 <HAL_I2C_Init+0x278>)
 8001344:	4293      	cmp	r3, r2
 8001346:	bf94      	ite	ls
 8001348:	2301      	movls	r3, #1
 800134a:	2300      	movhi	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	e006      	b.n	800135e <HAL_I2C_Init+0x92>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4a7d      	ldr	r2, [pc, #500]	; (8001548 <HAL_I2C_Init+0x27c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	bf94      	ite	ls
 8001358:	2301      	movls	r3, #1
 800135a:	2300      	movhi	r3, #0
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e0e7      	b.n	8001536 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4a78      	ldr	r2, [pc, #480]	; (800154c <HAL_I2C_Init+0x280>)
 800136a:	fba2 2303 	umull	r2, r3, r2, r3
 800136e:	0c9b      	lsrs	r3, r3, #18
 8001370:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	430a      	orrs	r2, r1
 8001384:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	4a6a      	ldr	r2, [pc, #424]	; (8001540 <HAL_I2C_Init+0x274>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d802      	bhi.n	80013a0 <HAL_I2C_Init+0xd4>
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	3301      	adds	r3, #1
 800139e:	e009      	b.n	80013b4 <HAL_I2C_Init+0xe8>
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013a6:	fb02 f303 	mul.w	r3, r2, r3
 80013aa:	4a69      	ldr	r2, [pc, #420]	; (8001550 <HAL_I2C_Init+0x284>)
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	099b      	lsrs	r3, r3, #6
 80013b2:	3301      	adds	r3, #1
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6812      	ldr	r2, [r2, #0]
 80013b8:	430b      	orrs	r3, r1
 80013ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	495c      	ldr	r1, [pc, #368]	; (8001540 <HAL_I2C_Init+0x274>)
 80013d0:	428b      	cmp	r3, r1
 80013d2:	d819      	bhi.n	8001408 <HAL_I2C_Init+0x13c>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	fbb1 f3f3 	udiv	r3, r1, r3
 80013e2:	1c59      	adds	r1, r3, #1
 80013e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80013e8:	400b      	ands	r3, r1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00a      	beq.n	8001404 <HAL_I2C_Init+0x138>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	1e59      	subs	r1, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80013fc:	3301      	adds	r3, #1
 80013fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001402:	e051      	b.n	80014a8 <HAL_I2C_Init+0x1dc>
 8001404:	2304      	movs	r3, #4
 8001406:	e04f      	b.n	80014a8 <HAL_I2C_Init+0x1dc>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d111      	bne.n	8001434 <HAL_I2C_Init+0x168>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	1e58      	subs	r0, r3, #1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6859      	ldr	r1, [r3, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	440b      	add	r3, r1
 800141e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001422:	3301      	adds	r3, #1
 8001424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001428:	2b00      	cmp	r3, #0
 800142a:	bf0c      	ite	eq
 800142c:	2301      	moveq	r3, #1
 800142e:	2300      	movne	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	e012      	b.n	800145a <HAL_I2C_Init+0x18e>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	1e58      	subs	r0, r3, #1
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6859      	ldr	r1, [r3, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	0099      	lsls	r1, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	fbb0 f3f3 	udiv	r3, r0, r3
 800144a:	3301      	adds	r3, #1
 800144c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001450:	2b00      	cmp	r3, #0
 8001452:	bf0c      	ite	eq
 8001454:	2301      	moveq	r3, #1
 8001456:	2300      	movne	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_I2C_Init+0x196>
 800145e:	2301      	movs	r3, #1
 8001460:	e022      	b.n	80014a8 <HAL_I2C_Init+0x1dc>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10e      	bne.n	8001488 <HAL_I2C_Init+0x1bc>
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1e58      	subs	r0, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6859      	ldr	r1, [r3, #4]
 8001472:	460b      	mov	r3, r1
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	440b      	add	r3, r1
 8001478:	fbb0 f3f3 	udiv	r3, r0, r3
 800147c:	3301      	adds	r3, #1
 800147e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001486:	e00f      	b.n	80014a8 <HAL_I2C_Init+0x1dc>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1e58      	subs	r0, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6859      	ldr	r1, [r3, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	0099      	lsls	r1, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	fbb0 f3f3 	udiv	r3, r0, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	6809      	ldr	r1, [r1, #0]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69da      	ldr	r2, [r3, #28]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6911      	ldr	r1, [r2, #16]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	68d2      	ldr	r2, [r2, #12]
 80014e2:	4311      	orrs	r1, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	430b      	orrs	r3, r1
 80014ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695a      	ldr	r2, [r3, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0201 	orr.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2220      	movs	r2, #32
 8001522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	000186a0 	.word	0x000186a0
 8001544:	001e847f 	.word	0x001e847f
 8001548:	003d08ff 	.word	0x003d08ff
 800154c:	431bde83 	.word	0x431bde83
 8001550:	10624dd3 	.word	0x10624dd3

08001554 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af02      	add	r7, sp, #8
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	4608      	mov	r0, r1
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	4603      	mov	r3, r0
 8001564:	817b      	strh	r3, [r7, #10]
 8001566:	460b      	mov	r3, r1
 8001568:	813b      	strh	r3, [r7, #8]
 800156a:	4613      	mov	r3, r2
 800156c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800156e:	f7ff fc1d 	bl	8000dac <HAL_GetTick>
 8001572:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b20      	cmp	r3, #32
 800157e:	f040 80d9 	bne.w	8001734 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2319      	movs	r3, #25
 8001588:	2201      	movs	r2, #1
 800158a:	496d      	ldr	r1, [pc, #436]	; (8001740 <HAL_I2C_Mem_Write+0x1ec>)
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f000 fc7f 	bl	8001e90 <I2C_WaitOnFlagUntilTimeout>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001598:	2302      	movs	r3, #2
 800159a:	e0cc      	b.n	8001736 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d101      	bne.n	80015aa <HAL_I2C_Mem_Write+0x56>
 80015a6:	2302      	movs	r3, #2
 80015a8:	e0c5      	b.n	8001736 <HAL_I2C_Mem_Write+0x1e2>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d007      	beq.n	80015d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 0201 	orr.w	r2, r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2221      	movs	r2, #33	; 0x21
 80015e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2240      	movs	r2, #64	; 0x40
 80015ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2200      	movs	r2, #0
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6a3a      	ldr	r2, [r7, #32]
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001600:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001606:	b29a      	uxth	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4a4d      	ldr	r2, [pc, #308]	; (8001744 <HAL_I2C_Mem_Write+0x1f0>)
 8001610:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001612:	88f8      	ldrh	r0, [r7, #6]
 8001614:	893a      	ldrh	r2, [r7, #8]
 8001616:	8979      	ldrh	r1, [r7, #10]
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	4603      	mov	r3, r0
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f000 fab6 	bl	8001b94 <I2C_RequestMemoryWrite>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d052      	beq.n	80016d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e081      	b.n	8001736 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f000 fd00 	bl	800203c <I2C_WaitOnTXEFlagUntilTimeout>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00d      	beq.n	800165e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	2b04      	cmp	r3, #4
 8001648:	d107      	bne.n	800165a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001658:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e06b      	b.n	8001736 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	781a      	ldrb	r2, [r3, #0]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001678:	3b01      	subs	r3, #1
 800167a:	b29a      	uxth	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001684:	b29b      	uxth	r3, r3
 8001686:	3b01      	subs	r3, #1
 8001688:	b29a      	uxth	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b04      	cmp	r3, #4
 800169a:	d11b      	bne.n	80016d4 <HAL_I2C_Mem_Write+0x180>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d017      	beq.n	80016d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	781a      	ldrb	r2, [r3, #0]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016be:	3b01      	subs	r3, #1
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	3b01      	subs	r3, #1
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1aa      	bne.n	8001632 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f000 fcec 	bl	80020be <I2C_WaitOnBTFFlagUntilTimeout>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00d      	beq.n	8001708 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d107      	bne.n	8001704 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001702:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e016      	b.n	8001736 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2220      	movs	r2, #32
 800171c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	e000      	b.n	8001736 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001734:	2302      	movs	r3, #2
  }
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	00100002 	.word	0x00100002
 8001744:	ffff0000 	.word	0xffff0000

08001748 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08c      	sub	sp, #48	; 0x30
 800174c:	af02      	add	r7, sp, #8
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	4608      	mov	r0, r1
 8001752:	4611      	mov	r1, r2
 8001754:	461a      	mov	r2, r3
 8001756:	4603      	mov	r3, r0
 8001758:	817b      	strh	r3, [r7, #10]
 800175a:	460b      	mov	r3, r1
 800175c:	813b      	strh	r3, [r7, #8]
 800175e:	4613      	mov	r3, r2
 8001760:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001762:	f7ff fb23 	bl	8000dac <HAL_GetTick>
 8001766:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b20      	cmp	r3, #32
 8001772:	f040 8208 	bne.w	8001b86 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2319      	movs	r3, #25
 800177c:	2201      	movs	r2, #1
 800177e:	497b      	ldr	r1, [pc, #492]	; (800196c <HAL_I2C_Mem_Read+0x224>)
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 fb85 	bl	8001e90 <I2C_WaitOnFlagUntilTimeout>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800178c:	2302      	movs	r3, #2
 800178e:	e1fb      	b.n	8001b88 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <HAL_I2C_Mem_Read+0x56>
 800179a:	2302      	movs	r3, #2
 800179c:	e1f4      	b.n	8001b88 <HAL_I2C_Mem_Read+0x440>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d007      	beq.n	80017c4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0201 	orr.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2222      	movs	r2, #34	; 0x22
 80017d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2240      	movs	r2, #64	; 0x40
 80017e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80017f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4a5b      	ldr	r2, [pc, #364]	; (8001970 <HAL_I2C_Mem_Read+0x228>)
 8001804:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001806:	88f8      	ldrh	r0, [r7, #6]
 8001808:	893a      	ldrh	r2, [r7, #8]
 800180a:	8979      	ldrh	r1, [r7, #10]
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	4603      	mov	r3, r0
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 fa52 	bl	8001cc0 <I2C_RequestMemoryRead>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e1b0      	b.n	8001b88 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182a:	2b00      	cmp	r3, #0
 800182c:	d113      	bne.n	8001856 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	623b      	str	r3, [r7, #32]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	623b      	str	r3, [r7, #32]
 8001842:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	e184      	b.n	8001b60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185a:	2b01      	cmp	r3, #1
 800185c:	d11b      	bne.n	8001896 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800186c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	e164      	b.n	8001b60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189a:	2b02      	cmp	r3, #2
 800189c:	d11b      	bne.n	80018d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	61bb      	str	r3, [r7, #24]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	e144      	b.n	8001b60 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80018ec:	e138      	b.n	8001b60 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	f200 80f1 	bhi.w	8001ada <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d123      	bne.n	8001948 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001902:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 fc1b 	bl	8002140 <I2C_WaitOnRXNEFlagUntilTimeout>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e139      	b.n	8001b88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691a      	ldr	r2, [r3, #16]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001930:	3b01      	subs	r3, #1
 8001932:	b29a      	uxth	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800193c:	b29b      	uxth	r3, r3
 800193e:	3b01      	subs	r3, #1
 8001940:	b29a      	uxth	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001946:	e10b      	b.n	8001b60 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194c:	2b02      	cmp	r3, #2
 800194e:	d14e      	bne.n	80019ee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001956:	2200      	movs	r2, #0
 8001958:	4906      	ldr	r1, [pc, #24]	; (8001974 <HAL_I2C_Mem_Read+0x22c>)
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 fa98 	bl	8001e90 <I2C_WaitOnFlagUntilTimeout>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d008      	beq.n	8001978 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e10e      	b.n	8001b88 <HAL_I2C_Mem_Read+0x440>
 800196a:	bf00      	nop
 800196c:	00100002 	.word	0x00100002
 8001970:	ffff0000 	.word	0xffff0000
 8001974:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001986:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	691a      	ldr	r2, [r3, #16]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	3b01      	subs	r3, #1
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	691a      	ldr	r2, [r3, #16]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	3b01      	subs	r3, #1
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019ec:	e0b8      	b.n	8001b60 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f4:	2200      	movs	r2, #0
 80019f6:	4966      	ldr	r1, [pc, #408]	; (8001b90 <HAL_I2C_Mem_Read+0x448>)
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f000 fa49 	bl	8001e90 <I2C_WaitOnFlagUntilTimeout>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0bf      	b.n	8001b88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691a      	ldr	r2, [r3, #16]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a50:	2200      	movs	r2, #0
 8001a52:	494f      	ldr	r1, [pc, #316]	; (8001b90 <HAL_I2C_Mem_Read+0x448>)
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 fa1b 	bl	8001e90 <I2C_WaitOnFlagUntilTimeout>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e091      	b.n	8001b88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ad8:	e042      	b.n	8001b60 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001adc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 fb2e 	bl	8002140 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e04c      	b.n	8001b88 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d118      	bne.n	8001b60 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f47f aec2 	bne.w	80018ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e000      	b.n	8001b88 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001b86:	2302      	movs	r3, #2
  }
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3728      	adds	r7, #40	; 0x28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	00010004 	.word	0x00010004

08001b94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	4608      	mov	r0, r1
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	817b      	strh	r3, [r7, #10]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	813b      	strh	r3, [r7, #8]
 8001baa:	4613      	mov	r3, r2
 8001bac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 f960 	bl	8001e90 <I2C_WaitOnFlagUntilTimeout>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00d      	beq.n	8001bf2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001be4:	d103      	bne.n	8001bee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e05f      	b.n	8001cb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bf2:	897b      	ldrh	r3, [r7, #10]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	6a3a      	ldr	r2, [r7, #32]
 8001c06:	492d      	ldr	r1, [pc, #180]	; (8001cbc <I2C_RequestMemoryWrite+0x128>)
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 f998 	bl	8001f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e04c      	b.n	8001cb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c30:	6a39      	ldr	r1, [r7, #32]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 fa02 	bl	800203c <I2C_WaitOnTXEFlagUntilTimeout>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00d      	beq.n	8001c5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d107      	bne.n	8001c56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e02b      	b.n	8001cb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d105      	bne.n	8001c6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c60:	893b      	ldrh	r3, [r7, #8]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	611a      	str	r2, [r3, #16]
 8001c6a:	e021      	b.n	8001cb0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c6c:	893b      	ldrh	r3, [r7, #8]
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7c:	6a39      	ldr	r1, [r7, #32]
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 f9dc 	bl	800203c <I2C_WaitOnTXEFlagUntilTimeout>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00d      	beq.n	8001ca6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d107      	bne.n	8001ca2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ca0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e005      	b.n	8001cb2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ca6:	893b      	ldrh	r3, [r7, #8]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	00010002 	.word	0x00010002

08001cc0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af02      	add	r7, sp, #8
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	4608      	mov	r0, r1
 8001cca:	4611      	mov	r1, r2
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4603      	mov	r3, r0
 8001cd0:	817b      	strh	r3, [r7, #10]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	813b      	strh	r3, [r7, #8]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ce8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cf8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f000 f8c2 	bl	8001e90 <I2C_WaitOnFlagUntilTimeout>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00d      	beq.n	8001d2e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d20:	d103      	bne.n	8001d2a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e0aa      	b.n	8001e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d2e:	897b      	ldrh	r3, [r7, #10]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	461a      	mov	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	6a3a      	ldr	r2, [r7, #32]
 8001d42:	4952      	ldr	r1, [pc, #328]	; (8001e8c <I2C_RequestMemoryRead+0x1cc>)
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 f8fa 	bl	8001f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e097      	b.n	8001e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d6c:	6a39      	ldr	r1, [r7, #32]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 f964 	bl	800203c <I2C_WaitOnTXEFlagUntilTimeout>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00d      	beq.n	8001d96 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d107      	bne.n	8001d92 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e076      	b.n	8001e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d105      	bne.n	8001da8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d9c:	893b      	ldrh	r3, [r7, #8]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	611a      	str	r2, [r3, #16]
 8001da6:	e021      	b.n	8001dec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001da8:	893b      	ldrh	r3, [r7, #8]
 8001daa:	0a1b      	lsrs	r3, r3, #8
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db8:	6a39      	ldr	r1, [r7, #32]
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 f93e 	bl	800203c <I2C_WaitOnTXEFlagUntilTimeout>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00d      	beq.n	8001de2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d107      	bne.n	8001dde <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ddc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e050      	b.n	8001e84 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001de2:	893b      	ldrh	r3, [r7, #8]
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dee:	6a39      	ldr	r1, [r7, #32]
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 f923 	bl	800203c <I2C_WaitOnTXEFlagUntilTimeout>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00d      	beq.n	8001e18 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d107      	bne.n	8001e14 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e035      	b.n	8001e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e26:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 f82b 	bl	8001e90 <I2C_WaitOnFlagUntilTimeout>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00d      	beq.n	8001e5c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e4e:	d103      	bne.n	8001e58 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e013      	b.n	8001e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e5c:	897b      	ldrh	r3, [r7, #10]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	6a3a      	ldr	r2, [r7, #32]
 8001e70:	4906      	ldr	r1, [pc, #24]	; (8001e8c <I2C_RequestMemoryRead+0x1cc>)
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 f863 	bl	8001f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	00010002 	.word	0x00010002

08001e90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ea0:	e025      	b.n	8001eee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ea8:	d021      	beq.n	8001eee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eaa:	f7fe ff7f 	bl	8000dac <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d302      	bcc.n	8001ec0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d116      	bne.n	8001eee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f043 0220 	orr.w	r2, r3, #32
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e023      	b.n	8001f36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	0c1b      	lsrs	r3, r3, #16
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d10d      	bne.n	8001f14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	43da      	mvns	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4013      	ands	r3, r2
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	bf0c      	ite	eq
 8001f0a:	2301      	moveq	r3, #1
 8001f0c:	2300      	movne	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	e00c      	b.n	8001f2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	bf0c      	ite	eq
 8001f26:	2301      	moveq	r3, #1
 8001f28:	2300      	movne	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d0b6      	beq.n	8001ea2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f4c:	e051      	b.n	8001ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5c:	d123      	bne.n	8001fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2220      	movs	r2, #32
 8001f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f043 0204 	orr.w	r2, r3, #4
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e046      	b.n	8002034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fac:	d021      	beq.n	8001ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fae:	f7fe fefd 	bl	8000dac <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d302      	bcc.n	8001fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d116      	bne.n	8001ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f043 0220 	orr.w	r2, r3, #32
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e020      	b.n	8002034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	0c1b      	lsrs	r3, r3, #16
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d10c      	bne.n	8002016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	43da      	mvns	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	4013      	ands	r3, r2
 8002008:	b29b      	uxth	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	bf14      	ite	ne
 800200e:	2301      	movne	r3, #1
 8002010:	2300      	moveq	r3, #0
 8002012:	b2db      	uxtb	r3, r3
 8002014:	e00b      	b.n	800202e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	43da      	mvns	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	4013      	ands	r3, r2
 8002022:	b29b      	uxth	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf14      	ite	ne
 8002028:	2301      	movne	r3, #1
 800202a:	2300      	moveq	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d18d      	bne.n	8001f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002048:	e02d      	b.n	80020a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f8ce 	bl	80021ec <I2C_IsAcknowledgeFailed>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e02d      	b.n	80020b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002060:	d021      	beq.n	80020a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002062:	f7fe fea3 	bl	8000dac <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	429a      	cmp	r2, r3
 8002070:	d302      	bcc.n	8002078 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d116      	bne.n	80020a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f043 0220 	orr.w	r2, r3, #32
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e007      	b.n	80020b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b0:	2b80      	cmp	r3, #128	; 0x80
 80020b2:	d1ca      	bne.n	800204a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b084      	sub	sp, #16
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020ca:	e02d      	b.n	8002128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f88d 	bl	80021ec <I2C_IsAcknowledgeFailed>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e02d      	b.n	8002138 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020e2:	d021      	beq.n	8002128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e4:	f7fe fe62 	bl	8000dac <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d302      	bcc.n	80020fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d116      	bne.n	8002128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2220      	movs	r2, #32
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	f043 0220 	orr.w	r2, r3, #32
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e007      	b.n	8002138 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b04      	cmp	r3, #4
 8002134:	d1ca      	bne.n	80020cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800214c:	e042      	b.n	80021d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	2b10      	cmp	r3, #16
 800215a:	d119      	bne.n	8002190 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0210 	mvn.w	r2, #16
 8002164:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e029      	b.n	80021e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002190:	f7fe fe0c 	bl	8000dac <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	429a      	cmp	r2, r3
 800219e:	d302      	bcc.n	80021a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d116      	bne.n	80021d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	f043 0220 	orr.w	r2, r3, #32
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e007      	b.n	80021e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021de:	2b40      	cmp	r3, #64	; 0x40
 80021e0:	d1b5      	bne.n	800214e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002202:	d11b      	bne.n	800223c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800220c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	f043 0204 	orr.w	r2, r3, #4
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e000      	b.n	800223e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e264      	b.n	8002728 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d075      	beq.n	8002356 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800226a:	4ba3      	ldr	r3, [pc, #652]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b04      	cmp	r3, #4
 8002274:	d00c      	beq.n	8002290 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002276:	4ba0      	ldr	r3, [pc, #640]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800227e:	2b08      	cmp	r3, #8
 8002280:	d112      	bne.n	80022a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002282:	4b9d      	ldr	r3, [pc, #628]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800228a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800228e:	d10b      	bne.n	80022a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002290:	4b99      	ldr	r3, [pc, #612]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d05b      	beq.n	8002354 <HAL_RCC_OscConfig+0x108>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d157      	bne.n	8002354 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e23f      	b.n	8002728 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b0:	d106      	bne.n	80022c0 <HAL_RCC_OscConfig+0x74>
 80022b2:	4b91      	ldr	r3, [pc, #580]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a90      	ldr	r2, [pc, #576]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e01d      	b.n	80022fc <HAL_RCC_OscConfig+0xb0>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x98>
 80022ca:	4b8b      	ldr	r3, [pc, #556]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a8a      	ldr	r2, [pc, #552]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b88      	ldr	r3, [pc, #544]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a87      	ldr	r2, [pc, #540]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80022dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	e00b      	b.n	80022fc <HAL_RCC_OscConfig+0xb0>
 80022e4:	4b84      	ldr	r3, [pc, #528]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a83      	ldr	r2, [pc, #524]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80022ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b81      	ldr	r3, [pc, #516]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a80      	ldr	r2, [pc, #512]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80022f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d013      	beq.n	800232c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7fe fd52 	bl	8000dac <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800230c:	f7fe fd4e 	bl	8000dac <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	; 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e204      	b.n	8002728 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	4b76      	ldr	r3, [pc, #472]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0xc0>
 800232a:	e014      	b.n	8002356 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7fe fd3e 	bl	8000dac <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002334:	f7fe fd3a 	bl	8000dac <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	; 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e1f0      	b.n	8002728 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002346:	4b6c      	ldr	r3, [pc, #432]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0xe8>
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d063      	beq.n	800242a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002362:	4b65      	ldr	r3, [pc, #404]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00b      	beq.n	8002386 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800236e:	4b62      	ldr	r3, [pc, #392]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002376:	2b08      	cmp	r3, #8
 8002378:	d11c      	bne.n	80023b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800237a:	4b5f      	ldr	r3, [pc, #380]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d116      	bne.n	80023b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002386:	4b5c      	ldr	r3, [pc, #368]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d005      	beq.n	800239e <HAL_RCC_OscConfig+0x152>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d001      	beq.n	800239e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e1c4      	b.n	8002728 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239e:	4b56      	ldr	r3, [pc, #344]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4952      	ldr	r1, [pc, #328]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b2:	e03a      	b.n	800242a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d020      	beq.n	80023fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023bc:	4b4f      	ldr	r3, [pc, #316]	; (80024fc <HAL_RCC_OscConfig+0x2b0>)
 80023be:	2201      	movs	r2, #1
 80023c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c2:	f7fe fcf3 	bl	8000dac <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ca:	f7fe fcef 	bl	8000dac <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e1a5      	b.n	8002728 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023dc:	4b46      	ldr	r3, [pc, #280]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e8:	4b43      	ldr	r3, [pc, #268]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4940      	ldr	r1, [pc, #256]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	600b      	str	r3, [r1, #0]
 80023fc:	e015      	b.n	800242a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fe:	4b3f      	ldr	r3, [pc, #252]	; (80024fc <HAL_RCC_OscConfig+0x2b0>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7fe fcd2 	bl	8000dac <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800240c:	f7fe fcce 	bl	8000dac <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e184      	b.n	8002728 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241e:	4b36      	ldr	r3, [pc, #216]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d030      	beq.n	8002498 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d016      	beq.n	800246c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800243e:	4b30      	ldr	r3, [pc, #192]	; (8002500 <HAL_RCC_OscConfig+0x2b4>)
 8002440:	2201      	movs	r2, #1
 8002442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002444:	f7fe fcb2 	bl	8000dac <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800244c:	f7fe fcae 	bl	8000dac <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e164      	b.n	8002728 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800245e:	4b26      	ldr	r3, [pc, #152]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 8002460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0x200>
 800246a:	e015      	b.n	8002498 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800246c:	4b24      	ldr	r3, [pc, #144]	; (8002500 <HAL_RCC_OscConfig+0x2b4>)
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002472:	f7fe fc9b 	bl	8000dac <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800247a:	f7fe fc97 	bl	8000dac <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e14d      	b.n	8002728 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800248c:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 800248e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1f0      	bne.n	800247a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80a0 	beq.w	80025e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024aa:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10f      	bne.n	80024d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	4a0e      	ldr	r2, [pc, #56]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c4:	6413      	str	r3, [r2, #64]	; 0x40
 80024c6:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d2:	2301      	movs	r3, #1
 80024d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d6:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_RCC_OscConfig+0x2b8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d121      	bne.n	8002526 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <HAL_RCC_OscConfig+0x2b8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a07      	ldr	r2, [pc, #28]	; (8002504 <HAL_RCC_OscConfig+0x2b8>)
 80024e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ee:	f7fe fc5d 	bl	8000dac <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f4:	e011      	b.n	800251a <HAL_RCC_OscConfig+0x2ce>
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800
 80024fc:	42470000 	.word	0x42470000
 8002500:	42470e80 	.word	0x42470e80
 8002504:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002508:	f7fe fc50 	bl	8000dac <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e106      	b.n	8002728 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251a:	4b85      	ldr	r3, [pc, #532]	; (8002730 <HAL_RCC_OscConfig+0x4e4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d106      	bne.n	800253c <HAL_RCC_OscConfig+0x2f0>
 800252e:	4b81      	ldr	r3, [pc, #516]	; (8002734 <HAL_RCC_OscConfig+0x4e8>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	4a80      	ldr	r2, [pc, #512]	; (8002734 <HAL_RCC_OscConfig+0x4e8>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6713      	str	r3, [r2, #112]	; 0x70
 800253a:	e01c      	b.n	8002576 <HAL_RCC_OscConfig+0x32a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2b05      	cmp	r3, #5
 8002542:	d10c      	bne.n	800255e <HAL_RCC_OscConfig+0x312>
 8002544:	4b7b      	ldr	r3, [pc, #492]	; (8002734 <HAL_RCC_OscConfig+0x4e8>)
 8002546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002548:	4a7a      	ldr	r2, [pc, #488]	; (8002734 <HAL_RCC_OscConfig+0x4e8>)
 800254a:	f043 0304 	orr.w	r3, r3, #4
 800254e:	6713      	str	r3, [r2, #112]	; 0x70
 8002550:	4b78      	ldr	r3, [pc, #480]	; (8002734 <HAL_RCC_OscConfig+0x4e8>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	4a77      	ldr	r2, [pc, #476]	; (8002734 <HAL_RCC_OscConfig+0x4e8>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	6713      	str	r3, [r2, #112]	; 0x70
 800255c:	e00b      	b.n	8002576 <HAL_RCC_OscConfig+0x32a>
 800255e:	4b75      	ldr	r3, [pc, #468]	; (8002734 <HAL_RCC_OscConfig+0x4e8>)
 8002560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002562:	4a74      	ldr	r2, [pc, #464]	; (8002734 <HAL_RCC_OscConfig+0x4e8>)
 8002564:	f023 0301 	bic.w	r3, r3, #1
 8002568:	6713      	str	r3, [r2, #112]	; 0x70
 800256a:	4b72      	ldr	r3, [pc, #456]	; (8002734 <HAL_RCC_OscConfig+0x4e8>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	4a71      	ldr	r2, [pc, #452]	; (8002734 <HAL_RCC_OscConfig+0x4e8>)
 8002570:	f023 0304 	bic.w	r3, r3, #4
 8002574:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d015      	beq.n	80025aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257e:	f7fe fc15 	bl	8000dac <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002584:	e00a      	b.n	800259c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002586:	f7fe fc11 	bl	8000dac <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	f241 3288 	movw	r2, #5000	; 0x1388
 8002594:	4293      	cmp	r3, r2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e0c5      	b.n	8002728 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259c:	4b65      	ldr	r3, [pc, #404]	; (8002734 <HAL_RCC_OscConfig+0x4e8>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0ee      	beq.n	8002586 <HAL_RCC_OscConfig+0x33a>
 80025a8:	e014      	b.n	80025d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025aa:	f7fe fbff 	bl	8000dac <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b0:	e00a      	b.n	80025c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b2:	f7fe fbfb 	bl	8000dac <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e0af      	b.n	8002728 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c8:	4b5a      	ldr	r3, [pc, #360]	; (8002734 <HAL_RCC_OscConfig+0x4e8>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1ee      	bne.n	80025b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d4:	7dfb      	ldrb	r3, [r7, #23]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d105      	bne.n	80025e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025da:	4b56      	ldr	r3, [pc, #344]	; (8002734 <HAL_RCC_OscConfig+0x4e8>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	4a55      	ldr	r2, [pc, #340]	; (8002734 <HAL_RCC_OscConfig+0x4e8>)
 80025e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 809b 	beq.w	8002726 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025f0:	4b50      	ldr	r3, [pc, #320]	; (8002734 <HAL_RCC_OscConfig+0x4e8>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 030c 	and.w	r3, r3, #12
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d05c      	beq.n	80026b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d141      	bne.n	8002688 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002604:	4b4c      	ldr	r3, [pc, #304]	; (8002738 <HAL_RCC_OscConfig+0x4ec>)
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260a:	f7fe fbcf 	bl	8000dac <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002612:	f7fe fbcb 	bl	8000dac <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e081      	b.n	8002728 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002624:	4b43      	ldr	r3, [pc, #268]	; (8002734 <HAL_RCC_OscConfig+0x4e8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f0      	bne.n	8002612 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69da      	ldr	r2, [r3, #28]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	019b      	lsls	r3, r3, #6
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	085b      	lsrs	r3, r3, #1
 8002648:	3b01      	subs	r3, #1
 800264a:	041b      	lsls	r3, r3, #16
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002652:	061b      	lsls	r3, r3, #24
 8002654:	4937      	ldr	r1, [pc, #220]	; (8002734 <HAL_RCC_OscConfig+0x4e8>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800265a:	4b37      	ldr	r3, [pc, #220]	; (8002738 <HAL_RCC_OscConfig+0x4ec>)
 800265c:	2201      	movs	r2, #1
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7fe fba4 	bl	8000dac <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002668:	f7fe fba0 	bl	8000dac <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e056      	b.n	8002728 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267a:	4b2e      	ldr	r3, [pc, #184]	; (8002734 <HAL_RCC_OscConfig+0x4e8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x41c>
 8002686:	e04e      	b.n	8002726 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002688:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <HAL_RCC_OscConfig+0x4ec>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268e:	f7fe fb8d 	bl	8000dac <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002696:	f7fe fb89 	bl	8000dac <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e03f      	b.n	8002728 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a8:	4b22      	ldr	r3, [pc, #136]	; (8002734 <HAL_RCC_OscConfig+0x4e8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCC_OscConfig+0x44a>
 80026b4:	e037      	b.n	8002726 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e032      	b.n	8002728 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026c2:	4b1c      	ldr	r3, [pc, #112]	; (8002734 <HAL_RCC_OscConfig+0x4e8>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d028      	beq.n	8002722 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d121      	bne.n	8002722 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d11a      	bne.n	8002722 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026f2:	4013      	ands	r3, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026f8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d111      	bne.n	8002722 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	085b      	lsrs	r3, r3, #1
 800270a:	3b01      	subs	r3, #1
 800270c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800270e:	429a      	cmp	r2, r3
 8002710:	d107      	bne.n	8002722 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800271e:	429a      	cmp	r2, r3
 8002720:	d001      	beq.n	8002726 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40007000 	.word	0x40007000
 8002734:	40023800 	.word	0x40023800
 8002738:	42470060 	.word	0x42470060

0800273c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0cc      	b.n	80028ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002750:	4b68      	ldr	r3, [pc, #416]	; (80028f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d90c      	bls.n	8002778 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275e:	4b65      	ldr	r3, [pc, #404]	; (80028f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002766:	4b63      	ldr	r3, [pc, #396]	; (80028f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0b8      	b.n	80028ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d020      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d005      	beq.n	800279c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002790:	4b59      	ldr	r3, [pc, #356]	; (80028f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	4a58      	ldr	r2, [pc, #352]	; (80028f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800279a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a8:	4b53      	ldr	r3, [pc, #332]	; (80028f8 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	4a52      	ldr	r2, [pc, #328]	; (80028f8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b4:	4b50      	ldr	r3, [pc, #320]	; (80028f8 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	494d      	ldr	r1, [pc, #308]	; (80028f8 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d044      	beq.n	800285c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d107      	bne.n	80027ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027da:	4b47      	ldr	r3, [pc, #284]	; (80028f8 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d119      	bne.n	800281a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e07f      	b.n	80028ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d003      	beq.n	80027fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d107      	bne.n	800280a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fa:	4b3f      	ldr	r3, [pc, #252]	; (80028f8 <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d109      	bne.n	800281a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e06f      	b.n	80028ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280a:	4b3b      	ldr	r3, [pc, #236]	; (80028f8 <HAL_RCC_ClockConfig+0x1bc>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e067      	b.n	80028ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800281a:	4b37      	ldr	r3, [pc, #220]	; (80028f8 <HAL_RCC_ClockConfig+0x1bc>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f023 0203 	bic.w	r2, r3, #3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4934      	ldr	r1, [pc, #208]	; (80028f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	4313      	orrs	r3, r2
 800282a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800282c:	f7fe fabe 	bl	8000dac <HAL_GetTick>
 8002830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002832:	e00a      	b.n	800284a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002834:	f7fe faba 	bl	8000dac <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002842:	4293      	cmp	r3, r2
 8002844:	d901      	bls.n	800284a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e04f      	b.n	80028ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284a:	4b2b      	ldr	r3, [pc, #172]	; (80028f8 <HAL_RCC_ClockConfig+0x1bc>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 020c 	and.w	r2, r3, #12
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	429a      	cmp	r2, r3
 800285a:	d1eb      	bne.n	8002834 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800285c:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <HAL_RCC_ClockConfig+0x1b8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d20c      	bcs.n	8002884 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286a:	4b22      	ldr	r3, [pc, #136]	; (80028f4 <HAL_RCC_ClockConfig+0x1b8>)
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e032      	b.n	80028ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4916      	ldr	r1, [pc, #88]	; (80028f8 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d009      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ae:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	490e      	ldr	r1, [pc, #56]	; (80028f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028c2:	f000 f821 	bl	8002908 <HAL_RCC_GetSysClockFreq>
 80028c6:	4602      	mov	r2, r0
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	490a      	ldr	r1, [pc, #40]	; (80028fc <HAL_RCC_ClockConfig+0x1c0>)
 80028d4:	5ccb      	ldrb	r3, [r1, r3]
 80028d6:	fa22 f303 	lsr.w	r3, r2, r3
 80028da:	4a09      	ldr	r2, [pc, #36]	; (8002900 <HAL_RCC_ClockConfig+0x1c4>)
 80028dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <HAL_RCC_ClockConfig+0x1c8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe fa1e 	bl	8000d24 <HAL_InitTick>

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40023c00 	.word	0x40023c00
 80028f8:	40023800 	.word	0x40023800
 80028fc:	08003258 	.word	0x08003258
 8002900:	20000000 	.word	0x20000000
 8002904:	20000004 	.word	0x20000004

08002908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002908:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	607b      	str	r3, [r7, #4]
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	2300      	movs	r3, #0
 800291a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002920:	4b67      	ldr	r3, [pc, #412]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 030c 	and.w	r3, r3, #12
 8002928:	2b08      	cmp	r3, #8
 800292a:	d00d      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x40>
 800292c:	2b08      	cmp	r3, #8
 800292e:	f200 80bd 	bhi.w	8002aac <HAL_RCC_GetSysClockFreq+0x1a4>
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <HAL_RCC_GetSysClockFreq+0x34>
 8002936:	2b04      	cmp	r3, #4
 8002938:	d003      	beq.n	8002942 <HAL_RCC_GetSysClockFreq+0x3a>
 800293a:	e0b7      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800293c:	4b61      	ldr	r3, [pc, #388]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800293e:	60bb      	str	r3, [r7, #8]
       break;
 8002940:	e0b7      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002942:	4b61      	ldr	r3, [pc, #388]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002944:	60bb      	str	r3, [r7, #8]
      break;
 8002946:	e0b4      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002948:	4b5d      	ldr	r3, [pc, #372]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002950:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002952:	4b5b      	ldr	r3, [pc, #364]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d04d      	beq.n	80029fa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800295e:	4b58      	ldr	r3, [pc, #352]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	099b      	lsrs	r3, r3, #6
 8002964:	461a      	mov	r2, r3
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800296e:	f04f 0100 	mov.w	r1, #0
 8002972:	ea02 0800 	and.w	r8, r2, r0
 8002976:	ea03 0901 	and.w	r9, r3, r1
 800297a:	4640      	mov	r0, r8
 800297c:	4649      	mov	r1, r9
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	014b      	lsls	r3, r1, #5
 8002988:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800298c:	0142      	lsls	r2, r0, #5
 800298e:	4610      	mov	r0, r2
 8002990:	4619      	mov	r1, r3
 8002992:	ebb0 0008 	subs.w	r0, r0, r8
 8002996:	eb61 0109 	sbc.w	r1, r1, r9
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	f04f 0300 	mov.w	r3, #0
 80029a2:	018b      	lsls	r3, r1, #6
 80029a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029a8:	0182      	lsls	r2, r0, #6
 80029aa:	1a12      	subs	r2, r2, r0
 80029ac:	eb63 0301 	sbc.w	r3, r3, r1
 80029b0:	f04f 0000 	mov.w	r0, #0
 80029b4:	f04f 0100 	mov.w	r1, #0
 80029b8:	00d9      	lsls	r1, r3, #3
 80029ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029be:	00d0      	lsls	r0, r2, #3
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	eb12 0208 	adds.w	r2, r2, r8
 80029c8:	eb43 0309 	adc.w	r3, r3, r9
 80029cc:	f04f 0000 	mov.w	r0, #0
 80029d0:	f04f 0100 	mov.w	r1, #0
 80029d4:	0259      	lsls	r1, r3, #9
 80029d6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80029da:	0250      	lsls	r0, r2, #9
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4610      	mov	r0, r2
 80029e2:	4619      	mov	r1, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	461a      	mov	r2, r3
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	f7fd fbf2 	bl	80001d4 <__aeabi_uldivmod>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4613      	mov	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e04a      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fa:	4b31      	ldr	r3, [pc, #196]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	099b      	lsrs	r3, r3, #6
 8002a00:	461a      	mov	r2, r3
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a0a:	f04f 0100 	mov.w	r1, #0
 8002a0e:	ea02 0400 	and.w	r4, r2, r0
 8002a12:	ea03 0501 	and.w	r5, r3, r1
 8002a16:	4620      	mov	r0, r4
 8002a18:	4629      	mov	r1, r5
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	f04f 0300 	mov.w	r3, #0
 8002a22:	014b      	lsls	r3, r1, #5
 8002a24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a28:	0142      	lsls	r2, r0, #5
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	1b00      	subs	r0, r0, r4
 8002a30:	eb61 0105 	sbc.w	r1, r1, r5
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	018b      	lsls	r3, r1, #6
 8002a3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a42:	0182      	lsls	r2, r0, #6
 8002a44:	1a12      	subs	r2, r2, r0
 8002a46:	eb63 0301 	sbc.w	r3, r3, r1
 8002a4a:	f04f 0000 	mov.w	r0, #0
 8002a4e:	f04f 0100 	mov.w	r1, #0
 8002a52:	00d9      	lsls	r1, r3, #3
 8002a54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a58:	00d0      	lsls	r0, r2, #3
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	1912      	adds	r2, r2, r4
 8002a60:	eb45 0303 	adc.w	r3, r5, r3
 8002a64:	f04f 0000 	mov.w	r0, #0
 8002a68:	f04f 0100 	mov.w	r1, #0
 8002a6c:	0299      	lsls	r1, r3, #10
 8002a6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a72:	0290      	lsls	r0, r2, #10
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	f7fd fba6 	bl	80001d4 <__aeabi_uldivmod>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	0c1b      	lsrs	r3, r3, #16
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa8:	60bb      	str	r3, [r7, #8]
      break;
 8002aaa:	e002      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002aae:	60bb      	str	r3, [r7, #8]
      break;
 8002ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	00f42400 	.word	0x00f42400
 8002ac8:	007a1200 	.word	0x007a1200

08002acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad0:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20000000 	.word	0x20000000

08002ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ae8:	f7ff fff0 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	0a9b      	lsrs	r3, r3, #10
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	4903      	ldr	r1, [pc, #12]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40023800 	.word	0x40023800
 8002b08:	08003268 	.word	0x08003268

08002b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b10:	f7ff ffdc 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002b14:	4602      	mov	r2, r0
 8002b16:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	0b5b      	lsrs	r3, r3, #13
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	4903      	ldr	r1, [pc, #12]	; (8002b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b22:	5ccb      	ldrb	r3, [r1, r3]
 8002b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	08003268 	.word	0x08003268

08002b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d122      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d11b      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0202 	mvn.w	r2, #2
 8002b60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f8ee 	bl	8002d58 <HAL_TIM_IC_CaptureCallback>
 8002b7c:	e005      	b.n	8002b8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f8e0 	bl	8002d44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f8f1 	bl	8002d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d122      	bne.n	8002be4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d11b      	bne.n	8002be4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0204 	mvn.w	r2, #4
 8002bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2202      	movs	r2, #2
 8002bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f8c4 	bl	8002d58 <HAL_TIM_IC_CaptureCallback>
 8002bd0:	e005      	b.n	8002bde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f8b6 	bl	8002d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f8c7 	bl	8002d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d122      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d11b      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0208 	mvn.w	r2, #8
 8002c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f89a 	bl	8002d58 <HAL_TIM_IC_CaptureCallback>
 8002c24:	e005      	b.n	8002c32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f88c 	bl	8002d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f89d 	bl	8002d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	2b10      	cmp	r3, #16
 8002c44:	d122      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	2b10      	cmp	r3, #16
 8002c52:	d11b      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0210 	mvn.w	r2, #16
 8002c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2208      	movs	r2, #8
 8002c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f870 	bl	8002d58 <HAL_TIM_IC_CaptureCallback>
 8002c78:	e005      	b.n	8002c86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f862 	bl	8002d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f873 	bl	8002d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d10e      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d107      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0201 	mvn.w	r2, #1
 8002cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fd fefa 	bl	8000aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc2:	2b80      	cmp	r3, #128	; 0x80
 8002cc4:	d10e      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd0:	2b80      	cmp	r3, #128	; 0x80
 8002cd2:	d107      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f862 	bl	8002da8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cee:	2b40      	cmp	r3, #64	; 0x40
 8002cf0:	d10e      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfc:	2b40      	cmp	r3, #64	; 0x40
 8002cfe:	d107      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f838 	bl	8002d80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	d10e      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0320 	and.w	r3, r3, #32
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	d107      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0220 	mvn.w	r2, #32
 8002d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f82c 	bl	8002d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e03f      	b.n	8002e4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fd ff0a 	bl	8000bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2224      	movs	r2, #36	; 0x24
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f829 	bl	8002e58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e5c:	b09f      	sub	sp, #124	; 0x7c
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6e:	68d9      	ldr	r1, [r3, #12]
 8002e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	ea40 0301 	orr.w	r3, r0, r1
 8002e78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e9c:	f021 010c 	bic.w	r1, r1, #12
 8002ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ea6:	430b      	orrs	r3, r1
 8002ea8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb6:	6999      	ldr	r1, [r3, #24]
 8002eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	ea40 0301 	orr.w	r3, r0, r1
 8002ec0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	4bc5      	ldr	r3, [pc, #788]	; (80031dc <UART_SetConfig+0x384>)
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d004      	beq.n	8002ed6 <UART_SetConfig+0x7e>
 8002ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4bc3      	ldr	r3, [pc, #780]	; (80031e0 <UART_SetConfig+0x388>)
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d103      	bne.n	8002ede <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ed6:	f7ff fe19 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 8002eda:	6778      	str	r0, [r7, #116]	; 0x74
 8002edc:	e002      	b.n	8002ee4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ede:	f7ff fe01 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 8002ee2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eec:	f040 80b6 	bne.w	800305c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ef2:	461c      	mov	r4, r3
 8002ef4:	f04f 0500 	mov.w	r5, #0
 8002ef8:	4622      	mov	r2, r4
 8002efa:	462b      	mov	r3, r5
 8002efc:	1891      	adds	r1, r2, r2
 8002efe:	6439      	str	r1, [r7, #64]	; 0x40
 8002f00:	415b      	adcs	r3, r3
 8002f02:	647b      	str	r3, [r7, #68]	; 0x44
 8002f04:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f08:	1912      	adds	r2, r2, r4
 8002f0a:	eb45 0303 	adc.w	r3, r5, r3
 8002f0e:	f04f 0000 	mov.w	r0, #0
 8002f12:	f04f 0100 	mov.w	r1, #0
 8002f16:	00d9      	lsls	r1, r3, #3
 8002f18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f1c:	00d0      	lsls	r0, r2, #3
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	1911      	adds	r1, r2, r4
 8002f24:	6639      	str	r1, [r7, #96]	; 0x60
 8002f26:	416b      	adcs	r3, r5
 8002f28:	667b      	str	r3, [r7, #100]	; 0x64
 8002f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	1891      	adds	r1, r2, r2
 8002f36:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f38:	415b      	adcs	r3, r3
 8002f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f40:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002f44:	f7fd f946 	bl	80001d4 <__aeabi_uldivmod>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4ba5      	ldr	r3, [pc, #660]	; (80031e4 <UART_SetConfig+0x38c>)
 8002f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	011e      	lsls	r6, r3, #4
 8002f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f58:	461c      	mov	r4, r3
 8002f5a:	f04f 0500 	mov.w	r5, #0
 8002f5e:	4622      	mov	r2, r4
 8002f60:	462b      	mov	r3, r5
 8002f62:	1891      	adds	r1, r2, r2
 8002f64:	6339      	str	r1, [r7, #48]	; 0x30
 8002f66:	415b      	adcs	r3, r3
 8002f68:	637b      	str	r3, [r7, #52]	; 0x34
 8002f6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f6e:	1912      	adds	r2, r2, r4
 8002f70:	eb45 0303 	adc.w	r3, r5, r3
 8002f74:	f04f 0000 	mov.w	r0, #0
 8002f78:	f04f 0100 	mov.w	r1, #0
 8002f7c:	00d9      	lsls	r1, r3, #3
 8002f7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f82:	00d0      	lsls	r0, r2, #3
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	1911      	adds	r1, r2, r4
 8002f8a:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f8c:	416b      	adcs	r3, r5
 8002f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	461a      	mov	r2, r3
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	1891      	adds	r1, r2, r2
 8002f9c:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f9e:	415b      	adcs	r3, r3
 8002fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fa6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002faa:	f7fd f913 	bl	80001d4 <__aeabi_uldivmod>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	4b8c      	ldr	r3, [pc, #560]	; (80031e4 <UART_SetConfig+0x38c>)
 8002fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb8:	095b      	lsrs	r3, r3, #5
 8002fba:	2164      	movs	r1, #100	; 0x64
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	3332      	adds	r3, #50	; 0x32
 8002fc6:	4a87      	ldr	r2, [pc, #540]	; (80031e4 <UART_SetConfig+0x38c>)
 8002fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fcc:	095b      	lsrs	r3, r3, #5
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fd4:	441e      	add	r6, r3
 8002fd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f04f 0100 	mov.w	r1, #0
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	1894      	adds	r4, r2, r2
 8002fe4:	623c      	str	r4, [r7, #32]
 8002fe6:	415b      	adcs	r3, r3
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fee:	1812      	adds	r2, r2, r0
 8002ff0:	eb41 0303 	adc.w	r3, r1, r3
 8002ff4:	f04f 0400 	mov.w	r4, #0
 8002ff8:	f04f 0500 	mov.w	r5, #0
 8002ffc:	00dd      	lsls	r5, r3, #3
 8002ffe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003002:	00d4      	lsls	r4, r2, #3
 8003004:	4622      	mov	r2, r4
 8003006:	462b      	mov	r3, r5
 8003008:	1814      	adds	r4, r2, r0
 800300a:	653c      	str	r4, [r7, #80]	; 0x50
 800300c:	414b      	adcs	r3, r1
 800300e:	657b      	str	r3, [r7, #84]	; 0x54
 8003010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	461a      	mov	r2, r3
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	1891      	adds	r1, r2, r2
 800301c:	61b9      	str	r1, [r7, #24]
 800301e:	415b      	adcs	r3, r3
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003026:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800302a:	f7fd f8d3 	bl	80001d4 <__aeabi_uldivmod>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4b6c      	ldr	r3, [pc, #432]	; (80031e4 <UART_SetConfig+0x38c>)
 8003034:	fba3 1302 	umull	r1, r3, r3, r2
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	2164      	movs	r1, #100	; 0x64
 800303c:	fb01 f303 	mul.w	r3, r1, r3
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	3332      	adds	r3, #50	; 0x32
 8003046:	4a67      	ldr	r2, [pc, #412]	; (80031e4 <UART_SetConfig+0x38c>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	f003 0207 	and.w	r2, r3, #7
 8003052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4432      	add	r2, r6
 8003058:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800305a:	e0b9      	b.n	80031d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800305c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800305e:	461c      	mov	r4, r3
 8003060:	f04f 0500 	mov.w	r5, #0
 8003064:	4622      	mov	r2, r4
 8003066:	462b      	mov	r3, r5
 8003068:	1891      	adds	r1, r2, r2
 800306a:	6139      	str	r1, [r7, #16]
 800306c:	415b      	adcs	r3, r3
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003074:	1912      	adds	r2, r2, r4
 8003076:	eb45 0303 	adc.w	r3, r5, r3
 800307a:	f04f 0000 	mov.w	r0, #0
 800307e:	f04f 0100 	mov.w	r1, #0
 8003082:	00d9      	lsls	r1, r3, #3
 8003084:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003088:	00d0      	lsls	r0, r2, #3
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	eb12 0804 	adds.w	r8, r2, r4
 8003092:	eb43 0905 	adc.w	r9, r3, r5
 8003096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4618      	mov	r0, r3
 800309c:	f04f 0100 	mov.w	r1, #0
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	008b      	lsls	r3, r1, #2
 80030aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80030ae:	0082      	lsls	r2, r0, #2
 80030b0:	4640      	mov	r0, r8
 80030b2:	4649      	mov	r1, r9
 80030b4:	f7fd f88e 	bl	80001d4 <__aeabi_uldivmod>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4b49      	ldr	r3, [pc, #292]	; (80031e4 <UART_SetConfig+0x38c>)
 80030be:	fba3 2302 	umull	r2, r3, r3, r2
 80030c2:	095b      	lsrs	r3, r3, #5
 80030c4:	011e      	lsls	r6, r3, #4
 80030c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030c8:	4618      	mov	r0, r3
 80030ca:	f04f 0100 	mov.w	r1, #0
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	1894      	adds	r4, r2, r2
 80030d4:	60bc      	str	r4, [r7, #8]
 80030d6:	415b      	adcs	r3, r3
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030de:	1812      	adds	r2, r2, r0
 80030e0:	eb41 0303 	adc.w	r3, r1, r3
 80030e4:	f04f 0400 	mov.w	r4, #0
 80030e8:	f04f 0500 	mov.w	r5, #0
 80030ec:	00dd      	lsls	r5, r3, #3
 80030ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030f2:	00d4      	lsls	r4, r2, #3
 80030f4:	4622      	mov	r2, r4
 80030f6:	462b      	mov	r3, r5
 80030f8:	1814      	adds	r4, r2, r0
 80030fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80030fc:	414b      	adcs	r3, r1
 80030fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4618      	mov	r0, r3
 8003106:	f04f 0100 	mov.w	r1, #0
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	008b      	lsls	r3, r1, #2
 8003114:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003118:	0082      	lsls	r2, r0, #2
 800311a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800311e:	f7fd f859 	bl	80001d4 <__aeabi_uldivmod>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4b2f      	ldr	r3, [pc, #188]	; (80031e4 <UART_SetConfig+0x38c>)
 8003128:	fba3 1302 	umull	r1, r3, r3, r2
 800312c:	095b      	lsrs	r3, r3, #5
 800312e:	2164      	movs	r1, #100	; 0x64
 8003130:	fb01 f303 	mul.w	r3, r1, r3
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	3332      	adds	r3, #50	; 0x32
 800313a:	4a2a      	ldr	r2, [pc, #168]	; (80031e4 <UART_SetConfig+0x38c>)
 800313c:	fba2 2303 	umull	r2, r3, r2, r3
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003146:	441e      	add	r6, r3
 8003148:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800314a:	4618      	mov	r0, r3
 800314c:	f04f 0100 	mov.w	r1, #0
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	1894      	adds	r4, r2, r2
 8003156:	603c      	str	r4, [r7, #0]
 8003158:	415b      	adcs	r3, r3
 800315a:	607b      	str	r3, [r7, #4]
 800315c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003160:	1812      	adds	r2, r2, r0
 8003162:	eb41 0303 	adc.w	r3, r1, r3
 8003166:	f04f 0400 	mov.w	r4, #0
 800316a:	f04f 0500 	mov.w	r5, #0
 800316e:	00dd      	lsls	r5, r3, #3
 8003170:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003174:	00d4      	lsls	r4, r2, #3
 8003176:	4622      	mov	r2, r4
 8003178:	462b      	mov	r3, r5
 800317a:	eb12 0a00 	adds.w	sl, r2, r0
 800317e:	eb43 0b01 	adc.w	fp, r3, r1
 8003182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	4618      	mov	r0, r3
 8003188:	f04f 0100 	mov.w	r1, #0
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	008b      	lsls	r3, r1, #2
 8003196:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800319a:	0082      	lsls	r2, r0, #2
 800319c:	4650      	mov	r0, sl
 800319e:	4659      	mov	r1, fp
 80031a0:	f7fd f818 	bl	80001d4 <__aeabi_uldivmod>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <UART_SetConfig+0x38c>)
 80031aa:	fba3 1302 	umull	r1, r3, r3, r2
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	2164      	movs	r1, #100	; 0x64
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	3332      	adds	r3, #50	; 0x32
 80031bc:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <UART_SetConfig+0x38c>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	f003 020f 	and.w	r2, r3, #15
 80031c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4432      	add	r2, r6
 80031ce:	609a      	str	r2, [r3, #8]
}
 80031d0:	bf00      	nop
 80031d2:	377c      	adds	r7, #124	; 0x7c
 80031d4:	46bd      	mov	sp, r7
 80031d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031da:	bf00      	nop
 80031dc:	40011000 	.word	0x40011000
 80031e0:	40011400 	.word	0x40011400
 80031e4:	51eb851f 	.word	0x51eb851f

080031e8 <__libc_init_array>:
 80031e8:	b570      	push	{r4, r5, r6, lr}
 80031ea:	4d0d      	ldr	r5, [pc, #52]	; (8003220 <__libc_init_array+0x38>)
 80031ec:	4c0d      	ldr	r4, [pc, #52]	; (8003224 <__libc_init_array+0x3c>)
 80031ee:	1b64      	subs	r4, r4, r5
 80031f0:	10a4      	asrs	r4, r4, #2
 80031f2:	2600      	movs	r6, #0
 80031f4:	42a6      	cmp	r6, r4
 80031f6:	d109      	bne.n	800320c <__libc_init_array+0x24>
 80031f8:	4d0b      	ldr	r5, [pc, #44]	; (8003228 <__libc_init_array+0x40>)
 80031fa:	4c0c      	ldr	r4, [pc, #48]	; (800322c <__libc_init_array+0x44>)
 80031fc:	f000 f820 	bl	8003240 <_init>
 8003200:	1b64      	subs	r4, r4, r5
 8003202:	10a4      	asrs	r4, r4, #2
 8003204:	2600      	movs	r6, #0
 8003206:	42a6      	cmp	r6, r4
 8003208:	d105      	bne.n	8003216 <__libc_init_array+0x2e>
 800320a:	bd70      	pop	{r4, r5, r6, pc}
 800320c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003210:	4798      	blx	r3
 8003212:	3601      	adds	r6, #1
 8003214:	e7ee      	b.n	80031f4 <__libc_init_array+0xc>
 8003216:	f855 3b04 	ldr.w	r3, [r5], #4
 800321a:	4798      	blx	r3
 800321c:	3601      	adds	r6, #1
 800321e:	e7f2      	b.n	8003206 <__libc_init_array+0x1e>
 8003220:	08003278 	.word	0x08003278
 8003224:	08003278 	.word	0x08003278
 8003228:	08003278 	.word	0x08003278
 800322c:	0800327c 	.word	0x0800327c

08003230 <memset>:
 8003230:	4402      	add	r2, r0
 8003232:	4603      	mov	r3, r0
 8003234:	4293      	cmp	r3, r2
 8003236:	d100      	bne.n	800323a <memset+0xa>
 8003238:	4770      	bx	lr
 800323a:	f803 1b01 	strb.w	r1, [r3], #1
 800323e:	e7f9      	b.n	8003234 <memset+0x4>

08003240 <_init>:
 8003240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003242:	bf00      	nop
 8003244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003246:	bc08      	pop	{r3}
 8003248:	469e      	mov	lr, r3
 800324a:	4770      	bx	lr

0800324c <_fini>:
 800324c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324e:	bf00      	nop
 8003250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003252:	bc08      	pop	{r3}
 8003254:	469e      	mov	lr, r3
 8003256:	4770      	bx	lr
