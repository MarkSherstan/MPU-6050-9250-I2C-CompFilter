
STM32-C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003224  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080033b8  080033b8  000133b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033d0  080033d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080033d0  080033d0  000133d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033d8  080033d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033d8  080033d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033dc  080033dc  000133dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  080033ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  080033ec  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b00  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023eb  00000000  00000000  00032b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00034f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  00035e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173ba  00000000  00000000  00036c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012bd3  00000000  00000000  0004dfd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f65c  00000000  00000000  00060ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f0201  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e7c  00000000  00000000  000f0254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080033a0 	.word	0x080033a0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080033a0 	.word	0x080033a0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <IMU_init>:
/// @brief Set the IMU address and full scale ranges.
/// @param addr Hex address based on AD0 pin - 0x68 low or 0x69 high.
/// @param aScale Set accelerometer full scale range: 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
/// @param gScale Set gyroscope full scale range: 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
void IMU_init(uint8_t addr, uint8_t aScale, uint8_t gScale)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
 80004d6:	460b      	mov	r3, r1
 80004d8:	71bb      	strb	r3, [r7, #6]
 80004da:	4613      	mov	r3, r2
 80004dc:	717b      	strb	r3, [r7, #5]
	// Save values
	_addr = addr << 1;
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <IMU_init+0x34>)
 80004e6:	701a      	strb	r2, [r3, #0]
	_aScale = aScale;
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <IMU_init+0x38>)
 80004ea:	79bb      	ldrb	r3, [r7, #6]
 80004ec:	7013      	strb	r3, [r2, #0]
	_gScale = gScale;
 80004ee:	4a06      	ldr	r2, [pc, #24]	; (8000508 <IMU_init+0x3c>)
 80004f0:	797b      	ldrb	r3, [r7, #5]
 80004f2:	7013      	strb	r3, [r2, #0]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	20000050 	.word	0x20000050
 8000504:	20000028 	.word	0x20000028
 8000508:	20000068 	.word	0x20000068

0800050c <IMU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale.
void IMU_begin(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af04      	add	r7, sp, #16
    uint8_t check;
    uint8_t select;

    // Confirm device
    HAL_I2C_Mem_Read(&hi2c1, _addr, WHO_AM_I, 1, &check, 1, I2C_TIMOUT_MS);
 8000512:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <IMU_begin+0xa8>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	b299      	uxth	r1, r3
 8000518:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051c:	9302      	str	r3, [sp, #8]
 800051e:	2301      	movs	r3, #1
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	1dfb      	adds	r3, r7, #7
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2301      	movs	r3, #1
 8000528:	2275      	movs	r2, #117	; 0x75
 800052a:	4823      	ldr	r0, [pc, #140]	; (80005b8 <IMU_begin+0xac>)
 800052c:	f001 f9bc 	bl	80018a8 <HAL_I2C_Mem_Read>

    if ( (check == WHO_AM_I_6050_ANS) || (check == WHO_AM_I_9250_ANS) )
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	2b68      	cmp	r3, #104	; 0x68
 8000534:	d002      	beq.n	800053c <IMU_begin+0x30>
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b71      	cmp	r3, #113	; 0x71
 800053a:	d137      	bne.n	80005ac <IMU_begin+0xa0>
    {
        // Startup / reset the sensor
        select = 0x00;
 800053c:	2300      	movs	r3, #0
 800053e:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, _addr, PWR_MGMT_1, 1, &select, 1, I2C_TIMOUT_MS);
 8000540:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <IMU_begin+0xa8>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	b299      	uxth	r1, r3
 8000546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054a:	9302      	str	r3, [sp, #8]
 800054c:	2301      	movs	r3, #1
 800054e:	9301      	str	r3, [sp, #4]
 8000550:	1dbb      	adds	r3, r7, #6
 8000552:	9300      	str	r3, [sp, #0]
 8000554:	2301      	movs	r3, #1
 8000556:	226b      	movs	r2, #107	; 0x6b
 8000558:	4817      	ldr	r0, [pc, #92]	; (80005b8 <IMU_begin+0xac>)
 800055a:	f001 f8ab 	bl	80016b4 <HAL_I2C_Mem_Write>

        // Set the full scale ranges
        setAccFullScaleRange(_aScale);
 800055e:	4b17      	ldr	r3, [pc, #92]	; (80005bc <IMU_begin+0xb0>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f830 	bl	80005c8 <setAccFullScaleRange>
        setGyroFullScaleRange(_gScale);
 8000568:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <IMU_begin+0xb4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f8bd 	bl	80006ec <setGyroFullScaleRange>

        // Light to show success
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000572:	2201      	movs	r2, #1
 8000574:	2120      	movs	r1, #32
 8000576:	4813      	ldr	r0, [pc, #76]	; (80005c4 <IMU_begin+0xb8>)
 8000578:	f000 ff3e 	bl	80013f8 <HAL_GPIO_WritePin>
        HAL_Delay(200);
 800057c:	20c8      	movs	r0, #200	; 0xc8
 800057e:	f000 fcad 	bl	8000edc <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2120      	movs	r1, #32
 8000586:	480f      	ldr	r0, [pc, #60]	; (80005c4 <IMU_begin+0xb8>)
 8000588:	f000 ff36 	bl	80013f8 <HAL_GPIO_WritePin>
        HAL_Delay(200);
 800058c:	20c8      	movs	r0, #200	; 0xc8
 800058e:	f000 fca5 	bl	8000edc <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000592:	2201      	movs	r2, #1
 8000594:	2120      	movs	r1, #32
 8000596:	480b      	ldr	r0, [pc, #44]	; (80005c4 <IMU_begin+0xb8>)
 8000598:	f000 ff2e 	bl	80013f8 <HAL_GPIO_WritePin>
        HAL_Delay(200);
 800059c:	20c8      	movs	r0, #200	; 0xc8
 800059e:	f000 fc9d 	bl	8000edc <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2120      	movs	r1, #32
 80005a6:	4807      	ldr	r0, [pc, #28]	; (80005c4 <IMU_begin+0xb8>)
 80005a8:	f000 ff26 	bl	80013f8 <HAL_GPIO_WritePin>
    }
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000050 	.word	0x20000050
 80005b8:	20000078 	.word	0x20000078
 80005bc:	20000028 	.word	0x20000028
 80005c0:	20000068 	.word	0x20000068
 80005c4:	40020000 	.word	0x40020000

080005c8 <setAccFullScaleRange>:

/// @brief Set the accelerometer full scale range.
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
void setAccFullScaleRange(uint8_t aScale)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af04      	add	r7, sp, #16
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t select;

    // Set the value
    switch (aScale)
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	2b03      	cmp	r3, #3
 80005d6:	d867      	bhi.n	80006a8 <setAccFullScaleRange+0xe0>
 80005d8:	a201      	add	r2, pc, #4	; (adr r2, 80005e0 <setAccFullScaleRange+0x18>)
 80005da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005de:	bf00      	nop
 80005e0:	080005f1 	.word	0x080005f1
 80005e4:	0800061f 	.word	0x0800061f
 80005e8:	0800064d 	.word	0x0800064d
 80005ec:	0800067b 	.word	0x0800067b
    {
    case AFS_2G:
        aRes = 16384.0;
 80005f0:	4b3b      	ldr	r3, [pc, #236]	; (80006e0 <setAccFullScaleRange+0x118>)
 80005f2:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80005f6:	601a      	str	r2, [r3, #0]
        select = 0x00;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80005fc:	4b39      	ldr	r3, [pc, #228]	; (80006e4 <setAccFullScaleRange+0x11c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b299      	uxth	r1, r3
 8000602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000606:	9302      	str	r3, [sp, #8]
 8000608:	2301      	movs	r3, #1
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	f107 030f 	add.w	r3, r7, #15
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2301      	movs	r3, #1
 8000614:	221c      	movs	r2, #28
 8000616:	4834      	ldr	r0, [pc, #208]	; (80006e8 <setAccFullScaleRange+0x120>)
 8000618:	f001 f84c 	bl	80016b4 <HAL_I2C_Mem_Write>
        break;
 800061c:	e05b      	b.n	80006d6 <setAccFullScaleRange+0x10e>
    case AFS_4G:
        aRes = 8192.0;
 800061e:	4b30      	ldr	r3, [pc, #192]	; (80006e0 <setAccFullScaleRange+0x118>)
 8000620:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000624:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8000626:	2308      	movs	r3, #8
 8000628:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 800062a:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <setAccFullScaleRange+0x11c>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	b299      	uxth	r1, r3
 8000630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000634:	9302      	str	r3, [sp, #8]
 8000636:	2301      	movs	r3, #1
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	f107 030f 	add.w	r3, r7, #15
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2301      	movs	r3, #1
 8000642:	221c      	movs	r2, #28
 8000644:	4828      	ldr	r0, [pc, #160]	; (80006e8 <setAccFullScaleRange+0x120>)
 8000646:	f001 f835 	bl	80016b4 <HAL_I2C_Mem_Write>
        break;
 800064a:	e044      	b.n	80006d6 <setAccFullScaleRange+0x10e>
    case AFS_8G:
        aRes = 4096.0;
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <setAccFullScaleRange+0x118>)
 800064e:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8000652:	601a      	str	r2, [r3, #0]
        select = 0x10;
 8000654:	2310      	movs	r3, #16
 8000656:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <setAccFullScaleRange+0x11c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b299      	uxth	r1, r3
 800065e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000662:	9302      	str	r3, [sp, #8]
 8000664:	2301      	movs	r3, #1
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	f107 030f 	add.w	r3, r7, #15
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2301      	movs	r3, #1
 8000670:	221c      	movs	r2, #28
 8000672:	481d      	ldr	r0, [pc, #116]	; (80006e8 <setAccFullScaleRange+0x120>)
 8000674:	f001 f81e 	bl	80016b4 <HAL_I2C_Mem_Write>
        break;
 8000678:	e02d      	b.n	80006d6 <setAccFullScaleRange+0x10e>
    case AFS_16G:
        aRes = 2048.0;
 800067a:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <setAccFullScaleRange+0x118>)
 800067c:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8000680:	601a      	str	r2, [r3, #0]
        select = 0x18;
 8000682:	2318      	movs	r3, #24
 8000684:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <setAccFullScaleRange+0x11c>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b299      	uxth	r1, r3
 800068c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000690:	9302      	str	r3, [sp, #8]
 8000692:	2301      	movs	r3, #1
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	f107 030f 	add.w	r3, r7, #15
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2301      	movs	r3, #1
 800069e:	221c      	movs	r2, #28
 80006a0:	4811      	ldr	r0, [pc, #68]	; (80006e8 <setAccFullScaleRange+0x120>)
 80006a2:	f001 f807 	bl	80016b4 <HAL_I2C_Mem_Write>
        break;
 80006a6:	e016      	b.n	80006d6 <setAccFullScaleRange+0x10e>
    default:
        aRes = 8192.0;
 80006a8:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <setAccFullScaleRange+0x118>)
 80006aa:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80006ae:	601a      	str	r2, [r3, #0]
        select = 0x08;
 80006b0:	2308      	movs	r3, #8
 80006b2:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <setAccFullScaleRange+0x11c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b299      	uxth	r1, r3
 80006ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006be:	9302      	str	r3, [sp, #8]
 80006c0:	2301      	movs	r3, #1
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	f107 030f 	add.w	r3, r7, #15
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2301      	movs	r3, #1
 80006cc:	221c      	movs	r2, #28
 80006ce:	4806      	ldr	r0, [pc, #24]	; (80006e8 <setAccFullScaleRange+0x120>)
 80006d0:	f000 fff0 	bl	80016b4 <HAL_I2C_Mem_Write>
        break;
 80006d4:	bf00      	nop
    }
}
 80006d6:	bf00      	nop
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000054 	.word	0x20000054
 80006e4:	20000050 	.word	0x20000050
 80006e8:	20000078 	.word	0x20000078

080006ec <setGyroFullScaleRange>:

/// @brief Set the gyroscope full scale range.
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
void setGyroFullScaleRange(uint8_t gScale)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af04      	add	r7, sp, #16
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t select;

    // Set the value
    switch (gScale)
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2b03      	cmp	r3, #3
 80006fa:	d863      	bhi.n	80007c4 <setGyroFullScaleRange+0xd8>
 80006fc:	a201      	add	r2, pc, #4	; (adr r2, 8000704 <setGyroFullScaleRange+0x18>)
 80006fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000702:	bf00      	nop
 8000704:	08000715 	.word	0x08000715
 8000708:	08000741 	.word	0x08000741
 800070c:	0800076d 	.word	0x0800076d
 8000710:	08000799 	.word	0x08000799
    {
    case GFS_250DPS:
        gRes = 131.0;
 8000714:	4b38      	ldr	r3, [pc, #224]	; (80007f8 <setGyroFullScaleRange+0x10c>)
 8000716:	4a39      	ldr	r2, [pc, #228]	; (80007fc <setGyroFullScaleRange+0x110>)
 8000718:	601a      	str	r2, [r3, #0]
        select = 0x00;
 800071a:	2300      	movs	r3, #0
 800071c:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 800071e:	4b38      	ldr	r3, [pc, #224]	; (8000800 <setGyroFullScaleRange+0x114>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	b299      	uxth	r1, r3
 8000724:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000728:	9302      	str	r3, [sp, #8]
 800072a:	2301      	movs	r3, #1
 800072c:	9301      	str	r3, [sp, #4]
 800072e:	f107 030f 	add.w	r3, r7, #15
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	2301      	movs	r3, #1
 8000736:	221b      	movs	r2, #27
 8000738:	4832      	ldr	r0, [pc, #200]	; (8000804 <setGyroFullScaleRange+0x118>)
 800073a:	f000 ffbb 	bl	80016b4 <HAL_I2C_Mem_Write>
        break;
 800073e:	e057      	b.n	80007f0 <setGyroFullScaleRange+0x104>
    case GFS_500DPS:
        gRes = 65.5;
 8000740:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <setGyroFullScaleRange+0x10c>)
 8000742:	4a31      	ldr	r2, [pc, #196]	; (8000808 <setGyroFullScaleRange+0x11c>)
 8000744:	601a      	str	r2, [r3, #0]
        select = 0x00;
 8000746:	2300      	movs	r3, #0
 8000748:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 800074a:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <setGyroFullScaleRange+0x114>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b299      	uxth	r1, r3
 8000750:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000754:	9302      	str	r3, [sp, #8]
 8000756:	2301      	movs	r3, #1
 8000758:	9301      	str	r3, [sp, #4]
 800075a:	f107 030f 	add.w	r3, r7, #15
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2301      	movs	r3, #1
 8000762:	221b      	movs	r2, #27
 8000764:	4827      	ldr	r0, [pc, #156]	; (8000804 <setGyroFullScaleRange+0x118>)
 8000766:	f000 ffa5 	bl	80016b4 <HAL_I2C_Mem_Write>
        break;
 800076a:	e041      	b.n	80007f0 <setGyroFullScaleRange+0x104>
    case GFS_1000DPS:
        gRes = 32.8;
 800076c:	4b22      	ldr	r3, [pc, #136]	; (80007f8 <setGyroFullScaleRange+0x10c>)
 800076e:	4a27      	ldr	r2, [pc, #156]	; (800080c <setGyroFullScaleRange+0x120>)
 8000770:	601a      	str	r2, [r3, #0]
        select = 0x00;
 8000772:	2300      	movs	r3, #0
 8000774:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8000776:	4b22      	ldr	r3, [pc, #136]	; (8000800 <setGyroFullScaleRange+0x114>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	b299      	uxth	r1, r3
 800077c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000780:	9302      	str	r3, [sp, #8]
 8000782:	2301      	movs	r3, #1
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	f107 030f 	add.w	r3, r7, #15
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2301      	movs	r3, #1
 800078e:	221b      	movs	r2, #27
 8000790:	481c      	ldr	r0, [pc, #112]	; (8000804 <setGyroFullScaleRange+0x118>)
 8000792:	f000 ff8f 	bl	80016b4 <HAL_I2C_Mem_Write>
        break;
 8000796:	e02b      	b.n	80007f0 <setGyroFullScaleRange+0x104>
    case GFS_2000DPS:
        gRes = 16.4;
 8000798:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <setGyroFullScaleRange+0x10c>)
 800079a:	4a1d      	ldr	r2, [pc, #116]	; (8000810 <setGyroFullScaleRange+0x124>)
 800079c:	601a      	str	r2, [r3, #0]
        select = 0x00;
 800079e:	2300      	movs	r3, #0
 80007a0:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <setGyroFullScaleRange+0x114>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b299      	uxth	r1, r3
 80007a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ac:	9302      	str	r3, [sp, #8]
 80007ae:	2301      	movs	r3, #1
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	f107 030f 	add.w	r3, r7, #15
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	2301      	movs	r3, #1
 80007ba:	221b      	movs	r2, #27
 80007bc:	4811      	ldr	r0, [pc, #68]	; (8000804 <setGyroFullScaleRange+0x118>)
 80007be:	f000 ff79 	bl	80016b4 <HAL_I2C_Mem_Write>
        break;
 80007c2:	e015      	b.n	80007f0 <setGyroFullScaleRange+0x104>
    default:
        gRes = 65.5;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <setGyroFullScaleRange+0x10c>)
 80007c6:	4a10      	ldr	r2, [pc, #64]	; (8000808 <setGyroFullScaleRange+0x11c>)
 80007c8:	601a      	str	r2, [r3, #0]
        select = 0x00;
 80007ca:	2300      	movs	r3, #0
 80007cc:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <setGyroFullScaleRange+0x114>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b299      	uxth	r1, r3
 80007d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d8:	9302      	str	r3, [sp, #8]
 80007da:	2301      	movs	r3, #1
 80007dc:	9301      	str	r3, [sp, #4]
 80007de:	f107 030f 	add.w	r3, r7, #15
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2301      	movs	r3, #1
 80007e6:	221b      	movs	r2, #27
 80007e8:	4806      	ldr	r0, [pc, #24]	; (8000804 <setGyroFullScaleRange+0x118>)
 80007ea:	f000 ff63 	bl	80016b4 <HAL_I2C_Mem_Write>
        break;
 80007ee:	bf00      	nop
    }
}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000064 	.word	0x20000064
 80007fc:	43030000 	.word	0x43030000
 8000800:	20000050 	.word	0x20000050
 8000804:	20000078 	.word	0x20000078
 8000808:	42830000 	.word	0x42830000
 800080c:	42033333 	.word	0x42033333
 8000810:	41833333 	.word	0x41833333

08000814 <readRawData>:

/// @brief Read raw data from IMU
void readRawData()
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af04      	add	r7, sp, #16
    uint8_t buf[14];

    // Subroutine for reading the raw data
    HAL_I2C_Mem_Read(&hi2c1, _addr, ACCEL_XOUT_H, 1, buf, 14, I2C_TIMOUT_MS);
 800081a:	4b24      	ldr	r3, [pc, #144]	; (80008ac <readRawData+0x98>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	b299      	uxth	r1, r3
 8000820:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000824:	9302      	str	r3, [sp, #8]
 8000826:	230e      	movs	r3, #14
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	463b      	mov	r3, r7
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2301      	movs	r3, #1
 8000830:	223b      	movs	r2, #59	; 0x3b
 8000832:	481f      	ldr	r0, [pc, #124]	; (80008b0 <readRawData+0x9c>)
 8000834:	f001 f838 	bl	80018a8 <HAL_I2C_Mem_Read>
    
    // Bit shift the data
    sensorRaw.ax = buf[0] << 8 | buf[1];
 8000838:	783b      	ldrb	r3, [r7, #0]
 800083a:	021b      	lsls	r3, r3, #8
 800083c:	b21a      	sxth	r2, r3
 800083e:	787b      	ldrb	r3, [r7, #1]
 8000840:	b21b      	sxth	r3, r3
 8000842:	4313      	orrs	r3, r2
 8000844:	b21a      	sxth	r2, r3
 8000846:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <readRawData+0xa0>)
 8000848:	801a      	strh	r2, [r3, #0]
    sensorRaw.ay = buf[2] << 8 | buf[3];
 800084a:	78bb      	ldrb	r3, [r7, #2]
 800084c:	021b      	lsls	r3, r3, #8
 800084e:	b21a      	sxth	r2, r3
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	b21b      	sxth	r3, r3
 8000854:	4313      	orrs	r3, r2
 8000856:	b21a      	sxth	r2, r3
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <readRawData+0xa0>)
 800085a:	805a      	strh	r2, [r3, #2]
    sensorRaw.az = buf[4] << 8 | buf[5];
 800085c:	793b      	ldrb	r3, [r7, #4]
 800085e:	021b      	lsls	r3, r3, #8
 8000860:	b21a      	sxth	r2, r3
 8000862:	797b      	ldrb	r3, [r7, #5]
 8000864:	b21b      	sxth	r3, r3
 8000866:	4313      	orrs	r3, r2
 8000868:	b21a      	sxth	r2, r3
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <readRawData+0xa0>)
 800086c:	809a      	strh	r2, [r3, #4]

    // temperature = buf[6] << 8 | buf[7];

    sensorRaw.gx = buf[8]  << 8 | buf[9];
 800086e:	7a3b      	ldrb	r3, [r7, #8]
 8000870:	021b      	lsls	r3, r3, #8
 8000872:	b21a      	sxth	r2, r3
 8000874:	7a7b      	ldrb	r3, [r7, #9]
 8000876:	b21b      	sxth	r3, r3
 8000878:	4313      	orrs	r3, r2
 800087a:	b21a      	sxth	r2, r3
 800087c:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <readRawData+0xa0>)
 800087e:	80da      	strh	r2, [r3, #6]
    sensorRaw.gy = buf[10] << 8 | buf[11];
 8000880:	7abb      	ldrb	r3, [r7, #10]
 8000882:	021b      	lsls	r3, r3, #8
 8000884:	b21a      	sxth	r2, r3
 8000886:	7afb      	ldrb	r3, [r7, #11]
 8000888:	b21b      	sxth	r3, r3
 800088a:	4313      	orrs	r3, r2
 800088c:	b21a      	sxth	r2, r3
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <readRawData+0xa0>)
 8000890:	811a      	strh	r2, [r3, #8]
    sensorRaw.gz = buf[12] << 8 | buf[13];
 8000892:	7b3b      	ldrb	r3, [r7, #12]
 8000894:	021b      	lsls	r3, r3, #8
 8000896:	b21a      	sxth	r2, r3
 8000898:	7b7b      	ldrb	r3, [r7, #13]
 800089a:	b21b      	sxth	r3, r3
 800089c:	4313      	orrs	r3, r2
 800089e:	b21a      	sxth	r2, r3
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <readRawData+0xa0>)
 80008a2:	815a      	strh	r2, [r3, #10]
}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000050 	.word	0x20000050
 80008b0:	20000078 	.word	0x20000078
 80008b4:	2000006c 	.word	0x2000006c

080008b8 <IMU_calibrateGyro>:

/// @brief Find offsets for each axis of gyroscope.
/// @param numCalPoints Number of data points to average.
void IMU_calibrateGyro(uint16_t numCalPoints)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	80fb      	strh	r3, [r7, #6]
    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 80008c2:	2300      	movs	r3, #0
 80008c4:	81fb      	strh	r3, [r7, #14]
 80008c6:	e004      	b.n	80008d2 <IMU_calibrateGyro+0x1a>
    {
        readRawData();
 80008c8:	f7ff ffa4 	bl	8000814 <readRawData>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 80008cc:	89fb      	ldrh	r3, [r7, #14]
 80008ce:	3301      	adds	r3, #1
 80008d0:	81fb      	strh	r3, [r7, #14]
 80008d2:	89fa      	ldrh	r2, [r7, #14]
 80008d4:	88fb      	ldrh	r3, [r7, #6]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d3f6      	bcc.n	80008c8 <IMU_calibrateGyro+0x10>

    // Average the saved data points to find the gyroscope offset
    // gyroCal.x /= (float)numCalPoints;
    // gyroCal.y /= (float)numCalPoints;
    // gyroCal.z /= (float)numCalPoints;
}
 80008da:	bf00      	nop
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a2c      	ldr	r2, [pc, #176]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <MX_GPIO_Init+0xd0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <MX_GPIO_Init+0xd0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a25      	ldr	r2, [pc, #148]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a1e      	ldr	r2, [pc, #120]	; (80009b4 <MX_GPIO_Init+0xd0>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2120      	movs	r1, #32
 800096e:	4812      	ldr	r0, [pc, #72]	; (80009b8 <MX_GPIO_Init+0xd4>)
 8000970:	f000 fd42 	bl	80013f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800097a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800097e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	480c      	ldr	r0, [pc, #48]	; (80009bc <MX_GPIO_Init+0xd8>)
 800098c:	f000 fbb0 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000990:	2320      	movs	r3, #32
 8000992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MX_GPIO_Init+0xd4>)
 80009a8:	f000 fba2 	bl	80010f0 <HAL_GPIO_Init>

}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	; 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020000 	.word	0x40020000
 80009bc:	40020800 	.word	0x40020800

080009c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009c6:	4a13      	ldr	r2, [pc, #76]	; (8000a14 <MX_I2C1_Init+0x54>)
 80009c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009cc:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <MX_I2C1_Init+0x58>)
 80009ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_I2C1_Init+0x50>)
 80009fe:	f000 fd15 	bl	800142c <HAL_I2C_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a08:	f000 f8e6 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000078 	.word	0x20000078
 8000a14:	40005400 	.word	0x40005400
 8000a18:	00061a80 	.word	0x00061a80

08000a1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a19      	ldr	r2, [pc, #100]	; (8000aa0 <HAL_I2C_MspInit+0x84>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d12b      	bne.n	8000a96 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a17      	ldr	r2, [pc, #92]	; (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a5a:	23c0      	movs	r3, #192	; 0xc0
 8000a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a5e:	2312      	movs	r3, #18
 8000a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <HAL_I2C_MspInit+0x8c>)
 8000a76:	f000 fb3b 	bl	80010f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	4a08      	ldr	r2, [pc, #32]	; (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a88:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a96:	bf00      	nop
 8000a98:	3728      	adds	r7, #40	; 0x28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40005400 	.word	0x40005400
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020400 	.word	0x40020400

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab0:	f000 f9a2 	bl	8000df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab4:	f000 f81a 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab8:	f7ff ff14 	bl	80008e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000abc:	f000 f900 	bl	8000cc0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ac0:	f7ff ff7e 	bl	80009c0 <MX_I2C1_Init>
  // MX_TIM11_Init();

  /* USER CODE BEGIN 2 */
  IMU_init(AD0_LOW, AFS_4G, GFS_500DPS);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	2068      	movs	r0, #104	; 0x68
 8000aca:	f7ff fcff 	bl	80004cc <IMU_init>
  IMU_begin();
 8000ace:	f7ff fd1d 	bl	800050c <IMU_begin>

//   sprintf((char*)serialBuf, "%d,%d,%d\r\n", 0, 1, 0);
// HAL_UART_Transmit(&huart2, serialBuf, strlen((char*)serialBuf), HAL_MAX_DELAY);


  IMU_calibrateGyro(500);
 8000ad2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ad6:	f7ff feef 	bl	80008b8 <IMU_calibrateGyro>

  
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000ada:	2201      	movs	r2, #1
 8000adc:	2120      	movs	r1, #32
 8000ade:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <main+0x3c>)
 8000ae0:	f000 fc8a 	bl	80013f8 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <main+0x38>
 8000ae6:	bf00      	nop
 8000ae8:	40020000 	.word	0x40020000

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b094      	sub	sp, #80	; 0x50
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 0320 	add.w	r3, r7, #32
 8000af6:	2230      	movs	r2, #48	; 0x30
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 fc48 	bl	8003390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <SystemClock_Config+0xd0>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	4a28      	ldr	r2, [pc, #160]	; (8000bbc <SystemClock_Config+0xd0>)
 8000b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b20:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <SystemClock_Config+0xd0>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <SystemClock_Config+0xd4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b38:	4a21      	ldr	r2, [pc, #132]	; (8000bc0 <SystemClock_Config+0xd4>)
 8000b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <SystemClock_Config+0xd4>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b50:	2301      	movs	r3, #1
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b54:	2310      	movs	r3, #16
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b60:	2310      	movs	r3, #16
 8000b62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b64:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b6e:	2307      	movs	r3, #7
 8000b70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b72:	f107 0320 	add.w	r3, r7, #32
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 fc18 	bl	80023ac <HAL_RCC_OscConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b82:	f000 f829 	bl	8000bd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b86:	230f      	movs	r3, #15
 8000b88:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 fe7a 	bl	800289c <HAL_RCC_ClockConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bae:	f000 f813 	bl	8000bd8 <Error_Handler>
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3750      	adds	r7, #80	; 0x50
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40007000 	.word	0x40007000

08000bc4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
//      sprintf((char*)serialBuf, "%d,%d,%d\r\n", R, P, Y);
//      HAL_UART_Transmit(&huart2, serialBuf, strlen((char*)serialBuf), HAL_MAX_DELAY);

    // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  }
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <Error_Handler+0x8>
	...

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c22:	2007      	movs	r0, #7
 8000c24:	f000 fa30 	bl	8001088 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40023800 	.word	0x40023800

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <NMI_Handler+0x4>

08000c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <MemManage_Handler+0x4>

08000c46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c80:	f000 f90c 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000c8e:	f002 f801 	bl	8002c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200000cc 	.word	0x200000cc

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <MX_USART2_UART_Init+0x50>)
 8000cc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000ccc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000cf8:	f002 f910 	bl	8002f1c <HAL_UART_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d02:	f7ff ff69 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000114 	.word	0x20000114
 8000d10:	40004400 	.word	0x40004400

08000d14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a19      	ldr	r2, [pc, #100]	; (8000d98 <HAL_UART_MspInit+0x84>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d12b      	bne.n	8000d8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <HAL_UART_MspInit+0x88>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	4a17      	ldr	r2, [pc, #92]	; (8000d9c <HAL_UART_MspInit+0x88>)
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	6413      	str	r3, [r2, #64]	; 0x40
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <HAL_UART_MspInit+0x88>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <HAL_UART_MspInit+0x88>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <HAL_UART_MspInit+0x88>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_UART_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d6e:	230c      	movs	r3, #12
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d7e:	2307      	movs	r3, #7
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <HAL_UART_MspInit+0x8c>)
 8000d8a:	f000 f9b1 	bl	80010f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	; 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40004400 	.word	0x40004400
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020000 	.word	0x40020000

08000da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ddc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da8:	480d      	ldr	r0, [pc, #52]	; (8000de0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000daa:	490e      	ldr	r1, [pc, #56]	; (8000de4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dac:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dc0:	4c0b      	ldr	r4, [pc, #44]	; (8000df0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dce:	f7ff ff65 	bl	8000c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f002 fab9 	bl	8003348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd6:	f7ff fe69 	bl	8000aac <main>
  bx  lr    
 8000dda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ddc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000de8:	080033e0 	.word	0x080033e0
  ldr r2, =_sbss
 8000dec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000df0:	2000015c 	.word	0x2000015c

08000df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC_IRQHandler>
	...

08000df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <HAL_Init+0x40>)
 8000e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <HAL_Init+0x40>)
 8000e0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <HAL_Init+0x40>)
 8000e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f000 f931 	bl	8001088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e26:	2000      	movs	r0, #0
 8000e28:	f000 f808 	bl	8000e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2c:	f7ff feda 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023c00 	.word	0x40023c00

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0x54>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_InitTick+0x58>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f93b 	bl	80010d6 <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00e      	b.n	8000e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d80a      	bhi.n	8000e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e78:	f000 f911 	bl	800109e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <HAL_InitTick+0x5c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000004 	.word	0x20000004

08000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000158 	.word	0x20000158

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000158 	.word	0x20000158

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff ffee 	bl	8000ec4 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_Delay+0x44>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f02:	bf00      	nop
 8000f04:	f7ff ffde 	bl	8000ec4 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008

08000f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f56:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	60d3      	str	r3, [r2, #12]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <__NVIC_GetPriorityGrouping+0x18>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	f003 0307 	and.w	r3, r3, #7
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	db0a      	blt.n	8000fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	490c      	ldr	r1, [pc, #48]	; (8000fd4 <__NVIC_SetPriority+0x4c>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	0112      	lsls	r2, r2, #4
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	440b      	add	r3, r1
 8000fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb0:	e00a      	b.n	8000fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4908      	ldr	r1, [pc, #32]	; (8000fd8 <__NVIC_SetPriority+0x50>)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	3b04      	subs	r3, #4
 8000fc0:	0112      	lsls	r2, r2, #4
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	761a      	strb	r2, [r3, #24]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f1c3 0307 	rsb	r3, r3, #7
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	bf28      	it	cs
 8000ffa:	2304      	movcs	r3, #4
 8000ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3304      	adds	r3, #4
 8001002:	2b06      	cmp	r3, #6
 8001004:	d902      	bls.n	800100c <NVIC_EncodePriority+0x30>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3b03      	subs	r3, #3
 800100a:	e000      	b.n	800100e <NVIC_EncodePriority+0x32>
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43da      	mvns	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	401a      	ands	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001024:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43d9      	mvns	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	4313      	orrs	r3, r2
         );
}
 8001036:	4618      	mov	r0, r3
 8001038:	3724      	adds	r7, #36	; 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001054:	d301      	bcc.n	800105a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001056:	2301      	movs	r3, #1
 8001058:	e00f      	b.n	800107a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <SysTick_Config+0x40>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001062:	210f      	movs	r1, #15
 8001064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001068:	f7ff ff8e 	bl	8000f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <SysTick_Config+0x40>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <SysTick_Config+0x40>)
 8001074:	2207      	movs	r2, #7
 8001076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	e000e010 	.word	0xe000e010

08001088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff47 	bl	8000f24 <__NVIC_SetPriorityGrouping>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b0:	f7ff ff5c 	bl	8000f6c <__NVIC_GetPriorityGrouping>
 80010b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	6978      	ldr	r0, [r7, #20]
 80010bc:	f7ff ff8e 	bl	8000fdc <NVIC_EncodePriority>
 80010c0:	4602      	mov	r2, r0
 80010c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff5d 	bl	8000f88 <__NVIC_SetPriority>
}
 80010ce:	bf00      	nop
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ffb0 	bl	8001044 <SysTick_Config>
 80010e4:	4603      	mov	r3, r0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b089      	sub	sp, #36	; 0x24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
 800110a:	e159      	b.n	80013c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800110c:	2201      	movs	r2, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	429a      	cmp	r2, r3
 8001126:	f040 8148 	bne.w	80013ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	2b01      	cmp	r3, #1
 8001134:	d005      	beq.n	8001142 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113e:	2b02      	cmp	r3, #2
 8001140:	d130      	bne.n	80011a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	2203      	movs	r2, #3
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	68da      	ldr	r2, [r3, #12]
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001178:	2201      	movs	r2, #1
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	091b      	lsrs	r3, r3, #4
 800118e:	f003 0201 	and.w	r2, r3, #1
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d017      	beq.n	80011e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d123      	bne.n	8001234 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	08da      	lsrs	r2, r3, #3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3208      	adds	r2, #8
 80011f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	220f      	movs	r2, #15
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	691a      	ldr	r2, [r3, #16]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	08da      	lsrs	r2, r3, #3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3208      	adds	r2, #8
 800122e:	69b9      	ldr	r1, [r7, #24]
 8001230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	2203      	movs	r2, #3
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0203 	and.w	r2, r3, #3
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 80a2 	beq.w	80013ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b57      	ldr	r3, [pc, #348]	; (80013d8 <HAL_GPIO_Init+0x2e8>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	4a56      	ldr	r2, [pc, #344]	; (80013d8 <HAL_GPIO_Init+0x2e8>)
 8001280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001284:	6453      	str	r3, [r2, #68]	; 0x44
 8001286:	4b54      	ldr	r3, [pc, #336]	; (80013d8 <HAL_GPIO_Init+0x2e8>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001292:	4a52      	ldr	r2, [pc, #328]	; (80013dc <HAL_GPIO_Init+0x2ec>)
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3302      	adds	r3, #2
 800129a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	220f      	movs	r2, #15
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a49      	ldr	r2, [pc, #292]	; (80013e0 <HAL_GPIO_Init+0x2f0>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d019      	beq.n	80012f2 <HAL_GPIO_Init+0x202>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a48      	ldr	r2, [pc, #288]	; (80013e4 <HAL_GPIO_Init+0x2f4>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d013      	beq.n	80012ee <HAL_GPIO_Init+0x1fe>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a47      	ldr	r2, [pc, #284]	; (80013e8 <HAL_GPIO_Init+0x2f8>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d00d      	beq.n	80012ea <HAL_GPIO_Init+0x1fa>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a46      	ldr	r2, [pc, #280]	; (80013ec <HAL_GPIO_Init+0x2fc>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d007      	beq.n	80012e6 <HAL_GPIO_Init+0x1f6>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a45      	ldr	r2, [pc, #276]	; (80013f0 <HAL_GPIO_Init+0x300>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d101      	bne.n	80012e2 <HAL_GPIO_Init+0x1f2>
 80012de:	2304      	movs	r3, #4
 80012e0:	e008      	b.n	80012f4 <HAL_GPIO_Init+0x204>
 80012e2:	2307      	movs	r3, #7
 80012e4:	e006      	b.n	80012f4 <HAL_GPIO_Init+0x204>
 80012e6:	2303      	movs	r3, #3
 80012e8:	e004      	b.n	80012f4 <HAL_GPIO_Init+0x204>
 80012ea:	2302      	movs	r3, #2
 80012ec:	e002      	b.n	80012f4 <HAL_GPIO_Init+0x204>
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <HAL_GPIO_Init+0x204>
 80012f2:	2300      	movs	r3, #0
 80012f4:	69fa      	ldr	r2, [r7, #28]
 80012f6:	f002 0203 	and.w	r2, r2, #3
 80012fa:	0092      	lsls	r2, r2, #2
 80012fc:	4093      	lsls	r3, r2
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001304:	4935      	ldr	r1, [pc, #212]	; (80013dc <HAL_GPIO_Init+0x2ec>)
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	089b      	lsrs	r3, r3, #2
 800130a:	3302      	adds	r3, #2
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001312:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <HAL_GPIO_Init+0x304>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001336:	4a2f      	ldr	r2, [pc, #188]	; (80013f4 <HAL_GPIO_Init+0x304>)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800133c:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <HAL_GPIO_Init+0x304>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001360:	4a24      	ldr	r2, [pc, #144]	; (80013f4 <HAL_GPIO_Init+0x304>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001366:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <HAL_GPIO_Init+0x304>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800138a:	4a1a      	ldr	r2, [pc, #104]	; (80013f4 <HAL_GPIO_Init+0x304>)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <HAL_GPIO_Init+0x304>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b4:	4a0f      	ldr	r2, [pc, #60]	; (80013f4 <HAL_GPIO_Init+0x304>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3301      	adds	r3, #1
 80013be:	61fb      	str	r3, [r7, #28]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	2b0f      	cmp	r3, #15
 80013c4:	f67f aea2 	bls.w	800110c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3724      	adds	r7, #36	; 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40013800 	.word	0x40013800
 80013e0:	40020000 	.word	0x40020000
 80013e4:	40020400 	.word	0x40020400
 80013e8:	40020800 	.word	0x40020800
 80013ec:	40020c00 	.word	0x40020c00
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40013c00 	.word	0x40013c00

080013f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	807b      	strh	r3, [r7, #2]
 8001404:	4613      	mov	r3, r2
 8001406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001408:	787b      	ldrb	r3, [r7, #1]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800140e:	887a      	ldrh	r2, [r7, #2]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001414:	e003      	b.n	800141e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001416:	887b      	ldrh	r3, [r7, #2]
 8001418:	041a      	lsls	r2, r3, #16
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	619a      	str	r2, [r3, #24]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e12b      	b.n	8001696 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d106      	bne.n	8001458 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff fae2 	bl	8000a1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2224      	movs	r2, #36	; 0x24
 800145c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0201 	bic.w	r2, r2, #1
 800146e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800147e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800148e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001490:	f001 fbd8 	bl	8002c44 <HAL_RCC_GetPCLK1Freq>
 8001494:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4a81      	ldr	r2, [pc, #516]	; (80016a0 <HAL_I2C_Init+0x274>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d807      	bhi.n	80014b0 <HAL_I2C_Init+0x84>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4a80      	ldr	r2, [pc, #512]	; (80016a4 <HAL_I2C_Init+0x278>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	bf94      	ite	ls
 80014a8:	2301      	movls	r3, #1
 80014aa:	2300      	movhi	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	e006      	b.n	80014be <HAL_I2C_Init+0x92>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a7d      	ldr	r2, [pc, #500]	; (80016a8 <HAL_I2C_Init+0x27c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	bf94      	ite	ls
 80014b8:	2301      	movls	r3, #1
 80014ba:	2300      	movhi	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e0e7      	b.n	8001696 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4a78      	ldr	r2, [pc, #480]	; (80016ac <HAL_I2C_Init+0x280>)
 80014ca:	fba2 2303 	umull	r2, r3, r2, r3
 80014ce:	0c9b      	lsrs	r3, r3, #18
 80014d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68ba      	ldr	r2, [r7, #8]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	4a6a      	ldr	r2, [pc, #424]	; (80016a0 <HAL_I2C_Init+0x274>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d802      	bhi.n	8001500 <HAL_I2C_Init+0xd4>
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	3301      	adds	r3, #1
 80014fe:	e009      	b.n	8001514 <HAL_I2C_Init+0xe8>
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001506:	fb02 f303 	mul.w	r3, r2, r3
 800150a:	4a69      	ldr	r2, [pc, #420]	; (80016b0 <HAL_I2C_Init+0x284>)
 800150c:	fba2 2303 	umull	r2, r3, r2, r3
 8001510:	099b      	lsrs	r3, r3, #6
 8001512:	3301      	adds	r3, #1
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6812      	ldr	r2, [r2, #0]
 8001518:	430b      	orrs	r3, r1
 800151a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001526:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	495c      	ldr	r1, [pc, #368]	; (80016a0 <HAL_I2C_Init+0x274>)
 8001530:	428b      	cmp	r3, r1
 8001532:	d819      	bhi.n	8001568 <HAL_I2C_Init+0x13c>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	1e59      	subs	r1, r3, #1
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001542:	1c59      	adds	r1, r3, #1
 8001544:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001548:	400b      	ands	r3, r1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00a      	beq.n	8001564 <HAL_I2C_Init+0x138>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	1e59      	subs	r1, r3, #1
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	fbb1 f3f3 	udiv	r3, r1, r3
 800155c:	3301      	adds	r3, #1
 800155e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001562:	e051      	b.n	8001608 <HAL_I2C_Init+0x1dc>
 8001564:	2304      	movs	r3, #4
 8001566:	e04f      	b.n	8001608 <HAL_I2C_Init+0x1dc>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d111      	bne.n	8001594 <HAL_I2C_Init+0x168>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	1e58      	subs	r0, r3, #1
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6859      	ldr	r1, [r3, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	440b      	add	r3, r1
 800157e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001582:	3301      	adds	r3, #1
 8001584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001588:	2b00      	cmp	r3, #0
 800158a:	bf0c      	ite	eq
 800158c:	2301      	moveq	r3, #1
 800158e:	2300      	movne	r3, #0
 8001590:	b2db      	uxtb	r3, r3
 8001592:	e012      	b.n	80015ba <HAL_I2C_Init+0x18e>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	1e58      	subs	r0, r3, #1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6859      	ldr	r1, [r3, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	0099      	lsls	r1, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015aa:	3301      	adds	r3, #1
 80015ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	bf0c      	ite	eq
 80015b4:	2301      	moveq	r3, #1
 80015b6:	2300      	movne	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_I2C_Init+0x196>
 80015be:	2301      	movs	r3, #1
 80015c0:	e022      	b.n	8001608 <HAL_I2C_Init+0x1dc>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10e      	bne.n	80015e8 <HAL_I2C_Init+0x1bc>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1e58      	subs	r0, r3, #1
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6859      	ldr	r1, [r3, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	440b      	add	r3, r1
 80015d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80015dc:	3301      	adds	r3, #1
 80015de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e6:	e00f      	b.n	8001608 <HAL_I2C_Init+0x1dc>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	1e58      	subs	r0, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6859      	ldr	r1, [r3, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	0099      	lsls	r1, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80015fe:	3301      	adds	r3, #1
 8001600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001604:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	6809      	ldr	r1, [r1, #0]
 800160c:	4313      	orrs	r3, r2
 800160e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69da      	ldr	r2, [r3, #28]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001636:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6911      	ldr	r1, [r2, #16]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68d2      	ldr	r2, [r2, #12]
 8001642:	4311      	orrs	r1, r2
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	430b      	orrs	r3, r1
 800164a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695a      	ldr	r2, [r3, #20]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 0201 	orr.w	r2, r2, #1
 8001676:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2220      	movs	r2, #32
 8001682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	000186a0 	.word	0x000186a0
 80016a4:	001e847f 	.word	0x001e847f
 80016a8:	003d08ff 	.word	0x003d08ff
 80016ac:	431bde83 	.word	0x431bde83
 80016b0:	10624dd3 	.word	0x10624dd3

080016b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	4608      	mov	r0, r1
 80016be:	4611      	mov	r1, r2
 80016c0:	461a      	mov	r2, r3
 80016c2:	4603      	mov	r3, r0
 80016c4:	817b      	strh	r3, [r7, #10]
 80016c6:	460b      	mov	r3, r1
 80016c8:	813b      	strh	r3, [r7, #8]
 80016ca:	4613      	mov	r3, r2
 80016cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016ce:	f7ff fbf9 	bl	8000ec4 <HAL_GetTick>
 80016d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b20      	cmp	r3, #32
 80016de:	f040 80d9 	bne.w	8001894 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2319      	movs	r3, #25
 80016e8:	2201      	movs	r2, #1
 80016ea:	496d      	ldr	r1, [pc, #436]	; (80018a0 <HAL_I2C_Mem_Write+0x1ec>)
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 fc7f 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80016f8:	2302      	movs	r3, #2
 80016fa:	e0cc      	b.n	8001896 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001702:	2b01      	cmp	r3, #1
 8001704:	d101      	bne.n	800170a <HAL_I2C_Mem_Write+0x56>
 8001706:	2302      	movs	r3, #2
 8001708:	e0c5      	b.n	8001896 <HAL_I2C_Mem_Write+0x1e2>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b01      	cmp	r3, #1
 800171e:	d007      	beq.n	8001730 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0201 	orr.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800173e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2221      	movs	r2, #33	; 0x21
 8001744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2240      	movs	r2, #64	; 0x40
 800174c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6a3a      	ldr	r2, [r7, #32]
 800175a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001760:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001766:	b29a      	uxth	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4a4d      	ldr	r2, [pc, #308]	; (80018a4 <HAL_I2C_Mem_Write+0x1f0>)
 8001770:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001772:	88f8      	ldrh	r0, [r7, #6]
 8001774:	893a      	ldrh	r2, [r7, #8]
 8001776:	8979      	ldrh	r1, [r7, #10]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	4603      	mov	r3, r0
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f000 fab6 	bl	8001cf4 <I2C_RequestMemoryWrite>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d052      	beq.n	8001834 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e081      	b.n	8001896 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 fd00 	bl	800219c <I2C_WaitOnTXEFlagUntilTimeout>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00d      	beq.n	80017be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d107      	bne.n	80017ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e06b      	b.n	8001896 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	781a      	ldrb	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d8:	3b01      	subs	r3, #1
 80017da:	b29a      	uxth	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	3b01      	subs	r3, #1
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d11b      	bne.n	8001834 <HAL_I2C_Mem_Write+0x180>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001800:	2b00      	cmp	r3, #0
 8001802:	d017      	beq.n	8001834 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	781a      	ldrb	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	1c5a      	adds	r2, r3, #1
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181e:	3b01      	subs	r3, #1
 8001820:	b29a      	uxth	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800182a:	b29b      	uxth	r3, r3
 800182c:	3b01      	subs	r3, #1
 800182e:	b29a      	uxth	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1aa      	bne.n	8001792 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f000 fcec 	bl	800221e <I2C_WaitOnBTFFlagUntilTimeout>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00d      	beq.n	8001868 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	2b04      	cmp	r3, #4
 8001852:	d107      	bne.n	8001864 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001862:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e016      	b.n	8001896 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2220      	movs	r2, #32
 800187c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	e000      	b.n	8001896 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001894:	2302      	movs	r3, #2
  }
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	00100002 	.word	0x00100002
 80018a4:	ffff0000 	.word	0xffff0000

080018a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08c      	sub	sp, #48	; 0x30
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	4608      	mov	r0, r1
 80018b2:	4611      	mov	r1, r2
 80018b4:	461a      	mov	r2, r3
 80018b6:	4603      	mov	r3, r0
 80018b8:	817b      	strh	r3, [r7, #10]
 80018ba:	460b      	mov	r3, r1
 80018bc:	813b      	strh	r3, [r7, #8]
 80018be:	4613      	mov	r3, r2
 80018c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018c2:	f7ff faff 	bl	8000ec4 <HAL_GetTick>
 80018c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b20      	cmp	r3, #32
 80018d2:	f040 8208 	bne.w	8001ce6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2319      	movs	r3, #25
 80018dc:	2201      	movs	r2, #1
 80018de:	497b      	ldr	r1, [pc, #492]	; (8001acc <HAL_I2C_Mem_Read+0x224>)
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f000 fb85 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80018ec:	2302      	movs	r3, #2
 80018ee:	e1fb      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_I2C_Mem_Read+0x56>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e1f4      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x440>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b01      	cmp	r3, #1
 8001912:	d007      	beq.n	8001924 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0201 	orr.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001932:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2222      	movs	r2, #34	; 0x22
 8001938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2240      	movs	r2, #64	; 0x40
 8001940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2200      	movs	r2, #0
 8001948:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800194e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001954:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195a:	b29a      	uxth	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4a5b      	ldr	r2, [pc, #364]	; (8001ad0 <HAL_I2C_Mem_Read+0x228>)
 8001964:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001966:	88f8      	ldrh	r0, [r7, #6]
 8001968:	893a      	ldrh	r2, [r7, #8]
 800196a:	8979      	ldrh	r1, [r7, #10]
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	4603      	mov	r3, r0
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 fa52 	bl	8001e20 <I2C_RequestMemoryRead>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e1b0      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198a:	2b00      	cmp	r3, #0
 800198c:	d113      	bne.n	80019b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	623b      	str	r3, [r7, #32]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	623b      	str	r3, [r7, #32]
 80019a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e184      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d11b      	bne.n	80019f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	e164      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d11b      	bne.n	8001a36 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	61bb      	str	r3, [r7, #24]
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	e144      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001a4c:	e138      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	f200 80f1 	bhi.w	8001c3a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d123      	bne.n	8001aa8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 fc1b 	bl	80022a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e139      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001aa6:	e10b      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d14e      	bne.n	8001b4e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	4906      	ldr	r1, [pc, #24]	; (8001ad4 <HAL_I2C_Mem_Read+0x22c>)
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 fa98 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d008      	beq.n	8001ad8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e10e      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x440>
 8001aca:	bf00      	nop
 8001acc:	00100002 	.word	0x00100002
 8001ad0:	ffff0000 	.word	0xffff0000
 8001ad4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ae6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691a      	ldr	r2, [r3, #16]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b04:	3b01      	subs	r3, #1
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691a      	ldr	r2, [r3, #16]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b4c:	e0b8      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b54:	2200      	movs	r2, #0
 8001b56:	4966      	ldr	r1, [pc, #408]	; (8001cf0 <HAL_I2C_Mem_Read+0x448>)
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 fa49 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0bf      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691a      	ldr	r2, [r3, #16]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b94:	3b01      	subs	r3, #1
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	494f      	ldr	r1, [pc, #316]	; (8001cf0 <HAL_I2C_Mem_Read+0x448>)
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 fa1b 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e091      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691a      	ldr	r2, [r3, #16]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c38:	e042      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 fb2e 	bl	80022a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e04c      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	691a      	ldr	r2, [r3, #16]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d118      	bne.n	8001cc0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f47f aec2 	bne.w	8001a4e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e000      	b.n	8001ce8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001ce6:	2302      	movs	r3, #2
  }
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3728      	adds	r7, #40	; 0x28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	00010004 	.word	0x00010004

08001cf4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	4608      	mov	r0, r1
 8001cfe:	4611      	mov	r1, r2
 8001d00:	461a      	mov	r2, r3
 8001d02:	4603      	mov	r3, r0
 8001d04:	817b      	strh	r3, [r7, #10]
 8001d06:	460b      	mov	r3, r1
 8001d08:	813b      	strh	r3, [r7, #8]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f960 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00d      	beq.n	8001d52 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d44:	d103      	bne.n	8001d4e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e05f      	b.n	8001e12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d52:	897b      	ldrh	r3, [r7, #10]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	6a3a      	ldr	r2, [r7, #32]
 8001d66:	492d      	ldr	r1, [pc, #180]	; (8001e1c <I2C_RequestMemoryWrite+0x128>)
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 f998 	bl	800209e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e04c      	b.n	8001e12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d90:	6a39      	ldr	r1, [r7, #32]
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 fa02 	bl	800219c <I2C_WaitOnTXEFlagUntilTimeout>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00d      	beq.n	8001dba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d107      	bne.n	8001db6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e02b      	b.n	8001e12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d105      	bne.n	8001dcc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001dc0:	893b      	ldrh	r3, [r7, #8]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	611a      	str	r2, [r3, #16]
 8001dca:	e021      	b.n	8001e10 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001dcc:	893b      	ldrh	r3, [r7, #8]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ddc:	6a39      	ldr	r1, [r7, #32]
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 f9dc 	bl	800219c <I2C_WaitOnTXEFlagUntilTimeout>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00d      	beq.n	8001e06 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d107      	bne.n	8001e02 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e005      	b.n	8001e12 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e06:	893b      	ldrh	r3, [r7, #8]
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	00010002 	.word	0x00010002

08001e20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	4608      	mov	r0, r1
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4603      	mov	r3, r0
 8001e30:	817b      	strh	r3, [r7, #10]
 8001e32:	460b      	mov	r3, r1
 8001e34:	813b      	strh	r3, [r7, #8]
 8001e36:	4613      	mov	r3, r2
 8001e38:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e48:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 f8c2 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00d      	beq.n	8001e8e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e80:	d103      	bne.n	8001e8a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e0aa      	b.n	8001fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e8e:	897b      	ldrh	r3, [r7, #10]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	6a3a      	ldr	r2, [r7, #32]
 8001ea2:	4952      	ldr	r1, [pc, #328]	; (8001fec <I2C_RequestMemoryRead+0x1cc>)
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 f8fa 	bl	800209e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e097      	b.n	8001fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ecc:	6a39      	ldr	r1, [r7, #32]
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f964 	bl	800219c <I2C_WaitOnTXEFlagUntilTimeout>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00d      	beq.n	8001ef6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d107      	bne.n	8001ef2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e076      	b.n	8001fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d105      	bne.n	8001f08 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001efc:	893b      	ldrh	r3, [r7, #8]
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	611a      	str	r2, [r3, #16]
 8001f06:	e021      	b.n	8001f4c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f08:	893b      	ldrh	r3, [r7, #8]
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f18:	6a39      	ldr	r1, [r7, #32]
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f93e 	bl	800219c <I2C_WaitOnTXEFlagUntilTimeout>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00d      	beq.n	8001f42 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d107      	bne.n	8001f3e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e050      	b.n	8001fe4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f42:	893b      	ldrh	r3, [r7, #8]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f4e:	6a39      	ldr	r1, [r7, #32]
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 f923 	bl	800219c <I2C_WaitOnTXEFlagUntilTimeout>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00d      	beq.n	8001f78 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d107      	bne.n	8001f74 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f72:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e035      	b.n	8001fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f86:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 f82b 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00d      	beq.n	8001fbc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fae:	d103      	bne.n	8001fb8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e013      	b.n	8001fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001fbc:	897b      	ldrh	r3, [r7, #10]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	6a3a      	ldr	r2, [r7, #32]
 8001fd0:	4906      	ldr	r1, [pc, #24]	; (8001fec <I2C_RequestMemoryRead+0x1cc>)
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 f863 	bl	800209e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	00010002 	.word	0x00010002

08001ff0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002000:	e025      	b.n	800204e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002008:	d021      	beq.n	800204e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200a:	f7fe ff5b 	bl	8000ec4 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d302      	bcc.n	8002020 <I2C_WaitOnFlagUntilTimeout+0x30>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d116      	bne.n	800204e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2220      	movs	r2, #32
 800202a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f043 0220 	orr.w	r2, r3, #32
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e023      	b.n	8002096 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	0c1b      	lsrs	r3, r3, #16
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b01      	cmp	r3, #1
 8002056:	d10d      	bne.n	8002074 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	43da      	mvns	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4013      	ands	r3, r2
 8002064:	b29b      	uxth	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	bf0c      	ite	eq
 800206a:	2301      	moveq	r3, #1
 800206c:	2300      	movne	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	461a      	mov	r2, r3
 8002072:	e00c      	b.n	800208e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	43da      	mvns	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	4013      	ands	r3, r2
 8002080:	b29b      	uxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	bf0c      	ite	eq
 8002086:	2301      	moveq	r3, #1
 8002088:	2300      	movne	r3, #0
 800208a:	b2db      	uxtb	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	429a      	cmp	r2, r3
 8002092:	d0b6      	beq.n	8002002 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020ac:	e051      	b.n	8002152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020bc:	d123      	bne.n	8002106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2220      	movs	r2, #32
 80020e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f043 0204 	orr.w	r2, r3, #4
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e046      	b.n	8002194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800210c:	d021      	beq.n	8002152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800210e:	f7fe fed9 	bl	8000ec4 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	429a      	cmp	r2, r3
 800211c:	d302      	bcc.n	8002124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d116      	bne.n	8002152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2220      	movs	r2, #32
 800212e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f043 0220 	orr.w	r2, r3, #32
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e020      	b.n	8002194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	0c1b      	lsrs	r3, r3, #16
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d10c      	bne.n	8002176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	43da      	mvns	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4013      	ands	r3, r2
 8002168:	b29b      	uxth	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	bf14      	ite	ne
 800216e:	2301      	movne	r3, #1
 8002170:	2300      	moveq	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	e00b      	b.n	800218e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	43da      	mvns	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	4013      	ands	r3, r2
 8002182:	b29b      	uxth	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf14      	ite	ne
 8002188:	2301      	movne	r3, #1
 800218a:	2300      	moveq	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d18d      	bne.n	80020ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021a8:	e02d      	b.n	8002206 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 f8ce 	bl	800234c <I2C_IsAcknowledgeFailed>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e02d      	b.n	8002216 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021c0:	d021      	beq.n	8002206 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021c2:	f7fe fe7f 	bl	8000ec4 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d302      	bcc.n	80021d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d116      	bne.n	8002206 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f043 0220 	orr.w	r2, r3, #32
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e007      	b.n	8002216 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002210:	2b80      	cmp	r3, #128	; 0x80
 8002212:	d1ca      	bne.n	80021aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800222a:	e02d      	b.n	8002288 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 f88d 	bl	800234c <I2C_IsAcknowledgeFailed>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e02d      	b.n	8002298 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002242:	d021      	beq.n	8002288 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002244:	f7fe fe3e 	bl	8000ec4 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	429a      	cmp	r2, r3
 8002252:	d302      	bcc.n	800225a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d116      	bne.n	8002288 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f043 0220 	orr.w	r2, r3, #32
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e007      	b.n	8002298 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b04      	cmp	r3, #4
 8002294:	d1ca      	bne.n	800222c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022ac:	e042      	b.n	8002334 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2b10      	cmp	r3, #16
 80022ba:	d119      	bne.n	80022f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0210 	mvn.w	r2, #16
 80022c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e029      	b.n	8002344 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f0:	f7fe fde8 	bl	8000ec4 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d302      	bcc.n	8002306 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d116      	bne.n	8002334 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2220      	movs	r2, #32
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	f043 0220 	orr.w	r2, r3, #32
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e007      	b.n	8002344 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233e:	2b40      	cmp	r3, #64	; 0x40
 8002340:	d1b5      	bne.n	80022ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002362:	d11b      	bne.n	800239c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800236c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2220      	movs	r2, #32
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	f043 0204 	orr.w	r2, r3, #4
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e264      	b.n	8002888 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d075      	beq.n	80024b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ca:	4ba3      	ldr	r3, [pc, #652]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d00c      	beq.n	80023f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d6:	4ba0      	ldr	r3, [pc, #640]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d112      	bne.n	8002408 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023e2:	4b9d      	ldr	r3, [pc, #628]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ee:	d10b      	bne.n	8002408 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	4b99      	ldr	r3, [pc, #612]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d05b      	beq.n	80024b4 <HAL_RCC_OscConfig+0x108>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d157      	bne.n	80024b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e23f      	b.n	8002888 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002410:	d106      	bne.n	8002420 <HAL_RCC_OscConfig+0x74>
 8002412:	4b91      	ldr	r3, [pc, #580]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a90      	ldr	r2, [pc, #576]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 8002418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	e01d      	b.n	800245c <HAL_RCC_OscConfig+0xb0>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002428:	d10c      	bne.n	8002444 <HAL_RCC_OscConfig+0x98>
 800242a:	4b8b      	ldr	r3, [pc, #556]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a8a      	ldr	r2, [pc, #552]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 8002430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	4b88      	ldr	r3, [pc, #544]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a87      	ldr	r2, [pc, #540]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e00b      	b.n	800245c <HAL_RCC_OscConfig+0xb0>
 8002444:	4b84      	ldr	r3, [pc, #528]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a83      	ldr	r2, [pc, #524]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 800244a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	4b81      	ldr	r3, [pc, #516]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a80      	ldr	r2, [pc, #512]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 8002456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800245a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d013      	beq.n	800248c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7fe fd2e 	bl	8000ec4 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800246c:	f7fe fd2a 	bl	8000ec4 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b64      	cmp	r3, #100	; 0x64
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e204      	b.n	8002888 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247e:	4b76      	ldr	r3, [pc, #472]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0xc0>
 800248a:	e014      	b.n	80024b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7fe fd1a 	bl	8000ec4 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002494:	f7fe fd16 	bl	8000ec4 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	; 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e1f0      	b.n	8002888 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a6:	4b6c      	ldr	r3, [pc, #432]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0xe8>
 80024b2:	e000      	b.n	80024b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d063      	beq.n	800258a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024c2:	4b65      	ldr	r3, [pc, #404]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ce:	4b62      	ldr	r3, [pc, #392]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d11c      	bne.n	8002514 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024da:	4b5f      	ldr	r3, [pc, #380]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d116      	bne.n	8002514 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e6:	4b5c      	ldr	r3, [pc, #368]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <HAL_RCC_OscConfig+0x152>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d001      	beq.n	80024fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e1c4      	b.n	8002888 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fe:	4b56      	ldr	r3, [pc, #344]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4952      	ldr	r1, [pc, #328]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002512:	e03a      	b.n	800258a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d020      	beq.n	800255e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800251c:	4b4f      	ldr	r3, [pc, #316]	; (800265c <HAL_RCC_OscConfig+0x2b0>)
 800251e:	2201      	movs	r2, #1
 8002520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002522:	f7fe fccf 	bl	8000ec4 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800252a:	f7fe fccb 	bl	8000ec4 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e1a5      	b.n	8002888 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253c:	4b46      	ldr	r3, [pc, #280]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002548:	4b43      	ldr	r3, [pc, #268]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4940      	ldr	r1, [pc, #256]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	4313      	orrs	r3, r2
 800255a:	600b      	str	r3, [r1, #0]
 800255c:	e015      	b.n	800258a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800255e:	4b3f      	ldr	r3, [pc, #252]	; (800265c <HAL_RCC_OscConfig+0x2b0>)
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7fe fcae 	bl	8000ec4 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800256c:	f7fe fcaa 	bl	8000ec4 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e184      	b.n	8002888 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257e:	4b36      	ldr	r3, [pc, #216]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d030      	beq.n	80025f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d016      	beq.n	80025cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800259e:	4b30      	ldr	r3, [pc, #192]	; (8002660 <HAL_RCC_OscConfig+0x2b4>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a4:	f7fe fc8e 	bl	8000ec4 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ac:	f7fe fc8a 	bl	8000ec4 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e164      	b.n	8002888 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025be:	4b26      	ldr	r3, [pc, #152]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCC_OscConfig+0x200>
 80025ca:	e015      	b.n	80025f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025cc:	4b24      	ldr	r3, [pc, #144]	; (8002660 <HAL_RCC_OscConfig+0x2b4>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d2:	f7fe fc77 	bl	8000ec4 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025da:	f7fe fc73 	bl	8000ec4 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e14d      	b.n	8002888 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ec:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 80025ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1f0      	bne.n	80025da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 80a0 	beq.w	8002746 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002606:	2300      	movs	r3, #0
 8002608:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260a:	4b13      	ldr	r3, [pc, #76]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10f      	bne.n	8002636 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a0e      	ldr	r2, [pc, #56]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 8002620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <HAL_RCC_OscConfig+0x2ac>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002632:	2301      	movs	r3, #1
 8002634:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002636:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_RCC_OscConfig+0x2b8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d121      	bne.n	8002686 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002642:	4b08      	ldr	r3, [pc, #32]	; (8002664 <HAL_RCC_OscConfig+0x2b8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a07      	ldr	r2, [pc, #28]	; (8002664 <HAL_RCC_OscConfig+0x2b8>)
 8002648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800264e:	f7fe fc39 	bl	8000ec4 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002654:	e011      	b.n	800267a <HAL_RCC_OscConfig+0x2ce>
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
 800265c:	42470000 	.word	0x42470000
 8002660:	42470e80 	.word	0x42470e80
 8002664:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002668:	f7fe fc2c 	bl	8000ec4 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e106      	b.n	8002888 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267a:	4b85      	ldr	r3, [pc, #532]	; (8002890 <HAL_RCC_OscConfig+0x4e4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d106      	bne.n	800269c <HAL_RCC_OscConfig+0x2f0>
 800268e:	4b81      	ldr	r3, [pc, #516]	; (8002894 <HAL_RCC_OscConfig+0x4e8>)
 8002690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002692:	4a80      	ldr	r2, [pc, #512]	; (8002894 <HAL_RCC_OscConfig+0x4e8>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6713      	str	r3, [r2, #112]	; 0x70
 800269a:	e01c      	b.n	80026d6 <HAL_RCC_OscConfig+0x32a>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b05      	cmp	r3, #5
 80026a2:	d10c      	bne.n	80026be <HAL_RCC_OscConfig+0x312>
 80026a4:	4b7b      	ldr	r3, [pc, #492]	; (8002894 <HAL_RCC_OscConfig+0x4e8>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a8:	4a7a      	ldr	r2, [pc, #488]	; (8002894 <HAL_RCC_OscConfig+0x4e8>)
 80026aa:	f043 0304 	orr.w	r3, r3, #4
 80026ae:	6713      	str	r3, [r2, #112]	; 0x70
 80026b0:	4b78      	ldr	r3, [pc, #480]	; (8002894 <HAL_RCC_OscConfig+0x4e8>)
 80026b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b4:	4a77      	ldr	r2, [pc, #476]	; (8002894 <HAL_RCC_OscConfig+0x4e8>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6713      	str	r3, [r2, #112]	; 0x70
 80026bc:	e00b      	b.n	80026d6 <HAL_RCC_OscConfig+0x32a>
 80026be:	4b75      	ldr	r3, [pc, #468]	; (8002894 <HAL_RCC_OscConfig+0x4e8>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c2:	4a74      	ldr	r2, [pc, #464]	; (8002894 <HAL_RCC_OscConfig+0x4e8>)
 80026c4:	f023 0301 	bic.w	r3, r3, #1
 80026c8:	6713      	str	r3, [r2, #112]	; 0x70
 80026ca:	4b72      	ldr	r3, [pc, #456]	; (8002894 <HAL_RCC_OscConfig+0x4e8>)
 80026cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ce:	4a71      	ldr	r2, [pc, #452]	; (8002894 <HAL_RCC_OscConfig+0x4e8>)
 80026d0:	f023 0304 	bic.w	r3, r3, #4
 80026d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d015      	beq.n	800270a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026de:	f7fe fbf1 	bl	8000ec4 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e4:	e00a      	b.n	80026fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e6:	f7fe fbed 	bl	8000ec4 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e0c5      	b.n	8002888 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fc:	4b65      	ldr	r3, [pc, #404]	; (8002894 <HAL_RCC_OscConfig+0x4e8>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0ee      	beq.n	80026e6 <HAL_RCC_OscConfig+0x33a>
 8002708:	e014      	b.n	8002734 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270a:	f7fe fbdb 	bl	8000ec4 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002710:	e00a      	b.n	8002728 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002712:	f7fe fbd7 	bl	8000ec4 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002720:	4293      	cmp	r3, r2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e0af      	b.n	8002888 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002728:	4b5a      	ldr	r3, [pc, #360]	; (8002894 <HAL_RCC_OscConfig+0x4e8>)
 800272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1ee      	bne.n	8002712 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002734:	7dfb      	ldrb	r3, [r7, #23]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d105      	bne.n	8002746 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800273a:	4b56      	ldr	r3, [pc, #344]	; (8002894 <HAL_RCC_OscConfig+0x4e8>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	4a55      	ldr	r2, [pc, #340]	; (8002894 <HAL_RCC_OscConfig+0x4e8>)
 8002740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002744:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 809b 	beq.w	8002886 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002750:	4b50      	ldr	r3, [pc, #320]	; (8002894 <HAL_RCC_OscConfig+0x4e8>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 030c 	and.w	r3, r3, #12
 8002758:	2b08      	cmp	r3, #8
 800275a:	d05c      	beq.n	8002816 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d141      	bne.n	80027e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002764:	4b4c      	ldr	r3, [pc, #304]	; (8002898 <HAL_RCC_OscConfig+0x4ec>)
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276a:	f7fe fbab 	bl	8000ec4 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002772:	f7fe fba7 	bl	8000ec4 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e081      	b.n	8002888 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002784:	4b43      	ldr	r3, [pc, #268]	; (8002894 <HAL_RCC_OscConfig+0x4e8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f0      	bne.n	8002772 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69da      	ldr	r2, [r3, #28]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	019b      	lsls	r3, r3, #6
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	085b      	lsrs	r3, r3, #1
 80027a8:	3b01      	subs	r3, #1
 80027aa:	041b      	lsls	r3, r3, #16
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	061b      	lsls	r3, r3, #24
 80027b4:	4937      	ldr	r1, [pc, #220]	; (8002894 <HAL_RCC_OscConfig+0x4e8>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ba:	4b37      	ldr	r3, [pc, #220]	; (8002898 <HAL_RCC_OscConfig+0x4ec>)
 80027bc:	2201      	movs	r2, #1
 80027be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7fe fb80 	bl	8000ec4 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c8:	f7fe fb7c 	bl	8000ec4 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e056      	b.n	8002888 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027da:	4b2e      	ldr	r3, [pc, #184]	; (8002894 <HAL_RCC_OscConfig+0x4e8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0x41c>
 80027e6:	e04e      	b.n	8002886 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e8:	4b2b      	ldr	r3, [pc, #172]	; (8002898 <HAL_RCC_OscConfig+0x4ec>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7fe fb69 	bl	8000ec4 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f6:	f7fe fb65 	bl	8000ec4 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e03f      	b.n	8002888 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002808:	4b22      	ldr	r3, [pc, #136]	; (8002894 <HAL_RCC_OscConfig+0x4e8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f0      	bne.n	80027f6 <HAL_RCC_OscConfig+0x44a>
 8002814:	e037      	b.n	8002886 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e032      	b.n	8002888 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002822:	4b1c      	ldr	r3, [pc, #112]	; (8002894 <HAL_RCC_OscConfig+0x4e8>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d028      	beq.n	8002882 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d121      	bne.n	8002882 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002848:	429a      	cmp	r2, r3
 800284a:	d11a      	bne.n	8002882 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002852:	4013      	ands	r3, r2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002858:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800285a:	4293      	cmp	r3, r2
 800285c:	d111      	bne.n	8002882 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	3b01      	subs	r3, #1
 800286c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800286e:	429a      	cmp	r2, r3
 8002870:	d107      	bne.n	8002882 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800287e:	429a      	cmp	r2, r3
 8002880:	d001      	beq.n	8002886 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40007000 	.word	0x40007000
 8002894:	40023800 	.word	0x40023800
 8002898:	42470060 	.word	0x42470060

0800289c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0cc      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028b0:	4b68      	ldr	r3, [pc, #416]	; (8002a54 <HAL_RCC_ClockConfig+0x1b8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d90c      	bls.n	80028d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028be:	4b65      	ldr	r3, [pc, #404]	; (8002a54 <HAL_RCC_ClockConfig+0x1b8>)
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c6:	4b63      	ldr	r3, [pc, #396]	; (8002a54 <HAL_RCC_ClockConfig+0x1b8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0b8      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d020      	beq.n	8002926 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028f0:	4b59      	ldr	r3, [pc, #356]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	4a58      	ldr	r2, [pc, #352]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002908:	4b53      	ldr	r3, [pc, #332]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4a52      	ldr	r2, [pc, #328]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002912:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002914:	4b50      	ldr	r3, [pc, #320]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	494d      	ldr	r1, [pc, #308]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	4313      	orrs	r3, r2
 8002924:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d044      	beq.n	80029bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d107      	bne.n	800294a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	4b47      	ldr	r3, [pc, #284]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d119      	bne.n	800297a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e07f      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d003      	beq.n	800295a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002956:	2b03      	cmp	r3, #3
 8002958:	d107      	bne.n	800296a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295a:	4b3f      	ldr	r3, [pc, #252]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e06f      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296a:	4b3b      	ldr	r3, [pc, #236]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e067      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800297a:	4b37      	ldr	r3, [pc, #220]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f023 0203 	bic.w	r2, r3, #3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4934      	ldr	r1, [pc, #208]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	4313      	orrs	r3, r2
 800298a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800298c:	f7fe fa9a 	bl	8000ec4 <HAL_GetTick>
 8002990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	e00a      	b.n	80029aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002994:	f7fe fa96 	bl	8000ec4 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e04f      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029aa:	4b2b      	ldr	r3, [pc, #172]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 020c 	and.w	r2, r3, #12
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d1eb      	bne.n	8002994 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029bc:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <HAL_RCC_ClockConfig+0x1b8>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d20c      	bcs.n	80029e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <HAL_RCC_ClockConfig+0x1b8>)
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <HAL_RCC_ClockConfig+0x1b8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e032      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f0:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4916      	ldr	r1, [pc, #88]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d009      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a0e:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	490e      	ldr	r1, [pc, #56]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a22:	f000 f821 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 8002a26:	4602      	mov	r2, r0
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	490a      	ldr	r1, [pc, #40]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 8002a34:	5ccb      	ldrb	r3, [r1, r3]
 8002a36:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3a:	4a09      	ldr	r2, [pc, #36]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe f9fa 	bl	8000e3c <HAL_InitTick>

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40023c00 	.word	0x40023c00
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	080033b8 	.word	0x080033b8
 8002a60:	20000000 	.word	0x20000000
 8002a64:	20000004 	.word	0x20000004

08002a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	2300      	movs	r3, #0
 8002a7a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a80:	4b67      	ldr	r3, [pc, #412]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 030c 	and.w	r3, r3, #12
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d00d      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x40>
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	f200 80bd 	bhi.w	8002c0c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0x34>
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d003      	beq.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a9a:	e0b7      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a9c:	4b61      	ldr	r3, [pc, #388]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a9e:	60bb      	str	r3, [r7, #8]
       break;
 8002aa0:	e0b7      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aa2:	4b61      	ldr	r3, [pc, #388]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002aa4:	60bb      	str	r3, [r7, #8]
      break;
 8002aa6:	e0b4      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aa8:	4b5d      	ldr	r3, [pc, #372]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ab0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ab2:	4b5b      	ldr	r3, [pc, #364]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d04d      	beq.n	8002b5a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002abe:	4b58      	ldr	r3, [pc, #352]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	099b      	lsrs	r3, r3, #6
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ace:	f04f 0100 	mov.w	r1, #0
 8002ad2:	ea02 0800 	and.w	r8, r2, r0
 8002ad6:	ea03 0901 	and.w	r9, r3, r1
 8002ada:	4640      	mov	r0, r8
 8002adc:	4649      	mov	r1, r9
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	014b      	lsls	r3, r1, #5
 8002ae8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002aec:	0142      	lsls	r2, r0, #5
 8002aee:	4610      	mov	r0, r2
 8002af0:	4619      	mov	r1, r3
 8002af2:	ebb0 0008 	subs.w	r0, r0, r8
 8002af6:	eb61 0109 	sbc.w	r1, r1, r9
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	018b      	lsls	r3, r1, #6
 8002b04:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b08:	0182      	lsls	r2, r0, #6
 8002b0a:	1a12      	subs	r2, r2, r0
 8002b0c:	eb63 0301 	sbc.w	r3, r3, r1
 8002b10:	f04f 0000 	mov.w	r0, #0
 8002b14:	f04f 0100 	mov.w	r1, #0
 8002b18:	00d9      	lsls	r1, r3, #3
 8002b1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b1e:	00d0      	lsls	r0, r2, #3
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	eb12 0208 	adds.w	r2, r2, r8
 8002b28:	eb43 0309 	adc.w	r3, r3, r9
 8002b2c:	f04f 0000 	mov.w	r0, #0
 8002b30:	f04f 0100 	mov.w	r1, #0
 8002b34:	0259      	lsls	r1, r3, #9
 8002b36:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002b3a:	0250      	lsls	r0, r2, #9
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4610      	mov	r0, r2
 8002b42:	4619      	mov	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	461a      	mov	r2, r3
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	f7fd fb42 	bl	80001d4 <__aeabi_uldivmod>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4613      	mov	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	e04a      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b5a:	4b31      	ldr	r3, [pc, #196]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	099b      	lsrs	r3, r3, #6
 8002b60:	461a      	mov	r2, r3
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b6a:	f04f 0100 	mov.w	r1, #0
 8002b6e:	ea02 0400 	and.w	r4, r2, r0
 8002b72:	ea03 0501 	and.w	r5, r3, r1
 8002b76:	4620      	mov	r0, r4
 8002b78:	4629      	mov	r1, r5
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	014b      	lsls	r3, r1, #5
 8002b84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b88:	0142      	lsls	r2, r0, #5
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	1b00      	subs	r0, r0, r4
 8002b90:	eb61 0105 	sbc.w	r1, r1, r5
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	018b      	lsls	r3, r1, #6
 8002b9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ba2:	0182      	lsls	r2, r0, #6
 8002ba4:	1a12      	subs	r2, r2, r0
 8002ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8002baa:	f04f 0000 	mov.w	r0, #0
 8002bae:	f04f 0100 	mov.w	r1, #0
 8002bb2:	00d9      	lsls	r1, r3, #3
 8002bb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bb8:	00d0      	lsls	r0, r2, #3
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	1912      	adds	r2, r2, r4
 8002bc0:	eb45 0303 	adc.w	r3, r5, r3
 8002bc4:	f04f 0000 	mov.w	r0, #0
 8002bc8:	f04f 0100 	mov.w	r1, #0
 8002bcc:	0299      	lsls	r1, r3, #10
 8002bce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002bd2:	0290      	lsls	r0, r2, #10
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	461a      	mov	r2, r3
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	f7fd faf6 	bl	80001d4 <__aeabi_uldivmod>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4613      	mov	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	0c1b      	lsrs	r3, r3, #16
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c08:	60bb      	str	r3, [r7, #8]
      break;
 8002c0a:	e002      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c0e:	60bb      	str	r3, [r7, #8]
      break;
 8002c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c12:	68bb      	ldr	r3, [r7, #8]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800
 8002c24:	00f42400 	.word	0x00f42400
 8002c28:	007a1200 	.word	0x007a1200

08002c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20000000 	.word	0x20000000

08002c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c48:	f7ff fff0 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	0a9b      	lsrs	r3, r3, #10
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	4903      	ldr	r1, [pc, #12]	; (8002c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c5a:	5ccb      	ldrb	r3, [r1, r3]
 8002c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40023800 	.word	0x40023800
 8002c68:	080033c8 	.word	0x080033c8

08002c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c70:	f7ff ffdc 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8002c74:	4602      	mov	r2, r0
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	0b5b      	lsrs	r3, r3, #13
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	4903      	ldr	r1, [pc, #12]	; (8002c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c82:	5ccb      	ldrb	r3, [r1, r3]
 8002c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	080033c8 	.word	0x080033c8

08002c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d122      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d11b      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0202 	mvn.w	r2, #2
 8002cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f8ee 	bl	8002eb8 <HAL_TIM_IC_CaptureCallback>
 8002cdc:	e005      	b.n	8002cea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f8e0 	bl	8002ea4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f8f1 	bl	8002ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d122      	bne.n	8002d44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d11b      	bne.n	8002d44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0204 	mvn.w	r2, #4
 8002d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f8c4 	bl	8002eb8 <HAL_TIM_IC_CaptureCallback>
 8002d30:	e005      	b.n	8002d3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f8b6 	bl	8002ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f8c7 	bl	8002ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d122      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d11b      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f06f 0208 	mvn.w	r2, #8
 8002d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f89a 	bl	8002eb8 <HAL_TIM_IC_CaptureCallback>
 8002d84:	e005      	b.n	8002d92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f88c 	bl	8002ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f89d 	bl	8002ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b10      	cmp	r3, #16
 8002da4:	d122      	bne.n	8002dec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b10      	cmp	r3, #16
 8002db2:	d11b      	bne.n	8002dec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0210 	mvn.w	r2, #16
 8002dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f870 	bl	8002eb8 <HAL_TIM_IC_CaptureCallback>
 8002dd8:	e005      	b.n	8002de6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f862 	bl	8002ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f873 	bl	8002ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d10e      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d107      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0201 	mvn.w	r2, #1
 8002e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fd fed6 	bl	8000bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e22:	2b80      	cmp	r3, #128	; 0x80
 8002e24:	d10e      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e30:	2b80      	cmp	r3, #128	; 0x80
 8002e32:	d107      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f862 	bl	8002f08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4e:	2b40      	cmp	r3, #64	; 0x40
 8002e50:	d10e      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5c:	2b40      	cmp	r3, #64	; 0x40
 8002e5e:	d107      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f838 	bl	8002ee0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	d10e      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d107      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0220 	mvn.w	r2, #32
 8002e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f82c 	bl	8002ef4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e03f      	b.n	8002fae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fd fee6 	bl	8000d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2224      	movs	r2, #36	; 0x24
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f829 	bl	8002fb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695a      	ldr	r2, [r3, #20]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fbc:	b09f      	sub	sp, #124	; 0x7c
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fce:	68d9      	ldr	r1, [r3, #12]
 8002fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	ea40 0301 	orr.w	r3, r0, r1
 8002fd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ffc:	f021 010c 	bic.w	r1, r1, #12
 8003000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003006:	430b      	orrs	r3, r1
 8003008:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800300a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003016:	6999      	ldr	r1, [r3, #24]
 8003018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	ea40 0301 	orr.w	r3, r0, r1
 8003020:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	4bc5      	ldr	r3, [pc, #788]	; (800333c <UART_SetConfig+0x384>)
 8003028:	429a      	cmp	r2, r3
 800302a:	d004      	beq.n	8003036 <UART_SetConfig+0x7e>
 800302c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	4bc3      	ldr	r3, [pc, #780]	; (8003340 <UART_SetConfig+0x388>)
 8003032:	429a      	cmp	r2, r3
 8003034:	d103      	bne.n	800303e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003036:	f7ff fe19 	bl	8002c6c <HAL_RCC_GetPCLK2Freq>
 800303a:	6778      	str	r0, [r7, #116]	; 0x74
 800303c:	e002      	b.n	8003044 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800303e:	f7ff fe01 	bl	8002c44 <HAL_RCC_GetPCLK1Freq>
 8003042:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800304c:	f040 80b6 	bne.w	80031bc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003052:	461c      	mov	r4, r3
 8003054:	f04f 0500 	mov.w	r5, #0
 8003058:	4622      	mov	r2, r4
 800305a:	462b      	mov	r3, r5
 800305c:	1891      	adds	r1, r2, r2
 800305e:	6439      	str	r1, [r7, #64]	; 0x40
 8003060:	415b      	adcs	r3, r3
 8003062:	647b      	str	r3, [r7, #68]	; 0x44
 8003064:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003068:	1912      	adds	r2, r2, r4
 800306a:	eb45 0303 	adc.w	r3, r5, r3
 800306e:	f04f 0000 	mov.w	r0, #0
 8003072:	f04f 0100 	mov.w	r1, #0
 8003076:	00d9      	lsls	r1, r3, #3
 8003078:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800307c:	00d0      	lsls	r0, r2, #3
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	1911      	adds	r1, r2, r4
 8003084:	6639      	str	r1, [r7, #96]	; 0x60
 8003086:	416b      	adcs	r3, r5
 8003088:	667b      	str	r3, [r7, #100]	; 0x64
 800308a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	461a      	mov	r2, r3
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	1891      	adds	r1, r2, r2
 8003096:	63b9      	str	r1, [r7, #56]	; 0x38
 8003098:	415b      	adcs	r3, r3
 800309a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800309c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80030a4:	f7fd f896 	bl	80001d4 <__aeabi_uldivmod>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4ba5      	ldr	r3, [pc, #660]	; (8003344 <UART_SetConfig+0x38c>)
 80030ae:	fba3 2302 	umull	r2, r3, r3, r2
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	011e      	lsls	r6, r3, #4
 80030b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b8:	461c      	mov	r4, r3
 80030ba:	f04f 0500 	mov.w	r5, #0
 80030be:	4622      	mov	r2, r4
 80030c0:	462b      	mov	r3, r5
 80030c2:	1891      	adds	r1, r2, r2
 80030c4:	6339      	str	r1, [r7, #48]	; 0x30
 80030c6:	415b      	adcs	r3, r3
 80030c8:	637b      	str	r3, [r7, #52]	; 0x34
 80030ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80030ce:	1912      	adds	r2, r2, r4
 80030d0:	eb45 0303 	adc.w	r3, r5, r3
 80030d4:	f04f 0000 	mov.w	r0, #0
 80030d8:	f04f 0100 	mov.w	r1, #0
 80030dc:	00d9      	lsls	r1, r3, #3
 80030de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030e2:	00d0      	lsls	r0, r2, #3
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	1911      	adds	r1, r2, r4
 80030ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80030ec:	416b      	adcs	r3, r5
 80030ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	461a      	mov	r2, r3
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	1891      	adds	r1, r2, r2
 80030fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80030fe:	415b      	adcs	r3, r3
 8003100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003102:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003106:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800310a:	f7fd f863 	bl	80001d4 <__aeabi_uldivmod>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4b8c      	ldr	r3, [pc, #560]	; (8003344 <UART_SetConfig+0x38c>)
 8003114:	fba3 1302 	umull	r1, r3, r3, r2
 8003118:	095b      	lsrs	r3, r3, #5
 800311a:	2164      	movs	r1, #100	; 0x64
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	3332      	adds	r3, #50	; 0x32
 8003126:	4a87      	ldr	r2, [pc, #540]	; (8003344 <UART_SetConfig+0x38c>)
 8003128:	fba2 2303 	umull	r2, r3, r2, r3
 800312c:	095b      	lsrs	r3, r3, #5
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003134:	441e      	add	r6, r3
 8003136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003138:	4618      	mov	r0, r3
 800313a:	f04f 0100 	mov.w	r1, #0
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	1894      	adds	r4, r2, r2
 8003144:	623c      	str	r4, [r7, #32]
 8003146:	415b      	adcs	r3, r3
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
 800314a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800314e:	1812      	adds	r2, r2, r0
 8003150:	eb41 0303 	adc.w	r3, r1, r3
 8003154:	f04f 0400 	mov.w	r4, #0
 8003158:	f04f 0500 	mov.w	r5, #0
 800315c:	00dd      	lsls	r5, r3, #3
 800315e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003162:	00d4      	lsls	r4, r2, #3
 8003164:	4622      	mov	r2, r4
 8003166:	462b      	mov	r3, r5
 8003168:	1814      	adds	r4, r2, r0
 800316a:	653c      	str	r4, [r7, #80]	; 0x50
 800316c:	414b      	adcs	r3, r1
 800316e:	657b      	str	r3, [r7, #84]	; 0x54
 8003170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	461a      	mov	r2, r3
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	1891      	adds	r1, r2, r2
 800317c:	61b9      	str	r1, [r7, #24]
 800317e:	415b      	adcs	r3, r3
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003186:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800318a:	f7fd f823 	bl	80001d4 <__aeabi_uldivmod>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4b6c      	ldr	r3, [pc, #432]	; (8003344 <UART_SetConfig+0x38c>)
 8003194:	fba3 1302 	umull	r1, r3, r3, r2
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	2164      	movs	r1, #100	; 0x64
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	3332      	adds	r3, #50	; 0x32
 80031a6:	4a67      	ldr	r2, [pc, #412]	; (8003344 <UART_SetConfig+0x38c>)
 80031a8:	fba2 2303 	umull	r2, r3, r2, r3
 80031ac:	095b      	lsrs	r3, r3, #5
 80031ae:	f003 0207 	and.w	r2, r3, #7
 80031b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4432      	add	r2, r6
 80031b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031ba:	e0b9      	b.n	8003330 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031be:	461c      	mov	r4, r3
 80031c0:	f04f 0500 	mov.w	r5, #0
 80031c4:	4622      	mov	r2, r4
 80031c6:	462b      	mov	r3, r5
 80031c8:	1891      	adds	r1, r2, r2
 80031ca:	6139      	str	r1, [r7, #16]
 80031cc:	415b      	adcs	r3, r3
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031d4:	1912      	adds	r2, r2, r4
 80031d6:	eb45 0303 	adc.w	r3, r5, r3
 80031da:	f04f 0000 	mov.w	r0, #0
 80031de:	f04f 0100 	mov.w	r1, #0
 80031e2:	00d9      	lsls	r1, r3, #3
 80031e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031e8:	00d0      	lsls	r0, r2, #3
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	eb12 0804 	adds.w	r8, r2, r4
 80031f2:	eb43 0905 	adc.w	r9, r3, r5
 80031f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f04f 0100 	mov.w	r1, #0
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	008b      	lsls	r3, r1, #2
 800320a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800320e:	0082      	lsls	r2, r0, #2
 8003210:	4640      	mov	r0, r8
 8003212:	4649      	mov	r1, r9
 8003214:	f7fc ffde 	bl	80001d4 <__aeabi_uldivmod>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4b49      	ldr	r3, [pc, #292]	; (8003344 <UART_SetConfig+0x38c>)
 800321e:	fba3 2302 	umull	r2, r3, r3, r2
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	011e      	lsls	r6, r3, #4
 8003226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003228:	4618      	mov	r0, r3
 800322a:	f04f 0100 	mov.w	r1, #0
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	1894      	adds	r4, r2, r2
 8003234:	60bc      	str	r4, [r7, #8]
 8003236:	415b      	adcs	r3, r3
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800323e:	1812      	adds	r2, r2, r0
 8003240:	eb41 0303 	adc.w	r3, r1, r3
 8003244:	f04f 0400 	mov.w	r4, #0
 8003248:	f04f 0500 	mov.w	r5, #0
 800324c:	00dd      	lsls	r5, r3, #3
 800324e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003252:	00d4      	lsls	r4, r2, #3
 8003254:	4622      	mov	r2, r4
 8003256:	462b      	mov	r3, r5
 8003258:	1814      	adds	r4, r2, r0
 800325a:	64bc      	str	r4, [r7, #72]	; 0x48
 800325c:	414b      	adcs	r3, r1
 800325e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	4618      	mov	r0, r3
 8003266:	f04f 0100 	mov.w	r1, #0
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	008b      	lsls	r3, r1, #2
 8003274:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003278:	0082      	lsls	r2, r0, #2
 800327a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800327e:	f7fc ffa9 	bl	80001d4 <__aeabi_uldivmod>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4b2f      	ldr	r3, [pc, #188]	; (8003344 <UART_SetConfig+0x38c>)
 8003288:	fba3 1302 	umull	r1, r3, r3, r2
 800328c:	095b      	lsrs	r3, r3, #5
 800328e:	2164      	movs	r1, #100	; 0x64
 8003290:	fb01 f303 	mul.w	r3, r1, r3
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	3332      	adds	r3, #50	; 0x32
 800329a:	4a2a      	ldr	r2, [pc, #168]	; (8003344 <UART_SetConfig+0x38c>)
 800329c:	fba2 2303 	umull	r2, r3, r2, r3
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032a6:	441e      	add	r6, r3
 80032a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032aa:	4618      	mov	r0, r3
 80032ac:	f04f 0100 	mov.w	r1, #0
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	1894      	adds	r4, r2, r2
 80032b6:	603c      	str	r4, [r7, #0]
 80032b8:	415b      	adcs	r3, r3
 80032ba:	607b      	str	r3, [r7, #4]
 80032bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032c0:	1812      	adds	r2, r2, r0
 80032c2:	eb41 0303 	adc.w	r3, r1, r3
 80032c6:	f04f 0400 	mov.w	r4, #0
 80032ca:	f04f 0500 	mov.w	r5, #0
 80032ce:	00dd      	lsls	r5, r3, #3
 80032d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80032d4:	00d4      	lsls	r4, r2, #3
 80032d6:	4622      	mov	r2, r4
 80032d8:	462b      	mov	r3, r5
 80032da:	eb12 0a00 	adds.w	sl, r2, r0
 80032de:	eb43 0b01 	adc.w	fp, r3, r1
 80032e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f04f 0100 	mov.w	r1, #0
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	008b      	lsls	r3, r1, #2
 80032f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032fa:	0082      	lsls	r2, r0, #2
 80032fc:	4650      	mov	r0, sl
 80032fe:	4659      	mov	r1, fp
 8003300:	f7fc ff68 	bl	80001d4 <__aeabi_uldivmod>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <UART_SetConfig+0x38c>)
 800330a:	fba3 1302 	umull	r1, r3, r3, r2
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	2164      	movs	r1, #100	; 0x64
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	3332      	adds	r3, #50	; 0x32
 800331c:	4a09      	ldr	r2, [pc, #36]	; (8003344 <UART_SetConfig+0x38c>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	f003 020f 	and.w	r2, r3, #15
 8003328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4432      	add	r2, r6
 800332e:	609a      	str	r2, [r3, #8]
}
 8003330:	bf00      	nop
 8003332:	377c      	adds	r7, #124	; 0x7c
 8003334:	46bd      	mov	sp, r7
 8003336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800333a:	bf00      	nop
 800333c:	40011000 	.word	0x40011000
 8003340:	40011400 	.word	0x40011400
 8003344:	51eb851f 	.word	0x51eb851f

08003348 <__libc_init_array>:
 8003348:	b570      	push	{r4, r5, r6, lr}
 800334a:	4d0d      	ldr	r5, [pc, #52]	; (8003380 <__libc_init_array+0x38>)
 800334c:	4c0d      	ldr	r4, [pc, #52]	; (8003384 <__libc_init_array+0x3c>)
 800334e:	1b64      	subs	r4, r4, r5
 8003350:	10a4      	asrs	r4, r4, #2
 8003352:	2600      	movs	r6, #0
 8003354:	42a6      	cmp	r6, r4
 8003356:	d109      	bne.n	800336c <__libc_init_array+0x24>
 8003358:	4d0b      	ldr	r5, [pc, #44]	; (8003388 <__libc_init_array+0x40>)
 800335a:	4c0c      	ldr	r4, [pc, #48]	; (800338c <__libc_init_array+0x44>)
 800335c:	f000 f820 	bl	80033a0 <_init>
 8003360:	1b64      	subs	r4, r4, r5
 8003362:	10a4      	asrs	r4, r4, #2
 8003364:	2600      	movs	r6, #0
 8003366:	42a6      	cmp	r6, r4
 8003368:	d105      	bne.n	8003376 <__libc_init_array+0x2e>
 800336a:	bd70      	pop	{r4, r5, r6, pc}
 800336c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003370:	4798      	blx	r3
 8003372:	3601      	adds	r6, #1
 8003374:	e7ee      	b.n	8003354 <__libc_init_array+0xc>
 8003376:	f855 3b04 	ldr.w	r3, [r5], #4
 800337a:	4798      	blx	r3
 800337c:	3601      	adds	r6, #1
 800337e:	e7f2      	b.n	8003366 <__libc_init_array+0x1e>
 8003380:	080033d8 	.word	0x080033d8
 8003384:	080033d8 	.word	0x080033d8
 8003388:	080033d8 	.word	0x080033d8
 800338c:	080033dc 	.word	0x080033dc

08003390 <memset>:
 8003390:	4402      	add	r2, r0
 8003392:	4603      	mov	r3, r0
 8003394:	4293      	cmp	r3, r2
 8003396:	d100      	bne.n	800339a <memset+0xa>
 8003398:	4770      	bx	lr
 800339a:	f803 1b01 	strb.w	r1, [r3], #1
 800339e:	e7f9      	b.n	8003394 <memset+0x4>

080033a0 <_init>:
 80033a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a2:	bf00      	nop
 80033a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033a6:	bc08      	pop	{r3}
 80033a8:	469e      	mov	lr, r3
 80033aa:	4770      	bx	lr

080033ac <_fini>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	bf00      	nop
 80033b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b2:	bc08      	pop	{r3}
 80033b4:	469e      	mov	lr, r3
 80033b6:	4770      	bx	lr
