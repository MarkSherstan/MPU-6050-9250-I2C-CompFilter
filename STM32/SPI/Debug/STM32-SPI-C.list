
STM32-SPI-C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000498c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004b30  08004b30  00014b30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c00  08004c00  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c00  08004c00  00014c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c08  08004c08  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c08  08004c08  00014c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c0c  08004c0c  00014c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000070  08004c80  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08004c80  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d14b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de6  00000000  00000000  0002d1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002efd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f8  00000000  00000000  0002f898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169a2  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb98  00000000  00000000  00046a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000879f8  00000000  00000000  000525ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d9fc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028c8  00000000  00000000  000da018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004b14 	.word	0x08004b14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004b14 	.word	0x08004b14

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2f>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b44:	bf24      	itt	cs
 8000b46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4e:	d90d      	bls.n	8000b6c <__aeabi_d2f+0x30>
 8000b50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b64:	bf08      	it	eq
 8000b66:	f020 0001 	biceq.w	r0, r0, #1
 8000b6a:	4770      	bx	lr
 8000b6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b70:	d121      	bne.n	8000bb6 <__aeabi_d2f+0x7a>
 8000b72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b76:	bfbc      	itt	lt
 8000b78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	4770      	bxlt	lr
 8000b7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b86:	f1c2 0218 	rsb	r2, r2, #24
 8000b8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b92:	fa20 f002 	lsr.w	r0, r0, r2
 8000b96:	bf18      	it	ne
 8000b98:	f040 0001 	orrne.w	r0, r0, #1
 8000b9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba8:	ea40 000c 	orr.w	r0, r0, ip
 8000bac:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb4:	e7cc      	b.n	8000b50 <__aeabi_d2f+0x14>
 8000bb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bba:	d107      	bne.n	8000bcc <__aeabi_d2f+0x90>
 8000bbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bca:	4770      	bxne	lr
 8000bcc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bf0:	f000 b96e 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9d08      	ldr	r5, [sp, #32]
 8000c12:	4604      	mov	r4, r0
 8000c14:	468c      	mov	ip, r1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 8083 	bne.w	8000d22 <__udivmoddi4+0x116>
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	4617      	mov	r7, r2
 8000c20:	d947      	bls.n	8000cb2 <__udivmoddi4+0xa6>
 8000c22:	fab2 f282 	clz	r2, r2
 8000c26:	b142      	cbz	r2, 8000c3a <__udivmoddi4+0x2e>
 8000c28:	f1c2 0020 	rsb	r0, r2, #32
 8000c2c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c30:	4091      	lsls	r1, r2
 8000c32:	4097      	lsls	r7, r2
 8000c34:	ea40 0c01 	orr.w	ip, r0, r1
 8000c38:	4094      	lsls	r4, r2
 8000c3a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fbbc f6f8 	udiv	r6, ip, r8
 8000c44:	fa1f fe87 	uxth.w	lr, r7
 8000c48:	fb08 c116 	mls	r1, r8, r6, ip
 8000c4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c50:	fb06 f10e 	mul.w	r1, r6, lr
 8000c54:	4299      	cmp	r1, r3
 8000c56:	d909      	bls.n	8000c6c <__udivmoddi4+0x60>
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 8119 	bcs.w	8000e94 <__udivmoddi4+0x288>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 8116 	bls.w	8000e94 <__udivmoddi4+0x288>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	443b      	add	r3, r7
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c80:	45a6      	cmp	lr, r4
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x8c>
 8000c84:	193c      	adds	r4, r7, r4
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8a:	f080 8105 	bcs.w	8000e98 <__udivmoddi4+0x28c>
 8000c8e:	45a6      	cmp	lr, r4
 8000c90:	f240 8102 	bls.w	8000e98 <__udivmoddi4+0x28c>
 8000c94:	3802      	subs	r0, #2
 8000c96:	443c      	add	r4, r7
 8000c98:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9c:	eba4 040e 	sub.w	r4, r4, lr
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa0>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	b902      	cbnz	r2, 8000cb6 <__udivmoddi4+0xaa>
 8000cb4:	deff      	udf	#255	; 0xff
 8000cb6:	fab2 f282 	clz	r2, r2
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	d150      	bne.n	8000d60 <__udivmoddi4+0x154>
 8000cbe:	1bcb      	subs	r3, r1, r7
 8000cc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc4:	fa1f f887 	uxth.w	r8, r7
 8000cc8:	2601      	movs	r6, #1
 8000cca:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cce:	0c21      	lsrs	r1, r4, #16
 8000cd0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	d907      	bls.n	8000cf0 <__udivmoddi4+0xe4>
 8000ce0:	1879      	adds	r1, r7, r1
 8000ce2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0xe2>
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	f200 80e9 	bhi.w	8000ec0 <__udivmoddi4+0x2b4>
 8000cee:	4684      	mov	ip, r0
 8000cf0:	1ac9      	subs	r1, r1, r3
 8000cf2:	b2a3      	uxth	r3, r4
 8000cf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cfc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d00:	fb08 f800 	mul.w	r8, r8, r0
 8000d04:	45a0      	cmp	r8, r4
 8000d06:	d907      	bls.n	8000d18 <__udivmoddi4+0x10c>
 8000d08:	193c      	adds	r4, r7, r4
 8000d0a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x10a>
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	f200 80d9 	bhi.w	8000ec8 <__udivmoddi4+0x2bc>
 8000d16:	4618      	mov	r0, r3
 8000d18:	eba4 0408 	sub.w	r4, r4, r8
 8000d1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d20:	e7bf      	b.n	8000ca2 <__udivmoddi4+0x96>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0x12e>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80b1 	beq.w	8000e8e <__udivmoddi4+0x282>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x1cc>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0x140>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80b8 	bhi.w	8000ebc <__udivmoddi4+0x2b0>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	468c      	mov	ip, r1
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0a8      	beq.n	8000cac <__udivmoddi4+0xa0>
 8000d5a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d5e:	e7a5      	b.n	8000cac <__udivmoddi4+0xa0>
 8000d60:	f1c2 0320 	rsb	r3, r2, #32
 8000d64:	fa20 f603 	lsr.w	r6, r0, r3
 8000d68:	4097      	lsls	r7, r2
 8000d6a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d72:	40d9      	lsrs	r1, r3
 8000d74:	4330      	orrs	r0, r6
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d7c:	fa1f f887 	uxth.w	r8, r7
 8000d80:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f108 	mul.w	r1, r6, r8
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x19c>
 8000d94:	18fb      	adds	r3, r7, r3
 8000d96:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d9a:	f080 808d 	bcs.w	8000eb8 <__udivmoddi4+0x2ac>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 808a 	bls.w	8000eb8 <__udivmoddi4+0x2ac>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	443b      	add	r3, r7
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b281      	uxth	r1, r0
 8000dac:	fbb3 f0fe 	udiv	r0, r3, lr
 8000db0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db8:	fb00 f308 	mul.w	r3, r0, r8
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	d907      	bls.n	8000dd0 <__udivmoddi4+0x1c4>
 8000dc0:	1879      	adds	r1, r7, r1
 8000dc2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dc6:	d273      	bcs.n	8000eb0 <__udivmoddi4+0x2a4>
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d971      	bls.n	8000eb0 <__udivmoddi4+0x2a4>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4439      	add	r1, r7
 8000dd0:	1acb      	subs	r3, r1, r3
 8000dd2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dd6:	e778      	b.n	8000cca <__udivmoddi4+0xbe>
 8000dd8:	f1c6 0c20 	rsb	ip, r6, #32
 8000ddc:	fa03 f406 	lsl.w	r4, r3, r6
 8000de0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000de4:	431c      	orrs	r4, r3
 8000de6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000df2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000df6:	431f      	orrs	r7, r3
 8000df8:	0c3b      	lsrs	r3, r7, #16
 8000dfa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfe:	fa1f f884 	uxth.w	r8, r4
 8000e02:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e06:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e0a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	fa02 f206 	lsl.w	r2, r2, r6
 8000e14:	fa00 f306 	lsl.w	r3, r0, r6
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x220>
 8000e1a:	1861      	adds	r1, r4, r1
 8000e1c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e20:	d248      	bcs.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e22:	458a      	cmp	sl, r1
 8000e24:	d946      	bls.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e26:	f1a9 0902 	sub.w	r9, r9, #2
 8000e2a:	4421      	add	r1, r4
 8000e2c:	eba1 010a 	sub.w	r1, r1, sl
 8000e30:	b2bf      	uxth	r7, r7
 8000e32:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e36:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e3a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e3e:	fb00 f808 	mul.w	r8, r0, r8
 8000e42:	45b8      	cmp	r8, r7
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x24a>
 8000e46:	19e7      	adds	r7, r4, r7
 8000e48:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e4c:	d22e      	bcs.n	8000eac <__udivmoddi4+0x2a0>
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d92c      	bls.n	8000eac <__udivmoddi4+0x2a0>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4427      	add	r7, r4
 8000e56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e5a:	eba7 0708 	sub.w	r7, r7, r8
 8000e5e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e62:	454f      	cmp	r7, r9
 8000e64:	46c6      	mov	lr, r8
 8000e66:	4649      	mov	r1, r9
 8000e68:	d31a      	bcc.n	8000ea0 <__udivmoddi4+0x294>
 8000e6a:	d017      	beq.n	8000e9c <__udivmoddi4+0x290>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x27a>
 8000e6e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e72:	eb67 0701 	sbc.w	r7, r7, r1
 8000e76:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e7a:	40f2      	lsrs	r2, r6
 8000e7c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e80:	40f7      	lsrs	r7, r6
 8000e82:	e9c5 2700 	strd	r2, r7, [r5]
 8000e86:	2600      	movs	r6, #0
 8000e88:	4631      	mov	r1, r6
 8000e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8e:	462e      	mov	r6, r5
 8000e90:	4628      	mov	r0, r5
 8000e92:	e70b      	b.n	8000cac <__udivmoddi4+0xa0>
 8000e94:	4606      	mov	r6, r0
 8000e96:	e6e9      	b.n	8000c6c <__udivmoddi4+0x60>
 8000e98:	4618      	mov	r0, r3
 8000e9a:	e6fd      	b.n	8000c98 <__udivmoddi4+0x8c>
 8000e9c:	4543      	cmp	r3, r8
 8000e9e:	d2e5      	bcs.n	8000e6c <__udivmoddi4+0x260>
 8000ea0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	e7df      	b.n	8000e6c <__udivmoddi4+0x260>
 8000eac:	4608      	mov	r0, r1
 8000eae:	e7d2      	b.n	8000e56 <__udivmoddi4+0x24a>
 8000eb0:	4660      	mov	r0, ip
 8000eb2:	e78d      	b.n	8000dd0 <__udivmoddi4+0x1c4>
 8000eb4:	4681      	mov	r9, r0
 8000eb6:	e7b9      	b.n	8000e2c <__udivmoddi4+0x220>
 8000eb8:	4666      	mov	r6, ip
 8000eba:	e775      	b.n	8000da8 <__udivmoddi4+0x19c>
 8000ebc:	4630      	mov	r0, r6
 8000ebe:	e74a      	b.n	8000d56 <__udivmoddi4+0x14a>
 8000ec0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec4:	4439      	add	r1, r7
 8000ec6:	e713      	b.n	8000cf0 <__udivmoddi4+0xe4>
 8000ec8:	3802      	subs	r0, #2
 8000eca:	443c      	add	r4, r7
 8000ecc:	e724      	b.n	8000d18 <__udivmoddi4+0x10c>
 8000ece:	bf00      	nop

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <MPU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{   
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
    // Initialize variables
    uint8_t check, addr, val;

    // Confirm device
    MPU_REG_READ(SPIx, WHO_AM_I, &check, 1);
 8000ede:	f107 020f 	add.w	r2, r7, #15
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	2175      	movs	r1, #117	; 0x75
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f000 f850 	bl	8000f8c <MPU_REG_READ>
    if (check == WHO_AM_I_9250_ANS)
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	2b71      	cmp	r3, #113	; 0x71
 8000ef0:	d129      	bne.n	8000f46 <MPU_begin+0x72>
    {
        // Startup / reset the sensor
        addr = PWR_MGMT_1;
 8000ef2:	236b      	movs	r3, #107	; 0x6b
 8000ef4:	73bb      	strb	r3, [r7, #14]
        val = 0x00;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, &addr, &val);
 8000efa:	f107 020d 	add.w	r2, r7, #13
 8000efe:	f107 030e 	add.w	r3, r7, #14
 8000f02:	4619      	mov	r1, r3
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 f823 	bl	8000f50 <MPU_REG_WRITE>

        // Disable I2C (SPI only)
        addr = USER_CTRL;
 8000f0a:	236a      	movs	r3, #106	; 0x6a
 8000f0c:	73bb      	strb	r3, [r7, #14]
        val = 0x10;
 8000f0e:	2310      	movs	r3, #16
 8000f10:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, &addr, &val);
 8000f12:	f107 020d 	add.w	r2, r7, #13
 8000f16:	f107 030e 	add.w	r3, r7, #14
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f817 	bl	8000f50 <MPU_REG_WRITE>
        
        // Set the full scale ranges
        setAccFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.aFullScaleRange);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000f28:	461a      	mov	r2, r3
 8000f2a:	6839      	ldr	r1, [r7, #0]
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 f867 	bl	8001000 <setAccFullScaleRange>
        setGyroFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.gFullScaleRange);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8000f38:	461a      	mov	r2, r3
 8000f3a:	6839      	ldr	r1, [r7, #0]
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 f8c7 	bl	80010d0 <setGyroFullScaleRange>
        return 1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <MPU_begin+0x74>
    }
    else 
    {
        return 0;
 8000f46:	2300      	movs	r3, #0
    }
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <MPU_REG_WRITE>:

/// @brief Read a specific registry address
/// @param pAddr Pointer to address to be written to
/// @param pVal Pointer of value to write to given address
void MPU_REG_WRITE(SPI_HandleTypeDef *SPIx, uint8_t *pAddr, uint8_t *pVal)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
	MPU_CS(CS_SELECT);
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f000 f83d 	bl	8000fdc <MPU_CS>
    HAL_SPI_Transmit(SPIx, pAddr, 1, SPI_TIMOUT_MS);
 8000f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f66:	2201      	movs	r2, #1
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f001 fe9f 	bl	8002cae <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, pVal, 1, SPI_TIMOUT_MS);
 8000f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f74:	2201      	movs	r2, #1
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f001 fe98 	bl	8002cae <HAL_SPI_Transmit>
	MPU_CS(CS_DESELECT);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f000 f82c 	bl	8000fdc <MPU_CS>
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <MPU_REG_READ>:
/// @param SPIx Pointer to SPI structure config
/// @param addr Address to start reading at
/// @param pRxData Pointer to data buffer
/// @param RxSize Size of data buffer
void MPU_REG_READ(SPI_HandleTypeDef *SPIx, uint8_t addr, uint8_t *pRxData, uint16_t RxSize)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	461a      	mov	r2, r3
 8000f98:	460b      	mov	r3, r1
 8000f9a:	72fb      	strb	r3, [r7, #11]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	813b      	strh	r3, [r7, #8]
	MPU_CS(CS_SELECT);
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f000 f81b 	bl	8000fdc <MPU_CS>
	uint8_t writeAddr = addr | READWRITE;
 8000fa6:	7afb      	ldrb	r3, [r7, #11]
 8000fa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(SPIx, &writeAddr, 1, SPI_TIMOUT_MS);
 8000fb0:	f107 0117 	add.w	r1, r7, #23
 8000fb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb8:	2201      	movs	r2, #1
 8000fba:	68f8      	ldr	r0, [r7, #12]
 8000fbc:	f001 fe77 	bl	8002cae <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPIx, pRxData, RxSize, SPI_TIMOUT_MS);
 8000fc0:	893a      	ldrh	r2, [r7, #8]
 8000fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f001 ffac 	bl	8002f26 <HAL_SPI_Receive>
	MPU_CS(CS_DESELECT);
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f000 f804 	bl	8000fdc <MPU_CS>
}
 8000fd4:	bf00      	nop
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <MPU_CS>:

/// @brief Set CS state to either start or end transmissions
/// @param state Set low to select, high to deselect
void MPU_CS(uint8_t state)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
//	HAL_GPIO_WritePin(mpuConfig.CS_PORT, mpuConfig.CS_PIN, state);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, state);
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	2140      	movs	r1, #64	; 0x40
 8000fec:	4803      	ldr	r0, [pc, #12]	; (8000ffc <MPU_CS+0x20>)
 8000fee:	f001 f947 	bl	8002280 <HAL_GPIO_WritePin>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40020400 	.word	0x40020400

08001000 <setAccFullScaleRange>:
/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void setAccFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t aScale)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	4613      	mov	r3, r2
 800100c:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = ACCEL_CONFIG;
 800100e:	231c      	movs	r3, #28
 8001010:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (aScale)
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b03      	cmp	r3, #3
 8001016:	d847      	bhi.n	80010a8 <setAccFullScaleRange+0xa8>
 8001018:	a201      	add	r2, pc, #4	; (adr r2, 8001020 <setAccFullScaleRange+0x20>)
 800101a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101e:	bf00      	nop
 8001020:	08001031 	.word	0x08001031
 8001024:	0800104f 	.word	0x0800104f
 8001028:	0800106d 	.word	0x0800106d
 800102c:	0800108b 	.word	0x0800108b
    {
    case AFS_2G:
        pMPU9250->sensorData.aScaleFactor = 16384.0;
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8001036:	601a      	str	r2, [r3, #0]
        val = 0x00;
 8001038:	2300      	movs	r3, #0
 800103a:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, &addr, &val);
 800103c:	f107 0216 	add.w	r2, r7, #22
 8001040:	f107 0317 	add.w	r3, r7, #23
 8001044:	4619      	mov	r1, r3
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f7ff ff82 	bl	8000f50 <MPU_REG_WRITE>
        break;
 800104c:	e03b      	b.n	80010c6 <setAccFullScaleRange+0xc6>
    case AFS_4G:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001054:	601a      	str	r2, [r3, #0]
        val = 0x08;
 8001056:	2308      	movs	r3, #8
 8001058:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, &addr, &val);
 800105a:	f107 0216 	add.w	r2, r7, #22
 800105e:	f107 0317 	add.w	r3, r7, #23
 8001062:	4619      	mov	r1, r3
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f7ff ff73 	bl	8000f50 <MPU_REG_WRITE>
        break;
 800106a:	e02c      	b.n	80010c6 <setAccFullScaleRange+0xc6>
    case AFS_8G:
        pMPU9250->sensorData.aScaleFactor = 4096.0;
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8001072:	601a      	str	r2, [r3, #0]
        val = 0x10;
 8001074:	2310      	movs	r3, #16
 8001076:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, &addr, &val);
 8001078:	f107 0216 	add.w	r2, r7, #22
 800107c:	f107 0317 	add.w	r3, r7, #23
 8001080:	4619      	mov	r1, r3
 8001082:	68f8      	ldr	r0, [r7, #12]
 8001084:	f7ff ff64 	bl	8000f50 <MPU_REG_WRITE>
        break;
 8001088:	e01d      	b.n	80010c6 <setAccFullScaleRange+0xc6>
    case AFS_16G:
        pMPU9250->sensorData.aScaleFactor = 2048.0;
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001090:	601a      	str	r2, [r3, #0]
        val = 0x18;
 8001092:	2318      	movs	r3, #24
 8001094:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, &addr, &val);
 8001096:	f107 0216 	add.w	r2, r7, #22
 800109a:	f107 0317 	add.w	r3, r7, #23
 800109e:	4619      	mov	r1, r3
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f7ff ff55 	bl	8000f50 <MPU_REG_WRITE>
        break;
 80010a6:	e00e      	b.n	80010c6 <setAccFullScaleRange+0xc6>
    default:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80010ae:	601a      	str	r2, [r3, #0]
        val = 0x08;
 80010b0:	2308      	movs	r3, #8
 80010b2:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, &addr, &val);
 80010b4:	f107 0216 	add.w	r2, r7, #22
 80010b8:	f107 0317 	add.w	r3, r7, #23
 80010bc:	4619      	mov	r1, r3
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	f7ff ff46 	bl	8000f50 <MPU_REG_WRITE>
        break;
 80010c4:	bf00      	nop
    }
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop

080010d0 <setGyroFullScaleRange>:
/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void setGyroFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t gScale)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	4613      	mov	r3, r2
 80010dc:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = GYRO_CONFIG;
 80010de:	231b      	movs	r3, #27
 80010e0:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (gScale)
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d843      	bhi.n	8001170 <setGyroFullScaleRange+0xa0>
 80010e8:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <setGyroFullScaleRange+0x20>)
 80010ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ee:	bf00      	nop
 80010f0:	08001101 	.word	0x08001101
 80010f4:	0800111d 	.word	0x0800111d
 80010f8:	08001139 	.word	0x08001139
 80010fc:	08001155 	.word	0x08001155
    {
    case GFS_250DPS:
        pMPU9250->sensorData.gScaleFactor = 131.0;
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4a24      	ldr	r2, [pc, #144]	; (8001194 <setGyroFullScaleRange+0xc4>)
 8001104:	605a      	str	r2, [r3, #4]
        val = 0x00;
 8001106:	2300      	movs	r3, #0
 8001108:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, &addr, &val);
 800110a:	f107 0216 	add.w	r2, r7, #22
 800110e:	f107 0317 	add.w	r3, r7, #23
 8001112:	4619      	mov	r1, r3
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f7ff ff1b 	bl	8000f50 <MPU_REG_WRITE>
        break;
 800111a:	e037      	b.n	800118c <setGyroFullScaleRange+0xbc>
    case GFS_500DPS:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <setGyroFullScaleRange+0xc8>)
 8001120:	605a      	str	r2, [r3, #4]
        val = 0x08;
 8001122:	2308      	movs	r3, #8
 8001124:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, &addr, &val);
 8001126:	f107 0216 	add.w	r2, r7, #22
 800112a:	f107 0317 	add.w	r3, r7, #23
 800112e:	4619      	mov	r1, r3
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f7ff ff0d 	bl	8000f50 <MPU_REG_WRITE>
        break;
 8001136:	e029      	b.n	800118c <setGyroFullScaleRange+0xbc>
    case GFS_1000DPS:
        pMPU9250->sensorData.gScaleFactor = 32.8;
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	4a18      	ldr	r2, [pc, #96]	; (800119c <setGyroFullScaleRange+0xcc>)
 800113c:	605a      	str	r2, [r3, #4]
        val = 0x10;
 800113e:	2310      	movs	r3, #16
 8001140:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, &addr, &val);
 8001142:	f107 0216 	add.w	r2, r7, #22
 8001146:	f107 0317 	add.w	r3, r7, #23
 800114a:	4619      	mov	r1, r3
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f7ff feff 	bl	8000f50 <MPU_REG_WRITE>
        break;
 8001152:	e01b      	b.n	800118c <setGyroFullScaleRange+0xbc>
    case GFS_2000DPS:
        pMPU9250->sensorData.gScaleFactor = 16.4;
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <setGyroFullScaleRange+0xd0>)
 8001158:	605a      	str	r2, [r3, #4]
        val = 0x18;
 800115a:	2318      	movs	r3, #24
 800115c:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, &addr, &val);
 800115e:	f107 0216 	add.w	r2, r7, #22
 8001162:	f107 0317 	add.w	r3, r7, #23
 8001166:	4619      	mov	r1, r3
 8001168:	68f8      	ldr	r0, [r7, #12]
 800116a:	f7ff fef1 	bl	8000f50 <MPU_REG_WRITE>
        break;
 800116e:	e00d      	b.n	800118c <setGyroFullScaleRange+0xbc>
    default:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	4a09      	ldr	r2, [pc, #36]	; (8001198 <setGyroFullScaleRange+0xc8>)
 8001174:	605a      	str	r2, [r3, #4]
        val = 0x08;
 8001176:	2308      	movs	r3, #8
 8001178:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, &addr, &val);
 800117a:	f107 0216 	add.w	r2, r7, #22
 800117e:	f107 0317 	add.w	r3, r7, #23
 8001182:	4619      	mov	r1, r3
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f7ff fee3 	bl	8000f50 <MPU_REG_WRITE>
        break;
 800118a:	bf00      	nop
    }
}
 800118c:	bf00      	nop
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	43030000 	.word	0x43030000
 8001198:	42830000 	.word	0x42830000
 800119c:	42033333 	.word	0x42033333
 80011a0:	41833333 	.word	0x41833333

080011a4 <readRawData>:

/// @brief Read raw data from IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void readRawData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
    uint8_t buf[14];

    // Subroutine for reading the raw data
    MPU_REG_READ(SPIx, ACCEL_XOUT_H, &buf, 14);
 80011ae:	f107 0208 	add.w	r2, r7, #8
 80011b2:	230e      	movs	r3, #14
 80011b4:	213b      	movs	r1, #59	; 0x3b
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fee8 	bl	8000f8c <MPU_REG_READ>

    // Bit shift the data
    pMPU9250->sensorData.ax = buf[0] << 8 | buf[1];
 80011bc:	7a3b      	ldrb	r3, [r7, #8]
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	7a7a      	ldrb	r2, [r7, #9]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	edc3 7a02 	vstr	s15, [r3, #8]
    pMPU9250->sensorData.ay = buf[2] << 8 | buf[3];
 80011d2:	7abb      	ldrb	r3, [r7, #10]
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	7afa      	ldrb	r2, [r7, #11]
 80011d8:	4313      	orrs	r3, r2
 80011da:	ee07 3a90 	vmov	s15, r3
 80011de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	edc3 7a03 	vstr	s15, [r3, #12]
    pMPU9250->sensorData.az = buf[4] << 8 | buf[5];
 80011e8:	7b3b      	ldrb	r3, [r7, #12]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	7b7a      	ldrb	r2, [r7, #13]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	ee07 3a90 	vmov	s15, r3
 80011f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	edc3 7a04 	vstr	s15, [r3, #16]

    // temperature = buf[6] << 8 | buf[7];

    pMPU9250->sensorData.gx = buf[8] << 8 | buf[9];
 80011fe:	7c3b      	ldrb	r3, [r7, #16]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	7c7a      	ldrb	r2, [r7, #17]
 8001204:	4313      	orrs	r3, r2
 8001206:	ee07 3a90 	vmov	s15, r3
 800120a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	edc3 7a05 	vstr	s15, [r3, #20]
    pMPU9250->sensorData.gy = buf[10] << 8 | buf[11];
 8001214:	7cbb      	ldrb	r3, [r7, #18]
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	7cfa      	ldrb	r2, [r7, #19]
 800121a:	4313      	orrs	r3, r2
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	edc3 7a06 	vstr	s15, [r3, #24]
    pMPU9250->sensorData.gz = buf[12] << 8 | buf[13];
 800122a:	7d3b      	ldrb	r3, [r7, #20]
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	7d7a      	ldrb	r2, [r7, #21]
 8001230:	4313      	orrs	r3, r2
 8001232:	ee07 3a90 	vmov	s15, r3
 8001236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001240:	bf00      	nop
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <MPU_calibrateGyro>:
/// @brief Find offsets for each axis of gyroscope.
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param numCalPoints Number of data points to average.
void MPU_calibrateGyro(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint16_t numCalPoints)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	4613      	mov	r3, r2
 8001254:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
    int32_t z = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8001262:	2300      	movs	r3, #0
 8001264:	827b      	strh	r3, [r7, #18]
 8001266:	e036      	b.n	80012d6 <MPU_calibrateGyro+0x8e>
    {
        readRawData(SPIx, pMPU9250);
 8001268:	68b9      	ldr	r1, [r7, #8]
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f7ff ff9a 	bl	80011a4 <readRawData>
        x += pMPU9250->sensorData.gx;
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	ee07 3a90 	vmov	s15, r3
 8001276:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001284:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001288:	ee17 3a90 	vmov	r3, s15
 800128c:	61fb      	str	r3, [r7, #28]
        y += pMPU9250->sensorData.gy;
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	edd3 7a06 	vldr	s15, [r3, #24]
 800129e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a6:	ee17 3a90 	vmov	r3, s15
 80012aa:	61bb      	str	r3, [r7, #24]
        z += pMPU9250->sensorData.gz;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	edd3 7a07 	vldr	s15, [r3, #28]
 80012bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012c4:	ee17 3a90 	vmov	r3, s15
 80012c8:	617b      	str	r3, [r7, #20]
        HAL_Delay(3);
 80012ca:	2003      	movs	r0, #3
 80012cc:	f000 fd4a 	bl	8001d64 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 80012d0:	8a7b      	ldrh	r3, [r7, #18]
 80012d2:	3301      	adds	r3, #1
 80012d4:	827b      	strh	r3, [r7, #18]
 80012d6:	8a7a      	ldrh	r2, [r7, #18]
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d3c4      	bcc.n	8001268 <MPU_calibrateGyro+0x20>
    }

    // Average the saved data points to find the gyroscope offset
    pMPU9250->gyroCal.x = (float)x / (float)numCalPoints;
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	ee07 3a90 	vmov	s15, r3
 80012e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	ee07 3a90 	vmov	s15, r3
 80012ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	edc3 7a08 	vstr	s15, [r3, #32]
    pMPU9250->gyroCal.y = (float)y / (float)numCalPoints;
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	ee07 3a90 	vmov	s15, r3
 8001302:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	ee07 3a90 	vmov	s15, r3
 800130c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    pMPU9250->gyroCal.z = (float)z / (float)numCalPoints;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	ee07 3a90 	vmov	s15, r3
 800132a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800132e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8001338:	bf00      	nop
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void readProcessedData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
    // Get raw values from the IMU
    readRawData(SPIx, pMPU9250);
 800134a:	6839      	ldr	r1, [r7, #0]
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff29 	bl	80011a4 <readRawData>

    // Convert accelerometer values to g's
    pMPU9250->sensorData.ax /= pMPU9250->sensorData.aScaleFactor;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	edd3 6a02 	vldr	s13, [r3, #8]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	ed93 7a00 	vldr	s14, [r3]
 800135e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	edc3 7a02 	vstr	s15, [r3, #8]
    pMPU9250->sensorData.ay /= pMPU9250->sensorData.aScaleFactor;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	edd3 6a03 	vldr	s13, [r3, #12]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	ed93 7a00 	vldr	s14, [r3]
 8001374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	edc3 7a03 	vstr	s15, [r3, #12]
    pMPU9250->sensorData.az /= pMPU9250->sensorData.aScaleFactor;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	edd3 6a04 	vldr	s13, [r3, #16]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	ed93 7a00 	vldr	s14, [r3]
 800138a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	edc3 7a04 	vstr	s15, [r3, #16]

    // Compensate for gyro offset
    pMPU9250->sensorData.gx -= pMPU9250->gyroCal.x;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	ed93 7a05 	vldr	s14, [r3, #20]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	edd3 7a08 	vldr	s15, [r3, #32]
 80013a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	edc3 7a05 	vstr	s15, [r3, #20]
    pMPU9250->sensorData.gy -= pMPU9250->gyroCal.y;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	ed93 7a06 	vldr	s14, [r3, #24]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80013b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	edc3 7a06 	vstr	s15, [r3, #24]
    pMPU9250->sensorData.gz -= pMPU9250->gyroCal.z;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	ed93 7a07 	vldr	s14, [r3, #28]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80013cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	edc3 7a07 	vstr	s15, [r3, #28]

    // Convert gyro values to deg/s
    pMPU9250->sensorData.gx /= pMPU9250->sensorData.gScaleFactor;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	edd3 6a05 	vldr	s13, [r3, #20]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	ed93 7a01 	vldr	s14, [r3, #4]
 80013e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	edc3 7a05 	vstr	s15, [r3, #20]
    pMPU9250->sensorData.gy /= pMPU9250->sensorData.gScaleFactor;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	edd3 6a06 	vldr	s13, [r3, #24]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80013f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	edc3 7a06 	vstr	s15, [r3, #24]
    pMPU9250->sensorData.gz /= pMPU9250->sensorData.gScaleFactor;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	edd3 6a07 	vldr	s13, [r3, #28]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	ed93 7a01 	vldr	s14, [r3, #4]
 800140e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <MPU_calcAttitude>:

/// @brief Calculate the attitude of the sensor in degrees using a complementary filter
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_calcAttitude(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8001420:	b5b0      	push	{r4, r5, r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
    // Read processed data
    readProcessedData(SPIx, pMPU9250);
 800142a:	6839      	ldr	r1, [r7, #0]
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ff87 	bl	8001340 <readProcessedData>

    // Complementary filter
    float accelPitch = atan2(pMPU9250->sensorData.ay, pMPU9250->sensorData.az) * RAD2DEG;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f88e 	bl	8000558 <__aeabi_f2d>
 800143c:	4604      	mov	r4, r0
 800143e:	460d      	mov	r5, r1
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f887 	bl	8000558 <__aeabi_f2d>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	ec43 2b11 	vmov	d1, r2, r3
 8001452:	ec45 4b10 	vmov	d0, r4, r5
 8001456:	f003 f8e5 	bl	8004624 <atan2>
 800145a:	ec51 0b10 	vmov	r0, r1, d0
 800145e:	a344      	add	r3, pc, #272	; (adr r3, 8001570 <MPU_calcAttitude+0x150>)
 8001460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001464:	f7ff f8d0 	bl	8000608 <__aeabi_dmul>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	f7ff fb64 	bl	8000b3c <__aeabi_d2f>
 8001474:	4603      	mov	r3, r0
 8001476:	60fb      	str	r3, [r7, #12]
    float accelRoll = atan2(pMPU9250->sensorData.ax, pMPU9250->sensorData.az) * RAD2DEG;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f86b 	bl	8000558 <__aeabi_f2d>
 8001482:	4604      	mov	r4, r0
 8001484:	460d      	mov	r5, r1
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f864 	bl	8000558 <__aeabi_f2d>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	ec43 2b11 	vmov	d1, r2, r3
 8001498:	ec45 4b10 	vmov	d0, r4, r5
 800149c:	f003 f8c2 	bl	8004624 <atan2>
 80014a0:	ec51 0b10 	vmov	r0, r1, d0
 80014a4:	a332      	add	r3, pc, #200	; (adr r3, 8001570 <MPU_calcAttitude+0x150>)
 80014a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014aa:	f7ff f8ad 	bl	8000608 <__aeabi_dmul>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f7ff fb41 	bl	8000b3c <__aeabi_d2f>
 80014ba:	4603      	mov	r3, r0
 80014bc:	60bb      	str	r3, [r7, #8]

    pMPU9250->attitude.r = pMPU9250->attitude.tau * (pMPU9250->attitude.r - pMPU9250->sensorData.gy * pMPU9250->attitude.dt) + (1 - pMPU9250->attitude.tau) * accelRoll;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	ed93 6a06 	vldr	s12, [r3, #24]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80014d6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80014da:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80014e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80014f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    pMPU9250->attitude.p = pMPU9250->attitude.tau * (pMPU9250->attitude.p - pMPU9250->sensorData.gx * pMPU9250->attitude.dt) + (1 - pMPU9250->attitude.tau) * accelPitch;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	ed93 6a05 	vldr	s12, [r3, #20]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800151a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800151e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001522:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800152c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001530:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001534:	edd7 7a03 	vldr	s15, [r7, #12]
 8001538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800153c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    pMPU9250->attitude.y += (pMPU9250->sensorData.gz * pMPU9250->attitude.dt);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	edd3 6a07 	vldr	s13, [r3, #28]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800155c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bdb0      	pop	{r4, r5, r7, pc}
 800156e:	bf00      	nop
 8001570:	1a63cbb0 	.word	0x1a63cbb0
 8001574:	404ca5dc 	.word	0x404ca5dc

08001578 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b37      	ldr	r3, [pc, #220]	; (8001670 <MX_GPIO_Init+0xf8>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a36      	ldr	r2, [pc, #216]	; (8001670 <MX_GPIO_Init+0xf8>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b34      	ldr	r3, [pc, #208]	; (8001670 <MX_GPIO_Init+0xf8>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b30      	ldr	r3, [pc, #192]	; (8001670 <MX_GPIO_Init+0xf8>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a2f      	ldr	r2, [pc, #188]	; (8001670 <MX_GPIO_Init+0xf8>)
 80015b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b2d      	ldr	r3, [pc, #180]	; (8001670 <MX_GPIO_Init+0xf8>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	4b29      	ldr	r3, [pc, #164]	; (8001670 <MX_GPIO_Init+0xf8>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a28      	ldr	r2, [pc, #160]	; (8001670 <MX_GPIO_Init+0xf8>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b26      	ldr	r3, [pc, #152]	; (8001670 <MX_GPIO_Init+0xf8>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	4b22      	ldr	r3, [pc, #136]	; (8001670 <MX_GPIO_Init+0xf8>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a21      	ldr	r2, [pc, #132]	; (8001670 <MX_GPIO_Init+0xf8>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <MX_GPIO_Init+0xf8>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	2120      	movs	r1, #32
 8001602:	481c      	ldr	r0, [pc, #112]	; (8001674 <MX_GPIO_Init+0xfc>)
 8001604:	f000 fe3c 	bl	8002280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001608:	2201      	movs	r2, #1
 800160a:	2140      	movs	r1, #64	; 0x40
 800160c:	481a      	ldr	r0, [pc, #104]	; (8001678 <MX_GPIO_Init+0x100>)
 800160e:	f000 fe37 	bl	8002280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001612:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001618:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800161c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	4814      	ldr	r0, [pc, #80]	; (800167c <MX_GPIO_Init+0x104>)
 800162a:	f000 fca5 	bl	8001f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800162e:	2320      	movs	r3, #32
 8001630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	2301      	movs	r3, #1
 8001634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	480b      	ldr	r0, [pc, #44]	; (8001674 <MX_GPIO_Init+0xfc>)
 8001646:	f000 fc97 	bl	8001f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800164a:	2340      	movs	r3, #64	; 0x40
 800164c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164e:	2301      	movs	r3, #1
 8001650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001656:	2302      	movs	r3, #2
 8001658:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_GPIO_Init+0x100>)
 8001662:	f000 fc89 	bl	8001f78 <HAL_GPIO_Init>

}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	; 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	40020000 	.word	0x40020000
 8001678:	40020400 	.word	0x40020400
 800167c:	40020800 	.word	0x40020800

08001680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001682:	b087      	sub	sp, #28
 8001684:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  MPU9250.settings.gFullScaleRange = GFS_500DPS;
 8001686:	4b63      	ldr	r3, [pc, #396]	; (8001814 <main+0x194>)
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  MPU9250.settings.aFullScaleRange = AFS_4G;
 800168e:	4b61      	ldr	r3, [pc, #388]	; (8001814 <main+0x194>)
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  MPU9250.settings.CS_PIN = GPIO_PIN_6;
 8001696:	4b5f      	ldr	r3, [pc, #380]	; (8001814 <main+0x194>)
 8001698:	2240      	movs	r2, #64	; 0x40
 800169a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  MPU9250.settings.CS_PORT = GPIOB;
 800169e:	4b5d      	ldr	r3, [pc, #372]	; (8001814 <main+0x194>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  MPU9250.attitude.tau = 0.98;
 80016a6:	4b5b      	ldr	r3, [pc, #364]	; (8001814 <main+0x194>)
 80016a8:	4a5b      	ldr	r2, [pc, #364]	; (8001818 <main+0x198>)
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
  MPU9250.attitude.dt = 0.004;
 80016ac:	4b59      	ldr	r3, [pc, #356]	; (8001814 <main+0x194>)
 80016ae:	4a5b      	ldr	r2, [pc, #364]	; (800181c <main+0x19c>)
 80016b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b2:	f000 fae5 	bl	8001c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b6:	f000 f8bd 	bl	8001834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ba:	f7ff ff5d 	bl	8001578 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016be:	f000 fa43 	bl	8001b48 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80016c2:	f000 f929 	bl	8001918 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  MPU_begin(&hspi1, &MPU9250);
 80016c6:	4953      	ldr	r1, [pc, #332]	; (8001814 <main+0x194>)
 80016c8:	4855      	ldr	r0, [pc, #340]	; (8001820 <main+0x1a0>)
 80016ca:	f7ff fc03 	bl	8000ed4 <MPU_begin>
  MPU_calibrateGyro(&hspi1, &MPU9250, CALIBRATION_POINTS);
 80016ce:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80016d2:	4950      	ldr	r1, [pc, #320]	; (8001814 <main+0x194>)
 80016d4:	4852      	ldr	r0, [pc, #328]	; (8001820 <main+0x1a0>)
 80016d6:	f7ff fdb7 	bl	8001248 <MPU_calibrateGyro>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MPU_calcAttitude(&hspi1, &MPU9250);
 80016da:	494e      	ldr	r1, [pc, #312]	; (8001814 <main+0x194>)
 80016dc:	4850      	ldr	r0, [pc, #320]	; (8001820 <main+0x1a0>)
 80016de:	f7ff fe9f 	bl	8001420 <MPU_calcAttitude>

    int16_t roll = roundf(10 * MPU9250.attitude.r);
 80016e2:	4b4c      	ldr	r3, [pc, #304]	; (8001814 <main+0x194>)
 80016e4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80016e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80016ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f0:	eeb0 0a67 	vmov.f32	s0, s15
 80016f4:	f002 ff70 	bl	80045d8 <roundf>
 80016f8:	eef0 7a40 	vmov.f32	s15, s0
 80016fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001700:	ee17 3a90 	vmov	r3, s15
 8001704:	80fb      	strh	r3, [r7, #6]
    int16_t pitch = roundf(10 * MPU9250.attitude.p);
 8001706:	4b43      	ldr	r3, [pc, #268]	; (8001814 <main+0x194>)
 8001708:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800170c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001710:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001714:	eeb0 0a67 	vmov.f32	s0, s15
 8001718:	f002 ff5e 	bl	80045d8 <roundf>
 800171c:	eef0 7a40 	vmov.f32	s15, s0
 8001720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001724:	ee17 3a90 	vmov	r3, s15
 8001728:	80bb      	strh	r3, [r7, #4]
    int16_t yaw = roundf(10 * MPU9250.attitude.y);
 800172a:	4b3a      	ldr	r3, [pc, #232]	; (8001814 <main+0x194>)
 800172c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001730:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001738:	eeb0 0a67 	vmov.f32	s0, s15
 800173c:	f002 ff4c 	bl	80045d8 <roundf>
 8001740:	eef0 7a40 	vmov.f32	s15, s0
 8001744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001748:	ee17 3a90 	vmov	r3, s15
 800174c:	807b      	strh	r3, [r7, #2]
    sprintf((char *)serialBuf, "%d.%d,%d.%d,%d.%d\r\n", roll/10, roll%10, pitch/10, pitch%10, yaw/10, yaw%10);
 800174e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001752:	4a34      	ldr	r2, [pc, #208]	; (8001824 <main+0x1a4>)
 8001754:	fb82 1203 	smull	r1, r2, r2, r3
 8001758:	1092      	asrs	r2, r2, #2
 800175a:	17db      	asrs	r3, r3, #31
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	b21b      	sxth	r3, r3
 8001760:	461e      	mov	r6, r3
 8001762:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001766:	4b2f      	ldr	r3, [pc, #188]	; (8001824 <main+0x1a4>)
 8001768:	fb83 1302 	smull	r1, r3, r3, r2
 800176c:	1099      	asrs	r1, r3, #2
 800176e:	17d3      	asrs	r3, r2, #31
 8001770:	1ac9      	subs	r1, r1, r3
 8001772:	460b      	mov	r3, r1
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	440b      	add	r3, r1
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	b21b      	sxth	r3, r3
 800177e:	469c      	mov	ip, r3
 8001780:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001784:	4a27      	ldr	r2, [pc, #156]	; (8001824 <main+0x1a4>)
 8001786:	fb82 1203 	smull	r1, r2, r2, r3
 800178a:	1092      	asrs	r2, r2, #2
 800178c:	17db      	asrs	r3, r3, #31
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	b21b      	sxth	r3, r3
 8001792:	4618      	mov	r0, r3
 8001794:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001798:	4b22      	ldr	r3, [pc, #136]	; (8001824 <main+0x1a4>)
 800179a:	fb83 1302 	smull	r1, r3, r3, r2
 800179e:	1099      	asrs	r1, r3, #2
 80017a0:	17d3      	asrs	r3, r2, #31
 80017a2:	1ac9      	subs	r1, r1, r3
 80017a4:	460b      	mov	r3, r1
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	461c      	mov	r4, r3
 80017b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80017b6:	4a1b      	ldr	r2, [pc, #108]	; (8001824 <main+0x1a4>)
 80017b8:	fb82 1203 	smull	r1, r2, r2, r3
 80017bc:	1092      	asrs	r2, r2, #2
 80017be:	17db      	asrs	r3, r3, #31
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	461d      	mov	r5, r3
 80017c6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <main+0x1a4>)
 80017cc:	fb83 1302 	smull	r1, r3, r3, r2
 80017d0:	1099      	asrs	r1, r3, #2
 80017d2:	17d3      	asrs	r3, r2, #31
 80017d4:	1ac9      	subs	r1, r1, r3
 80017d6:	460b      	mov	r3, r1
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	b21b      	sxth	r3, r3
 80017e2:	9303      	str	r3, [sp, #12]
 80017e4:	9502      	str	r5, [sp, #8]
 80017e6:	9401      	str	r4, [sp, #4]
 80017e8:	9000      	str	r0, [sp, #0]
 80017ea:	4663      	mov	r3, ip
 80017ec:	4632      	mov	r2, r6
 80017ee:	490e      	ldr	r1, [pc, #56]	; (8001828 <main+0x1a8>)
 80017f0:	480e      	ldr	r0, [pc, #56]	; (800182c <main+0x1ac>)
 80017f2:	f002 fac3 	bl	8003d7c <siprintf>
    HAL_UART_Transmit(&huart2, serialBuf, strlen((char *)serialBuf), HAL_MAX_DELAY);
 80017f6:	480d      	ldr	r0, [pc, #52]	; (800182c <main+0x1ac>)
 80017f8:	f7fe fcf2 	bl	80001e0 <strlen>
 80017fc:	4603      	mov	r3, r0
 80017fe:	b29a      	uxth	r2, r3
 8001800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001804:	4909      	ldr	r1, [pc, #36]	; (800182c <main+0x1ac>)
 8001806:	480a      	ldr	r0, [pc, #40]	; (8001830 <main+0x1b0>)
 8001808:	f001 ffbd 	bl	8003786 <HAL_UART_Transmit>

    HAL_Delay(4);
 800180c:	2004      	movs	r0, #4
 800180e:	f000 faa9 	bl	8001d64 <HAL_Delay>
  {
 8001812:	e762      	b.n	80016da <main+0x5a>
 8001814:	200000fc 	.word	0x200000fc
 8001818:	3f7ae148 	.word	0x3f7ae148
 800181c:	3b83126f 	.word	0x3b83126f
 8001820:	20000140 	.word	0x20000140
 8001824:	66666667 	.word	0x66666667
 8001828:	08004b30 	.word	0x08004b30
 800182c:	20000098 	.word	0x20000098
 8001830:	20000198 	.word	0x20000198

08001834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b094      	sub	sp, #80	; 0x50
 8001838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183a:	f107 0320 	add.w	r3, r7, #32
 800183e:	2230      	movs	r2, #48	; 0x30
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f002 fa92 	bl	8003d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	4b29      	ldr	r3, [pc, #164]	; (8001904 <SystemClock_Config+0xd0>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	4a28      	ldr	r2, [pc, #160]	; (8001904 <SystemClock_Config+0xd0>)
 8001862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001866:	6413      	str	r3, [r2, #64]	; 0x40
 8001868:	4b26      	ldr	r3, [pc, #152]	; (8001904 <SystemClock_Config+0xd0>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001874:	2300      	movs	r3, #0
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	4b23      	ldr	r3, [pc, #140]	; (8001908 <SystemClock_Config+0xd4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001880:	4a21      	ldr	r2, [pc, #132]	; (8001908 <SystemClock_Config+0xd4>)
 8001882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <SystemClock_Config+0xd4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001894:	2302      	movs	r3, #2
 8001896:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001898:	2301      	movs	r3, #1
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800189c:	2310      	movs	r3, #16
 800189e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a0:	2302      	movs	r3, #2
 80018a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018a4:	2300      	movs	r3, #0
 80018a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018a8:	2310      	movs	r3, #16
 80018aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80018b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018b2:	2304      	movs	r3, #4
 80018b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018b6:	2307      	movs	r3, #7
 80018b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ba:	f107 0320 	add.w	r3, r7, #32
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 fcf8 	bl	80022b4 <HAL_RCC_OscConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018ca:	f000 f81f 	bl	800190c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ce:	230f      	movs	r3, #15
 80018d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d2:	2302      	movs	r3, #2
 80018d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018e4:	f107 030c 	add.w	r3, r7, #12
 80018e8:	2102      	movs	r1, #2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 ff5a 	bl	80027a4 <HAL_RCC_ClockConfig>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018f6:	f000 f809 	bl	800190c <Error_Handler>
  }
}
 80018fa:	bf00      	nop
 80018fc:	3750      	adds	r7, #80	; 0x50
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	40007000 	.word	0x40007000

0800190c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001910:	b672      	cpsid	i
}
 8001912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001914:	e7fe      	b.n	8001914 <Error_Handler+0x8>
	...

08001918 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800191c:	4b17      	ldr	r3, [pc, #92]	; (800197c <MX_SPI1_Init+0x64>)
 800191e:	4a18      	ldr	r2, [pc, #96]	; (8001980 <MX_SPI1_Init+0x68>)
 8001920:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <MX_SPI1_Init+0x64>)
 8001924:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001928:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <MX_SPI1_Init+0x64>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <MX_SPI1_Init+0x64>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <MX_SPI1_Init+0x64>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <MX_SPI1_Init+0x64>)
 800193e:	2200      	movs	r2, #0
 8001940:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <MX_SPI1_Init+0x64>)
 8001944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001948:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <MX_SPI1_Init+0x64>)
 800194c:	2230      	movs	r2, #48	; 0x30
 800194e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <MX_SPI1_Init+0x64>)
 8001952:	2200      	movs	r2, #0
 8001954:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <MX_SPI1_Init+0x64>)
 8001958:	2200      	movs	r2, #0
 800195a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <MX_SPI1_Init+0x64>)
 800195e:	2200      	movs	r2, #0
 8001960:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <MX_SPI1_Init+0x64>)
 8001964:	220a      	movs	r2, #10
 8001966:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001968:	4804      	ldr	r0, [pc, #16]	; (800197c <MX_SPI1_Init+0x64>)
 800196a:	f001 f917 	bl	8002b9c <HAL_SPI_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001974:	f7ff ffca 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000140 	.word	0x20000140
 8001980:	40013000 	.word	0x40013000

08001984 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a19      	ldr	r2, [pc, #100]	; (8001a08 <HAL_SPI_MspInit+0x84>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d12b      	bne.n	80019fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <HAL_SPI_MspInit+0x88>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	4a17      	ldr	r2, [pc, #92]	; (8001a0c <HAL_SPI_MspInit+0x88>)
 80019b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019b4:	6453      	str	r3, [r2, #68]	; 0x44
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <HAL_SPI_MspInit+0x88>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <HAL_SPI_MspInit+0x88>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a10      	ldr	r2, [pc, #64]	; (8001a0c <HAL_SPI_MspInit+0x88>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <HAL_SPI_MspInit+0x88>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80019de:	2338      	movs	r3, #56	; 0x38
 80019e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ea:	2303      	movs	r3, #3
 80019ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ee:	2305      	movs	r3, #5
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	4805      	ldr	r0, [pc, #20]	; (8001a10 <HAL_SPI_MspInit+0x8c>)
 80019fa:	f000 fabd 	bl	8001f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	; 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40013000 	.word	0x40013000
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020400 	.word	0x40020400

08001a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <HAL_MspInit+0x4c>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	4a0f      	ldr	r2, [pc, #60]	; (8001a60 <HAL_MspInit+0x4c>)
 8001a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a28:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <HAL_MspInit+0x4c>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	603b      	str	r3, [r7, #0]
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_MspInit+0x4c>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <HAL_MspInit+0x4c>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_MspInit+0x4c>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a52:	2007      	movs	r0, #7
 8001a54:	f000 fa5c 	bl	8001f10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40023800 	.word	0x40023800

08001a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <NMI_Handler+0x4>

08001a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <HardFault_Handler+0x4>

08001a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <MemManage_Handler+0x4>

08001a76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <BusFault_Handler+0x4>

08001a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <UsageFault_Handler+0x4>

08001a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab0:	f000 f938 	bl	8001d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac0:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <_sbrk+0x5c>)
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <_sbrk+0x60>)
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <_sbrk+0x64>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d102      	bne.n	8001ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <_sbrk+0x64>)
 8001ad6:	4a12      	ldr	r2, [pc, #72]	; (8001b20 <_sbrk+0x68>)
 8001ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <_sbrk+0x64>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d207      	bcs.n	8001af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae8:	f002 f916 	bl	8003d18 <__errno>
 8001aec:	4603      	mov	r3, r0
 8001aee:	220c      	movs	r2, #12
 8001af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001af6:	e009      	b.n	8001b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <_sbrk+0x64>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <_sbrk+0x64>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <_sbrk+0x64>)
 8001b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20018000 	.word	0x20018000
 8001b18:	00000400 	.word	0x00000400
 8001b1c:	2000008c 	.word	0x2000008c
 8001b20:	200001f0 	.word	0x200001f0

08001b24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <SystemInit+0x20>)
 8001b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b2e:	4a05      	ldr	r2, [pc, #20]	; (8001b44 <SystemInit+0x20>)
 8001b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <MX_USART2_UART_Init+0x50>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b6e:	220c      	movs	r2, #12
 8001b70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b7e:	4805      	ldr	r0, [pc, #20]	; (8001b94 <MX_USART2_UART_Init+0x4c>)
 8001b80:	f001 fdb4 	bl	80036ec <HAL_UART_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b8a:	f7ff febf 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000198 	.word	0x20000198
 8001b98:	40004400 	.word	0x40004400

08001b9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a19      	ldr	r2, [pc, #100]	; (8001c20 <HAL_UART_MspInit+0x84>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d12b      	bne.n	8001c16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <HAL_UART_MspInit+0x88>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	4a17      	ldr	r2, [pc, #92]	; (8001c24 <HAL_UART_MspInit+0x88>)
 8001bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_UART_MspInit+0x88>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <HAL_UART_MspInit+0x88>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a10      	ldr	r2, [pc, #64]	; (8001c24 <HAL_UART_MspInit+0x88>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <HAL_UART_MspInit+0x88>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bf6:	230c      	movs	r3, #12
 8001bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c02:	2300      	movs	r3, #0
 8001c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c06:	2307      	movs	r3, #7
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	; (8001c28 <HAL_UART_MspInit+0x8c>)
 8001c12:	f000 f9b1 	bl	8001f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c16:	bf00      	nop
 8001c18:	3728      	adds	r7, #40	; 0x28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40004400 	.word	0x40004400
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020000 	.word	0x40020000

08001c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c30:	480d      	ldr	r0, [pc, #52]	; (8001c68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c32:	490e      	ldr	r1, [pc, #56]	; (8001c6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c34:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c38:	e002      	b.n	8001c40 <LoopCopyDataInit>

08001c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3e:	3304      	adds	r3, #4

08001c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c44:	d3f9      	bcc.n	8001c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c46:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c48:	4c0b      	ldr	r4, [pc, #44]	; (8001c78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c4c:	e001      	b.n	8001c52 <LoopFillZerobss>

08001c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c50:	3204      	adds	r2, #4

08001c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c54:	d3fb      	bcc.n	8001c4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c56:	f7ff ff65 	bl	8001b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c5a:	f002 f863 	bl	8003d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c5e:	f7ff fd0f 	bl	8001680 <main>
  bx  lr    
 8001c62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c6c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c70:	08004c10 	.word	0x08004c10
  ldr r2, =_sbss
 8001c74:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c78:	200001f0 	.word	0x200001f0

08001c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c7c:	e7fe      	b.n	8001c7c <ADC_IRQHandler>
	...

08001c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <HAL_Init+0x40>)
 8001c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_Init+0x40>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <HAL_Init+0x40>)
 8001c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <HAL_Init+0x40>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a07      	ldr	r2, [pc, #28]	; (8001cc0 <HAL_Init+0x40>)
 8001ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca8:	2003      	movs	r0, #3
 8001caa:	f000 f931 	bl	8001f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f000 f808 	bl	8001cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb4:	f7ff feae 	bl	8001a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023c00 	.word	0x40023c00

08001cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_InitTick+0x54>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_InitTick+0x58>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 f93b 	bl	8001f5e <HAL_SYSTICK_Config>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00e      	b.n	8001d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b0f      	cmp	r3, #15
 8001cf6:	d80a      	bhi.n	8001d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d00:	f000 f911 	bl	8001f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d04:	4a06      	ldr	r2, [pc, #24]	; (8001d20 <HAL_InitTick+0x5c>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e000      	b.n	8001d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	20000004 	.word	0x20000004

08001d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_IncTick+0x20>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_IncTick+0x24>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4413      	add	r3, r2
 8001d34:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <HAL_IncTick+0x24>)
 8001d36:	6013      	str	r3, [r2, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000008 	.word	0x20000008
 8001d48:	200001dc 	.word	0x200001dc

08001d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <HAL_GetTick+0x14>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	200001dc 	.word	0x200001dc

08001d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d6c:	f7ff ffee 	bl	8001d4c <HAL_GetTick>
 8001d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d7c:	d005      	beq.n	8001d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_Delay+0x44>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d8a:	bf00      	nop
 8001d8c:	f7ff ffde 	bl	8001d4c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d8f7      	bhi.n	8001d8c <HAL_Delay+0x28>
  {
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000008 	.word	0x20000008

08001dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dde:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	60d3      	str	r3, [r2, #12]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <__NVIC_GetPriorityGrouping+0x18>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	f003 0307 	and.w	r3, r3, #7
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	6039      	str	r1, [r7, #0]
 8001e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	db0a      	blt.n	8001e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	490c      	ldr	r1, [pc, #48]	; (8001e5c <__NVIC_SetPriority+0x4c>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	0112      	lsls	r2, r2, #4
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	440b      	add	r3, r1
 8001e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e38:	e00a      	b.n	8001e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4908      	ldr	r1, [pc, #32]	; (8001e60 <__NVIC_SetPriority+0x50>)
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	3b04      	subs	r3, #4
 8001e48:	0112      	lsls	r2, r2, #4
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	761a      	strb	r2, [r3, #24]
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000e100 	.word	0xe000e100
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b089      	sub	sp, #36	; 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f1c3 0307 	rsb	r3, r3, #7
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	bf28      	it	cs
 8001e82:	2304      	movcs	r3, #4
 8001e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	2b06      	cmp	r3, #6
 8001e8c:	d902      	bls.n	8001e94 <NVIC_EncodePriority+0x30>
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3b03      	subs	r3, #3
 8001e92:	e000      	b.n	8001e96 <NVIC_EncodePriority+0x32>
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43da      	mvns	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	43d9      	mvns	r1, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	4313      	orrs	r3, r2
         );
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3724      	adds	r7, #36	; 0x24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001edc:	d301      	bcc.n	8001ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00f      	b.n	8001f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <SysTick_Config+0x40>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eea:	210f      	movs	r1, #15
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ef0:	f7ff ff8e 	bl	8001e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <SysTick_Config+0x40>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001efa:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <SysTick_Config+0x40>)
 8001efc:	2207      	movs	r2, #7
 8001efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	e000e010 	.word	0xe000e010

08001f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ff47 	bl	8001dac <__NVIC_SetPriorityGrouping>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f38:	f7ff ff5c 	bl	8001df4 <__NVIC_GetPriorityGrouping>
 8001f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	6978      	ldr	r0, [r7, #20]
 8001f44:	f7ff ff8e 	bl	8001e64 <NVIC_EncodePriority>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff ff5d 	bl	8001e10 <__NVIC_SetPriority>
}
 8001f56:	bf00      	nop
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff ffb0 	bl	8001ecc <SysTick_Config>
 8001f6c:	4603      	mov	r3, r0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	; 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	e159      	b.n	8002248 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f94:	2201      	movs	r2, #1
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	f040 8148 	bne.w	8002242 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d005      	beq.n	8001fca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d130      	bne.n	800202c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002000:	2201      	movs	r2, #1
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 0201 	and.w	r2, r3, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b03      	cmp	r3, #3
 8002036:	d017      	beq.n	8002068 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	2203      	movs	r2, #3
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d123      	bne.n	80020bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	08da      	lsrs	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3208      	adds	r2, #8
 800207c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002080:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	220f      	movs	r2, #15
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	08da      	lsrs	r2, r3, #3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3208      	adds	r2, #8
 80020b6:	69b9      	ldr	r1, [r7, #24]
 80020b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	2203      	movs	r2, #3
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0203 	and.w	r2, r3, #3
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 80a2 	beq.w	8002242 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b57      	ldr	r3, [pc, #348]	; (8002260 <HAL_GPIO_Init+0x2e8>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	4a56      	ldr	r2, [pc, #344]	; (8002260 <HAL_GPIO_Init+0x2e8>)
 8002108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800210c:	6453      	str	r3, [r2, #68]	; 0x44
 800210e:	4b54      	ldr	r3, [pc, #336]	; (8002260 <HAL_GPIO_Init+0x2e8>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800211a:	4a52      	ldr	r2, [pc, #328]	; (8002264 <HAL_GPIO_Init+0x2ec>)
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	089b      	lsrs	r3, r3, #2
 8002120:	3302      	adds	r3, #2
 8002122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	220f      	movs	r2, #15
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a49      	ldr	r2, [pc, #292]	; (8002268 <HAL_GPIO_Init+0x2f0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d019      	beq.n	800217a <HAL_GPIO_Init+0x202>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a48      	ldr	r2, [pc, #288]	; (800226c <HAL_GPIO_Init+0x2f4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d013      	beq.n	8002176 <HAL_GPIO_Init+0x1fe>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a47      	ldr	r2, [pc, #284]	; (8002270 <HAL_GPIO_Init+0x2f8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00d      	beq.n	8002172 <HAL_GPIO_Init+0x1fa>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a46      	ldr	r2, [pc, #280]	; (8002274 <HAL_GPIO_Init+0x2fc>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d007      	beq.n	800216e <HAL_GPIO_Init+0x1f6>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a45      	ldr	r2, [pc, #276]	; (8002278 <HAL_GPIO_Init+0x300>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d101      	bne.n	800216a <HAL_GPIO_Init+0x1f2>
 8002166:	2304      	movs	r3, #4
 8002168:	e008      	b.n	800217c <HAL_GPIO_Init+0x204>
 800216a:	2307      	movs	r3, #7
 800216c:	e006      	b.n	800217c <HAL_GPIO_Init+0x204>
 800216e:	2303      	movs	r3, #3
 8002170:	e004      	b.n	800217c <HAL_GPIO_Init+0x204>
 8002172:	2302      	movs	r3, #2
 8002174:	e002      	b.n	800217c <HAL_GPIO_Init+0x204>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <HAL_GPIO_Init+0x204>
 800217a:	2300      	movs	r3, #0
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	f002 0203 	and.w	r2, r2, #3
 8002182:	0092      	lsls	r2, r2, #2
 8002184:	4093      	lsls	r3, r2
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800218c:	4935      	ldr	r1, [pc, #212]	; (8002264 <HAL_GPIO_Init+0x2ec>)
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	089b      	lsrs	r3, r3, #2
 8002192:	3302      	adds	r3, #2
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800219a:	4b38      	ldr	r3, [pc, #224]	; (800227c <HAL_GPIO_Init+0x304>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021be:	4a2f      	ldr	r2, [pc, #188]	; (800227c <HAL_GPIO_Init+0x304>)
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021c4:	4b2d      	ldr	r3, [pc, #180]	; (800227c <HAL_GPIO_Init+0x304>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021e8:	4a24      	ldr	r2, [pc, #144]	; (800227c <HAL_GPIO_Init+0x304>)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ee:	4b23      	ldr	r3, [pc, #140]	; (800227c <HAL_GPIO_Init+0x304>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002212:	4a1a      	ldr	r2, [pc, #104]	; (800227c <HAL_GPIO_Init+0x304>)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002218:	4b18      	ldr	r3, [pc, #96]	; (800227c <HAL_GPIO_Init+0x304>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800223c:	4a0f      	ldr	r2, [pc, #60]	; (800227c <HAL_GPIO_Init+0x304>)
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3301      	adds	r3, #1
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	2b0f      	cmp	r3, #15
 800224c:	f67f aea2 	bls.w	8001f94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3724      	adds	r7, #36	; 0x24
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800
 8002264:	40013800 	.word	0x40013800
 8002268:	40020000 	.word	0x40020000
 800226c:	40020400 	.word	0x40020400
 8002270:	40020800 	.word	0x40020800
 8002274:	40020c00 	.word	0x40020c00
 8002278:	40021000 	.word	0x40021000
 800227c:	40013c00 	.word	0x40013c00

08002280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	807b      	strh	r3, [r7, #2]
 800228c:	4613      	mov	r3, r2
 800228e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002290:	787b      	ldrb	r3, [r7, #1]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002296:	887a      	ldrh	r2, [r7, #2]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800229c:	e003      	b.n	80022a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800229e:	887b      	ldrh	r3, [r7, #2]
 80022a0:	041a      	lsls	r2, r3, #16
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	619a      	str	r2, [r3, #24]
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e264      	b.n	8002790 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d075      	beq.n	80023be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022d2:	4ba3      	ldr	r3, [pc, #652]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d00c      	beq.n	80022f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022de:	4ba0      	ldr	r3, [pc, #640]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d112      	bne.n	8002310 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ea:	4b9d      	ldr	r3, [pc, #628]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022f6:	d10b      	bne.n	8002310 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f8:	4b99      	ldr	r3, [pc, #612]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d05b      	beq.n	80023bc <HAL_RCC_OscConfig+0x108>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d157      	bne.n	80023bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e23f      	b.n	8002790 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002318:	d106      	bne.n	8002328 <HAL_RCC_OscConfig+0x74>
 800231a:	4b91      	ldr	r3, [pc, #580]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a90      	ldr	r2, [pc, #576]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 8002320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e01d      	b.n	8002364 <HAL_RCC_OscConfig+0xb0>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002330:	d10c      	bne.n	800234c <HAL_RCC_OscConfig+0x98>
 8002332:	4b8b      	ldr	r3, [pc, #556]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a8a      	ldr	r2, [pc, #552]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 8002338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	4b88      	ldr	r3, [pc, #544]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a87      	ldr	r2, [pc, #540]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 8002344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	e00b      	b.n	8002364 <HAL_RCC_OscConfig+0xb0>
 800234c:	4b84      	ldr	r3, [pc, #528]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a83      	ldr	r2, [pc, #524]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 8002352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	4b81      	ldr	r3, [pc, #516]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a80      	ldr	r2, [pc, #512]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 800235e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d013      	beq.n	8002394 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7ff fcee 	bl	8001d4c <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002374:	f7ff fcea 	bl	8001d4c <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b64      	cmp	r3, #100	; 0x64
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e204      	b.n	8002790 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002386:	4b76      	ldr	r3, [pc, #472]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCC_OscConfig+0xc0>
 8002392:	e014      	b.n	80023be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7ff fcda 	bl	8001d4c <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800239c:	f7ff fcd6 	bl	8001d4c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b64      	cmp	r3, #100	; 0x64
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e1f0      	b.n	8002790 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ae:	4b6c      	ldr	r3, [pc, #432]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0xe8>
 80023ba:	e000      	b.n	80023be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d063      	beq.n	8002492 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ca:	4b65      	ldr	r3, [pc, #404]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00b      	beq.n	80023ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023d6:	4b62      	ldr	r3, [pc, #392]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d11c      	bne.n	800241c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023e2:	4b5f      	ldr	r3, [pc, #380]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d116      	bne.n	800241c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ee:	4b5c      	ldr	r3, [pc, #368]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d005      	beq.n	8002406 <HAL_RCC_OscConfig+0x152>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d001      	beq.n	8002406 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e1c4      	b.n	8002790 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002406:	4b56      	ldr	r3, [pc, #344]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4952      	ldr	r1, [pc, #328]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 8002416:	4313      	orrs	r3, r2
 8002418:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241a:	e03a      	b.n	8002492 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d020      	beq.n	8002466 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002424:	4b4f      	ldr	r3, [pc, #316]	; (8002564 <HAL_RCC_OscConfig+0x2b0>)
 8002426:	2201      	movs	r2, #1
 8002428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242a:	f7ff fc8f 	bl	8001d4c <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002432:	f7ff fc8b 	bl	8001d4c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e1a5      	b.n	8002790 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002444:	4b46      	ldr	r3, [pc, #280]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002450:	4b43      	ldr	r3, [pc, #268]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4940      	ldr	r1, [pc, #256]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 8002460:	4313      	orrs	r3, r2
 8002462:	600b      	str	r3, [r1, #0]
 8002464:	e015      	b.n	8002492 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002466:	4b3f      	ldr	r3, [pc, #252]	; (8002564 <HAL_RCC_OscConfig+0x2b0>)
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246c:	f7ff fc6e 	bl	8001d4c <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002474:	f7ff fc6a 	bl	8001d4c <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e184      	b.n	8002790 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002486:	4b36      	ldr	r3, [pc, #216]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d030      	beq.n	8002500 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d016      	beq.n	80024d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024a6:	4b30      	ldr	r3, [pc, #192]	; (8002568 <HAL_RCC_OscConfig+0x2b4>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ac:	f7ff fc4e 	bl	8001d4c <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024b4:	f7ff fc4a 	bl	8001d4c <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e164      	b.n	8002790 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c6:	4b26      	ldr	r3, [pc, #152]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0x200>
 80024d2:	e015      	b.n	8002500 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d4:	4b24      	ldr	r3, [pc, #144]	; (8002568 <HAL_RCC_OscConfig+0x2b4>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024da:	f7ff fc37 	bl	8001d4c <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e2:	f7ff fc33 	bl	8001d4c <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e14d      	b.n	8002790 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f4:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 80024f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f0      	bne.n	80024e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80a0 	beq.w	800264e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250e:	2300      	movs	r3, #0
 8002510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002512:	4b13      	ldr	r3, [pc, #76]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10f      	bne.n	800253e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	4a0e      	ldr	r2, [pc, #56]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252c:	6413      	str	r3, [r2, #64]	; 0x40
 800252e:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <HAL_RCC_OscConfig+0x2ac>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800253a:	2301      	movs	r3, #1
 800253c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253e:	4b0b      	ldr	r3, [pc, #44]	; (800256c <HAL_RCC_OscConfig+0x2b8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002546:	2b00      	cmp	r3, #0
 8002548:	d121      	bne.n	800258e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800254a:	4b08      	ldr	r3, [pc, #32]	; (800256c <HAL_RCC_OscConfig+0x2b8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a07      	ldr	r2, [pc, #28]	; (800256c <HAL_RCC_OscConfig+0x2b8>)
 8002550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002556:	f7ff fbf9 	bl	8001d4c <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255c:	e011      	b.n	8002582 <HAL_RCC_OscConfig+0x2ce>
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800
 8002564:	42470000 	.word	0x42470000
 8002568:	42470e80 	.word	0x42470e80
 800256c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002570:	f7ff fbec 	bl	8001d4c <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e106      	b.n	8002790 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002582:	4b85      	ldr	r3, [pc, #532]	; (8002798 <HAL_RCC_OscConfig+0x4e4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d106      	bne.n	80025a4 <HAL_RCC_OscConfig+0x2f0>
 8002596:	4b81      	ldr	r3, [pc, #516]	; (800279c <HAL_RCC_OscConfig+0x4e8>)
 8002598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259a:	4a80      	ldr	r2, [pc, #512]	; (800279c <HAL_RCC_OscConfig+0x4e8>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6713      	str	r3, [r2, #112]	; 0x70
 80025a2:	e01c      	b.n	80025de <HAL_RCC_OscConfig+0x32a>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b05      	cmp	r3, #5
 80025aa:	d10c      	bne.n	80025c6 <HAL_RCC_OscConfig+0x312>
 80025ac:	4b7b      	ldr	r3, [pc, #492]	; (800279c <HAL_RCC_OscConfig+0x4e8>)
 80025ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b0:	4a7a      	ldr	r2, [pc, #488]	; (800279c <HAL_RCC_OscConfig+0x4e8>)
 80025b2:	f043 0304 	orr.w	r3, r3, #4
 80025b6:	6713      	str	r3, [r2, #112]	; 0x70
 80025b8:	4b78      	ldr	r3, [pc, #480]	; (800279c <HAL_RCC_OscConfig+0x4e8>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025bc:	4a77      	ldr	r2, [pc, #476]	; (800279c <HAL_RCC_OscConfig+0x4e8>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	6713      	str	r3, [r2, #112]	; 0x70
 80025c4:	e00b      	b.n	80025de <HAL_RCC_OscConfig+0x32a>
 80025c6:	4b75      	ldr	r3, [pc, #468]	; (800279c <HAL_RCC_OscConfig+0x4e8>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ca:	4a74      	ldr	r2, [pc, #464]	; (800279c <HAL_RCC_OscConfig+0x4e8>)
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	6713      	str	r3, [r2, #112]	; 0x70
 80025d2:	4b72      	ldr	r3, [pc, #456]	; (800279c <HAL_RCC_OscConfig+0x4e8>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d6:	4a71      	ldr	r2, [pc, #452]	; (800279c <HAL_RCC_OscConfig+0x4e8>)
 80025d8:	f023 0304 	bic.w	r3, r3, #4
 80025dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d015      	beq.n	8002612 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e6:	f7ff fbb1 	bl	8001d4c <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ec:	e00a      	b.n	8002604 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f7ff fbad 	bl	8001d4c <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e0c5      	b.n	8002790 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002604:	4b65      	ldr	r3, [pc, #404]	; (800279c <HAL_RCC_OscConfig+0x4e8>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0ee      	beq.n	80025ee <HAL_RCC_OscConfig+0x33a>
 8002610:	e014      	b.n	800263c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002612:	f7ff fb9b 	bl	8001d4c <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002618:	e00a      	b.n	8002630 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800261a:	f7ff fb97 	bl	8001d4c <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	f241 3288 	movw	r2, #5000	; 0x1388
 8002628:	4293      	cmp	r3, r2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e0af      	b.n	8002790 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002630:	4b5a      	ldr	r3, [pc, #360]	; (800279c <HAL_RCC_OscConfig+0x4e8>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1ee      	bne.n	800261a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800263c:	7dfb      	ldrb	r3, [r7, #23]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d105      	bne.n	800264e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002642:	4b56      	ldr	r3, [pc, #344]	; (800279c <HAL_RCC_OscConfig+0x4e8>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4a55      	ldr	r2, [pc, #340]	; (800279c <HAL_RCC_OscConfig+0x4e8>)
 8002648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800264c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 809b 	beq.w	800278e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002658:	4b50      	ldr	r3, [pc, #320]	; (800279c <HAL_RCC_OscConfig+0x4e8>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	2b08      	cmp	r3, #8
 8002662:	d05c      	beq.n	800271e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d141      	bne.n	80026f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266c:	4b4c      	ldr	r3, [pc, #304]	; (80027a0 <HAL_RCC_OscConfig+0x4ec>)
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002672:	f7ff fb6b 	bl	8001d4c <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800267a:	f7ff fb67 	bl	8001d4c <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e081      	b.n	8002790 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268c:	4b43      	ldr	r3, [pc, #268]	; (800279c <HAL_RCC_OscConfig+0x4e8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f0      	bne.n	800267a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69da      	ldr	r2, [r3, #28]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	019b      	lsls	r3, r3, #6
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ae:	085b      	lsrs	r3, r3, #1
 80026b0:	3b01      	subs	r3, #1
 80026b2:	041b      	lsls	r3, r3, #16
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ba:	061b      	lsls	r3, r3, #24
 80026bc:	4937      	ldr	r1, [pc, #220]	; (800279c <HAL_RCC_OscConfig+0x4e8>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c2:	4b37      	ldr	r3, [pc, #220]	; (80027a0 <HAL_RCC_OscConfig+0x4ec>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7ff fb40 	bl	8001d4c <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d0:	f7ff fb3c 	bl	8001d4c <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e056      	b.n	8002790 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e2:	4b2e      	ldr	r3, [pc, #184]	; (800279c <HAL_RCC_OscConfig+0x4e8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x41c>
 80026ee:	e04e      	b.n	800278e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f0:	4b2b      	ldr	r3, [pc, #172]	; (80027a0 <HAL_RCC_OscConfig+0x4ec>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f6:	f7ff fb29 	bl	8001d4c <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fe:	f7ff fb25 	bl	8001d4c <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e03f      	b.n	8002790 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002710:	4b22      	ldr	r3, [pc, #136]	; (800279c <HAL_RCC_OscConfig+0x4e8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f0      	bne.n	80026fe <HAL_RCC_OscConfig+0x44a>
 800271c:	e037      	b.n	800278e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e032      	b.n	8002790 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800272a:	4b1c      	ldr	r3, [pc, #112]	; (800279c <HAL_RCC_OscConfig+0x4e8>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d028      	beq.n	800278a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002742:	429a      	cmp	r2, r3
 8002744:	d121      	bne.n	800278a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002750:	429a      	cmp	r2, r3
 8002752:	d11a      	bne.n	800278a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800275a:	4013      	ands	r3, r2
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002760:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002762:	4293      	cmp	r3, r2
 8002764:	d111      	bne.n	800278a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002770:	085b      	lsrs	r3, r3, #1
 8002772:	3b01      	subs	r3, #1
 8002774:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002776:	429a      	cmp	r2, r3
 8002778:	d107      	bne.n	800278a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002786:	429a      	cmp	r2, r3
 8002788:	d001      	beq.n	800278e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40007000 	.word	0x40007000
 800279c:	40023800 	.word	0x40023800
 80027a0:	42470060 	.word	0x42470060

080027a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0cc      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027b8:	4b68      	ldr	r3, [pc, #416]	; (800295c <HAL_RCC_ClockConfig+0x1b8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d90c      	bls.n	80027e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c6:	4b65      	ldr	r3, [pc, #404]	; (800295c <HAL_RCC_ClockConfig+0x1b8>)
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ce:	4b63      	ldr	r3, [pc, #396]	; (800295c <HAL_RCC_ClockConfig+0x1b8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d001      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e0b8      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d020      	beq.n	800282e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027f8:	4b59      	ldr	r3, [pc, #356]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	4a58      	ldr	r2, [pc, #352]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002802:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002810:	4b53      	ldr	r3, [pc, #332]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a52      	ldr	r2, [pc, #328]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800281a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800281c:	4b50      	ldr	r3, [pc, #320]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	494d      	ldr	r1, [pc, #308]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d044      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d107      	bne.n	8002852 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	4b47      	ldr	r3, [pc, #284]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d119      	bne.n	8002882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e07f      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d003      	beq.n	8002862 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800285e:	2b03      	cmp	r3, #3
 8002860:	d107      	bne.n	8002872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002862:	4b3f      	ldr	r3, [pc, #252]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d109      	bne.n	8002882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e06f      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002872:	4b3b      	ldr	r3, [pc, #236]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e067      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002882:	4b37      	ldr	r3, [pc, #220]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f023 0203 	bic.w	r2, r3, #3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	4934      	ldr	r1, [pc, #208]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	4313      	orrs	r3, r2
 8002892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002894:	f7ff fa5a 	bl	8001d4c <HAL_GetTick>
 8002898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800289c:	f7ff fa56 	bl	8001d4c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e04f      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	4b2b      	ldr	r3, [pc, #172]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 020c 	and.w	r2, r3, #12
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d1eb      	bne.n	800289c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028c4:	4b25      	ldr	r3, [pc, #148]	; (800295c <HAL_RCC_ClockConfig+0x1b8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d20c      	bcs.n	80028ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d2:	4b22      	ldr	r3, [pc, #136]	; (800295c <HAL_RCC_ClockConfig+0x1b8>)
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028da:	4b20      	ldr	r3, [pc, #128]	; (800295c <HAL_RCC_ClockConfig+0x1b8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d001      	beq.n	80028ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e032      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f8:	4b19      	ldr	r3, [pc, #100]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4916      	ldr	r1, [pc, #88]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	4313      	orrs	r3, r2
 8002908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d009      	beq.n	800292a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	490e      	ldr	r1, [pc, #56]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800292a:	f000 f821 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 800292e:	4602      	mov	r2, r0
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	490a      	ldr	r1, [pc, #40]	; (8002964 <HAL_RCC_ClockConfig+0x1c0>)
 800293c:	5ccb      	ldrb	r3, [r1, r3]
 800293e:	fa22 f303 	lsr.w	r3, r2, r3
 8002942:	4a09      	ldr	r2, [pc, #36]	; (8002968 <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <HAL_RCC_ClockConfig+0x1c8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff f9ba 	bl	8001cc4 <HAL_InitTick>

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40023c00 	.word	0x40023c00
 8002960:	40023800 	.word	0x40023800
 8002964:	08004b44 	.word	0x08004b44
 8002968:	20000000 	.word	0x20000000
 800296c:	20000004 	.word	0x20000004

08002970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002970:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002974:	b084      	sub	sp, #16
 8002976:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	607b      	str	r3, [r7, #4]
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	2300      	movs	r3, #0
 8002982:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002988:	4b67      	ldr	r3, [pc, #412]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b08      	cmp	r3, #8
 8002992:	d00d      	beq.n	80029b0 <HAL_RCC_GetSysClockFreq+0x40>
 8002994:	2b08      	cmp	r3, #8
 8002996:	f200 80bd 	bhi.w	8002b14 <HAL_RCC_GetSysClockFreq+0x1a4>
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0x34>
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d003      	beq.n	80029aa <HAL_RCC_GetSysClockFreq+0x3a>
 80029a2:	e0b7      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029a4:	4b61      	ldr	r3, [pc, #388]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029a6:	60bb      	str	r3, [r7, #8]
       break;
 80029a8:	e0b7      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029aa:	4b61      	ldr	r3, [pc, #388]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80029ac:	60bb      	str	r3, [r7, #8]
      break;
 80029ae:	e0b4      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b0:	4b5d      	ldr	r3, [pc, #372]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ba:	4b5b      	ldr	r3, [pc, #364]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d04d      	beq.n	8002a62 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c6:	4b58      	ldr	r3, [pc, #352]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	099b      	lsrs	r3, r3, #6
 80029cc:	461a      	mov	r2, r3
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029d6:	f04f 0100 	mov.w	r1, #0
 80029da:	ea02 0800 	and.w	r8, r2, r0
 80029de:	ea03 0901 	and.w	r9, r3, r1
 80029e2:	4640      	mov	r0, r8
 80029e4:	4649      	mov	r1, r9
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	014b      	lsls	r3, r1, #5
 80029f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029f4:	0142      	lsls	r2, r0, #5
 80029f6:	4610      	mov	r0, r2
 80029f8:	4619      	mov	r1, r3
 80029fa:	ebb0 0008 	subs.w	r0, r0, r8
 80029fe:	eb61 0109 	sbc.w	r1, r1, r9
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	018b      	lsls	r3, r1, #6
 8002a0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a10:	0182      	lsls	r2, r0, #6
 8002a12:	1a12      	subs	r2, r2, r0
 8002a14:	eb63 0301 	sbc.w	r3, r3, r1
 8002a18:	f04f 0000 	mov.w	r0, #0
 8002a1c:	f04f 0100 	mov.w	r1, #0
 8002a20:	00d9      	lsls	r1, r3, #3
 8002a22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a26:	00d0      	lsls	r0, r2, #3
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	eb12 0208 	adds.w	r2, r2, r8
 8002a30:	eb43 0309 	adc.w	r3, r3, r9
 8002a34:	f04f 0000 	mov.w	r0, #0
 8002a38:	f04f 0100 	mov.w	r1, #0
 8002a3c:	0259      	lsls	r1, r3, #9
 8002a3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002a42:	0250      	lsls	r0, r2, #9
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	f7fe f8c2 	bl	8000bdc <__aeabi_uldivmod>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	e04a      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a62:	4b31      	ldr	r3, [pc, #196]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	099b      	lsrs	r3, r3, #6
 8002a68:	461a      	mov	r2, r3
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a72:	f04f 0100 	mov.w	r1, #0
 8002a76:	ea02 0400 	and.w	r4, r2, r0
 8002a7a:	ea03 0501 	and.w	r5, r3, r1
 8002a7e:	4620      	mov	r0, r4
 8002a80:	4629      	mov	r1, r5
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	014b      	lsls	r3, r1, #5
 8002a8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a90:	0142      	lsls	r2, r0, #5
 8002a92:	4610      	mov	r0, r2
 8002a94:	4619      	mov	r1, r3
 8002a96:	1b00      	subs	r0, r0, r4
 8002a98:	eb61 0105 	sbc.w	r1, r1, r5
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	018b      	lsls	r3, r1, #6
 8002aa6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002aaa:	0182      	lsls	r2, r0, #6
 8002aac:	1a12      	subs	r2, r2, r0
 8002aae:	eb63 0301 	sbc.w	r3, r3, r1
 8002ab2:	f04f 0000 	mov.w	r0, #0
 8002ab6:	f04f 0100 	mov.w	r1, #0
 8002aba:	00d9      	lsls	r1, r3, #3
 8002abc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ac0:	00d0      	lsls	r0, r2, #3
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	1912      	adds	r2, r2, r4
 8002ac8:	eb45 0303 	adc.w	r3, r5, r3
 8002acc:	f04f 0000 	mov.w	r0, #0
 8002ad0:	f04f 0100 	mov.w	r1, #0
 8002ad4:	0299      	lsls	r1, r3, #10
 8002ad6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ada:	0290      	lsls	r0, r2, #10
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	f7fe f876 	bl	8000bdc <__aeabi_uldivmod>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4613      	mov	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	0c1b      	lsrs	r3, r3, #16
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	3301      	adds	r3, #1
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b10:	60bb      	str	r3, [r7, #8]
      break;
 8002b12:	e002      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b16:	60bb      	str	r3, [r7, #8]
      break;
 8002b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	00f42400 	.word	0x00f42400
 8002b30:	007a1200 	.word	0x007a1200

08002b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b38:	4b03      	ldr	r3, [pc, #12]	; (8002b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	20000000 	.word	0x20000000

08002b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b50:	f7ff fff0 	bl	8002b34 <HAL_RCC_GetHCLKFreq>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	0a9b      	lsrs	r3, r3, #10
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	4903      	ldr	r1, [pc, #12]	; (8002b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b62:	5ccb      	ldrb	r3, [r1, r3]
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	08004b54 	.word	0x08004b54

08002b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b78:	f7ff ffdc 	bl	8002b34 <HAL_RCC_GetHCLKFreq>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	0b5b      	lsrs	r3, r3, #13
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	4903      	ldr	r1, [pc, #12]	; (8002b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b8a:	5ccb      	ldrb	r3, [r1, r3]
 8002b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40023800 	.word	0x40023800
 8002b98:	08004b54 	.word	0x08004b54

08002b9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e07b      	b.n	8002ca6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d108      	bne.n	8002bc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bbe:	d009      	beq.n	8002bd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	61da      	str	r2, [r3, #28]
 8002bc6:	e005      	b.n	8002bd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fe fec8 	bl	8001984 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c58:	ea42 0103 	orr.w	r1, r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	0c1b      	lsrs	r3, r3, #16
 8002c72:	f003 0104 	and.w	r1, r3, #4
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	f003 0210 	and.w	r2, r3, #16
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b088      	sub	sp, #32
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	603b      	str	r3, [r7, #0]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_SPI_Transmit+0x22>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e126      	b.n	8002f1e <HAL_SPI_Transmit+0x270>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cd8:	f7ff f838 	bl	8001d4c <HAL_GetTick>
 8002cdc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d002      	beq.n	8002cf4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cf2:	e10b      	b.n	8002f0c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <HAL_SPI_Transmit+0x52>
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d102      	bne.n	8002d06 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d04:	e102      	b.n	8002f0c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2203      	movs	r2, #3
 8002d0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	88fa      	ldrh	r2, [r7, #6]
 8002d1e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	88fa      	ldrh	r2, [r7, #6]
 8002d24:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d4c:	d10f      	bne.n	8002d6e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d78:	2b40      	cmp	r3, #64	; 0x40
 8002d7a:	d007      	beq.n	8002d8c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d94:	d14b      	bne.n	8002e2e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_SPI_Transmit+0xf6>
 8002d9e:	8afb      	ldrh	r3, [r7, #22]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d13e      	bne.n	8002e22 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	881a      	ldrh	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	1c9a      	adds	r2, r3, #2
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002dc8:	e02b      	b.n	8002e22 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d112      	bne.n	8002dfe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	881a      	ldrh	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	1c9a      	adds	r2, r3, #2
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dfc:	e011      	b.n	8002e22 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dfe:	f7fe ffa5 	bl	8001d4c <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d803      	bhi.n	8002e16 <HAL_SPI_Transmit+0x168>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e14:	d102      	bne.n	8002e1c <HAL_SPI_Transmit+0x16e>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e20:	e074      	b.n	8002f0c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1ce      	bne.n	8002dca <HAL_SPI_Transmit+0x11c>
 8002e2c:	e04c      	b.n	8002ec8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <HAL_SPI_Transmit+0x18e>
 8002e36:	8afb      	ldrh	r3, [r7, #22]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d140      	bne.n	8002ebe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	330c      	adds	r3, #12
 8002e46:	7812      	ldrb	r2, [r2, #0]
 8002e48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e62:	e02c      	b.n	8002ebe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d113      	bne.n	8002e9a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	330c      	adds	r3, #12
 8002e7c:	7812      	ldrb	r2, [r2, #0]
 8002e7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e98:	e011      	b.n	8002ebe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e9a:	f7fe ff57 	bl	8001d4c <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d803      	bhi.n	8002eb2 <HAL_SPI_Transmit+0x204>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eb0:	d102      	bne.n	8002eb8 <HAL_SPI_Transmit+0x20a>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d102      	bne.n	8002ebe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ebc:	e026      	b.n	8002f0c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1cd      	bne.n	8002e64 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	6839      	ldr	r1, [r7, #0]
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 fbcb 	bl	8003668 <SPI_EndRxTxTransaction>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10a      	bne.n	8002efc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	77fb      	strb	r3, [r7, #31]
 8002f08:	e000      	b.n	8002f0c <HAL_SPI_Transmit+0x25e>
  }

error:
 8002f0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3720      	adds	r7, #32
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b088      	sub	sp, #32
 8002f2a:	af02      	add	r7, sp, #8
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	603b      	str	r3, [r7, #0]
 8002f32:	4613      	mov	r3, r2
 8002f34:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f42:	d112      	bne.n	8002f6a <HAL_SPI_Receive+0x44>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10e      	bne.n	8002f6a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2204      	movs	r2, #4
 8002f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f54:	88fa      	ldrh	r2, [r7, #6]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f8f1 	bl	8003148 <HAL_SPI_TransmitReceive>
 8002f66:	4603      	mov	r3, r0
 8002f68:	e0ea      	b.n	8003140 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_SPI_Receive+0x52>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e0e3      	b.n	8003140 <HAL_SPI_Receive+0x21a>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f80:	f7fe fee4 	bl	8001d4c <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d002      	beq.n	8002f98 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002f92:	2302      	movs	r3, #2
 8002f94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f96:	e0ca      	b.n	800312e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <HAL_SPI_Receive+0x7e>
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d102      	bne.n	8002faa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fa8:	e0c1      	b.n	800312e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2204      	movs	r2, #4
 8002fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	88fa      	ldrh	r2, [r7, #6]
 8002fc2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	88fa      	ldrh	r2, [r7, #6]
 8002fc8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ff0:	d10f      	bne.n	8003012 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003000:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003010:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d007      	beq.n	8003030 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800302e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d162      	bne.n	80030fe <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003038:	e02e      	b.n	8003098 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b01      	cmp	r3, #1
 8003046:	d115      	bne.n	8003074 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f103 020c 	add.w	r2, r3, #12
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003054:	7812      	ldrb	r2, [r2, #0]
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003068:	b29b      	uxth	r3, r3
 800306a:	3b01      	subs	r3, #1
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003072:	e011      	b.n	8003098 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003074:	f7fe fe6a 	bl	8001d4c <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d803      	bhi.n	800308c <HAL_SPI_Receive+0x166>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800308a:	d102      	bne.n	8003092 <HAL_SPI_Receive+0x16c>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d102      	bne.n	8003098 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003096:	e04a      	b.n	800312e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1cb      	bne.n	800303a <HAL_SPI_Receive+0x114>
 80030a2:	e031      	b.n	8003108 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d113      	bne.n	80030da <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	b292      	uxth	r2, r2
 80030be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	1c9a      	adds	r2, r3, #2
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030d8:	e011      	b.n	80030fe <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030da:	f7fe fe37 	bl	8001d4c <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d803      	bhi.n	80030f2 <HAL_SPI_Receive+0x1cc>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030f0:	d102      	bne.n	80030f8 <HAL_SPI_Receive+0x1d2>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d102      	bne.n	80030fe <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80030fc:	e017      	b.n	800312e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003102:	b29b      	uxth	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1cd      	bne.n	80030a4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	6839      	ldr	r1, [r7, #0]
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 fa45 	bl	800359c <SPI_EndRxTransaction>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	75fb      	strb	r3, [r7, #23]
 800312a:	e000      	b.n	800312e <HAL_SPI_Receive+0x208>
  }

error :
 800312c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800313e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08c      	sub	sp, #48	; 0x30
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
 8003154:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003156:	2301      	movs	r3, #1
 8003158:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_SPI_TransmitReceive+0x26>
 800316a:	2302      	movs	r3, #2
 800316c:	e18a      	b.n	8003484 <HAL_SPI_TransmitReceive+0x33c>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003176:	f7fe fde9 	bl	8001d4c <HAL_GetTick>
 800317a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800318c:	887b      	ldrh	r3, [r7, #2]
 800318e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003190:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003194:	2b01      	cmp	r3, #1
 8003196:	d00f      	beq.n	80031b8 <HAL_SPI_TransmitReceive+0x70>
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800319e:	d107      	bne.n	80031b0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d103      	bne.n	80031b0 <HAL_SPI_TransmitReceive+0x68>
 80031a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d003      	beq.n	80031b8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
 80031b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031b6:	e15b      	b.n	8003470 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <HAL_SPI_TransmitReceive+0x82>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <HAL_SPI_TransmitReceive+0x82>
 80031c4:	887b      	ldrh	r3, [r7, #2]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d103      	bne.n	80031d2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031d0:	e14e      	b.n	8003470 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d003      	beq.n	80031e6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2205      	movs	r2, #5
 80031e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	887a      	ldrh	r2, [r7, #2]
 80031f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	887a      	ldrh	r2, [r7, #2]
 80031fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	887a      	ldrh	r2, [r7, #2]
 8003208:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	887a      	ldrh	r2, [r7, #2]
 800320e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003226:	2b40      	cmp	r3, #64	; 0x40
 8003228:	d007      	beq.n	800323a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003238:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003242:	d178      	bne.n	8003336 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <HAL_SPI_TransmitReceive+0x10a>
 800324c:	8b7b      	ldrh	r3, [r7, #26]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d166      	bne.n	8003320 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	881a      	ldrh	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	1c9a      	adds	r2, r3, #2
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326c:	b29b      	uxth	r3, r3
 800326e:	3b01      	subs	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003276:	e053      	b.n	8003320 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b02      	cmp	r3, #2
 8003284:	d11b      	bne.n	80032be <HAL_SPI_TransmitReceive+0x176>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800328a:	b29b      	uxth	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d016      	beq.n	80032be <HAL_SPI_TransmitReceive+0x176>
 8003290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003292:	2b01      	cmp	r3, #1
 8003294:	d113      	bne.n	80032be <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	881a      	ldrh	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	1c9a      	adds	r2, r3, #2
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d119      	bne.n	8003300 <HAL_SPI_TransmitReceive+0x1b8>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d014      	beq.n	8003300 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	b292      	uxth	r2, r2
 80032e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	1c9a      	adds	r2, r3, #2
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032fc:	2301      	movs	r3, #1
 80032fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003300:	f7fe fd24 	bl	8001d4c <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800330c:	429a      	cmp	r2, r3
 800330e:	d807      	bhi.n	8003320 <HAL_SPI_TransmitReceive+0x1d8>
 8003310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003316:	d003      	beq.n	8003320 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800331e:	e0a7      	b.n	8003470 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1a6      	bne.n	8003278 <HAL_SPI_TransmitReceive+0x130>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1a1      	bne.n	8003278 <HAL_SPI_TransmitReceive+0x130>
 8003334:	e07c      	b.n	8003430 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_SPI_TransmitReceive+0x1fc>
 800333e:	8b7b      	ldrh	r3, [r7, #26]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d16b      	bne.n	800341c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	330c      	adds	r3, #12
 800334e:	7812      	ldrb	r2, [r2, #0]
 8003350:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800336a:	e057      	b.n	800341c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b02      	cmp	r3, #2
 8003378:	d11c      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x26c>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800337e:	b29b      	uxth	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d017      	beq.n	80033b4 <HAL_SPI_TransmitReceive+0x26c>
 8003384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003386:	2b01      	cmp	r3, #1
 8003388:	d114      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	330c      	adds	r3, #12
 8003394:	7812      	ldrb	r2, [r2, #0]
 8003396:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d119      	bne.n	80033f6 <HAL_SPI_TransmitReceive+0x2ae>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d014      	beq.n	80033f6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033f2:	2301      	movs	r3, #1
 80033f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033f6:	f7fe fca9 	bl	8001d4c <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003402:	429a      	cmp	r2, r3
 8003404:	d803      	bhi.n	800340e <HAL_SPI_TransmitReceive+0x2c6>
 8003406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800340c:	d102      	bne.n	8003414 <HAL_SPI_TransmitReceive+0x2cc>
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003410:	2b00      	cmp	r3, #0
 8003412:	d103      	bne.n	800341c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800341a:	e029      	b.n	8003470 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1a2      	bne.n	800336c <HAL_SPI_TransmitReceive+0x224>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800342a:	b29b      	uxth	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d19d      	bne.n	800336c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003432:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 f917 	bl	8003668 <SPI_EndRxTxTransaction>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d006      	beq.n	800344e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800344c:	e010      	b.n	8003470 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10b      	bne.n	800346e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	e000      	b.n	8003470 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800346e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003480:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003484:	4618      	mov	r0, r3
 8003486:	3730      	adds	r7, #48	; 0x30
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	4613      	mov	r3, r2
 800349a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800349c:	f7fe fc56 	bl	8001d4c <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	4413      	add	r3, r2
 80034aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034ac:	f7fe fc4e 	bl	8001d4c <HAL_GetTick>
 80034b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034b2:	4b39      	ldr	r3, [pc, #228]	; (8003598 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	015b      	lsls	r3, r3, #5
 80034b8:	0d1b      	lsrs	r3, r3, #20
 80034ba:	69fa      	ldr	r2, [r7, #28]
 80034bc:	fb02 f303 	mul.w	r3, r2, r3
 80034c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034c2:	e054      	b.n	800356e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034ca:	d050      	beq.n	800356e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034cc:	f7fe fc3e 	bl	8001d4c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d902      	bls.n	80034e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d13d      	bne.n	800355e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034fa:	d111      	bne.n	8003520 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003504:	d004      	beq.n	8003510 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800350e:	d107      	bne.n	8003520 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800351e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003528:	d10f      	bne.n	800354a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003548:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e017      	b.n	800358e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	3b01      	subs	r3, #1
 800356c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4013      	ands	r3, r2
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	429a      	cmp	r2, r3
 800357c:	bf0c      	ite	eq
 800357e:	2301      	moveq	r3, #1
 8003580:	2300      	movne	r3, #0
 8003582:	b2db      	uxtb	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	429a      	cmp	r2, r3
 800358a:	d19b      	bne.n	80034c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000000 	.word	0x20000000

0800359c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035b0:	d111      	bne.n	80035d6 <SPI_EndRxTransaction+0x3a>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ba:	d004      	beq.n	80035c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c4:	d107      	bne.n	80035d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035de:	d12a      	bne.n	8003636 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e8:	d012      	beq.n	8003610 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2200      	movs	r2, #0
 80035f2:	2180      	movs	r1, #128	; 0x80
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f7ff ff49 	bl	800348c <SPI_WaitFlagStateUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d02d      	beq.n	800365c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003604:	f043 0220 	orr.w	r2, r3, #32
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e026      	b.n	800365e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2200      	movs	r2, #0
 8003618:	2101      	movs	r1, #1
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f7ff ff36 	bl	800348c <SPI_WaitFlagStateUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d01a      	beq.n	800365c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362a:	f043 0220 	orr.w	r2, r3, #32
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e013      	b.n	800365e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2200      	movs	r2, #0
 800363e:	2101      	movs	r1, #1
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f7ff ff23 	bl	800348c <SPI_WaitFlagStateUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d007      	beq.n	800365c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003650:	f043 0220 	orr.w	r2, r3, #32
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e000      	b.n	800365e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af02      	add	r7, sp, #8
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003674:	4b1b      	ldr	r3, [pc, #108]	; (80036e4 <SPI_EndRxTxTransaction+0x7c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1b      	ldr	r2, [pc, #108]	; (80036e8 <SPI_EndRxTxTransaction+0x80>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	0d5b      	lsrs	r3, r3, #21
 8003680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003684:	fb02 f303 	mul.w	r3, r2, r3
 8003688:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003692:	d112      	bne.n	80036ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2200      	movs	r2, #0
 800369c:	2180      	movs	r1, #128	; 0x80
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f7ff fef4 	bl	800348c <SPI_WaitFlagStateUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d016      	beq.n	80036d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ae:	f043 0220 	orr.w	r2, r3, #32
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e00f      	b.n	80036da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d0:	2b80      	cmp	r3, #128	; 0x80
 80036d2:	d0f2      	beq.n	80036ba <SPI_EndRxTxTransaction+0x52>
 80036d4:	e000      	b.n	80036d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80036d6:	bf00      	nop
  }

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000000 	.word	0x20000000
 80036e8:	165e9f81 	.word	0x165e9f81

080036ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e03f      	b.n	800377e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fe fa42 	bl	8001b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2224      	movs	r2, #36	; 0x24
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800372e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f929 	bl	8003988 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b08a      	sub	sp, #40	; 0x28
 800378a:	af02      	add	r7, sp, #8
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	4613      	mov	r3, r2
 8003794:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d17c      	bne.n	80038a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <HAL_UART_Transmit+0x2c>
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e075      	b.n	80038a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_UART_Transmit+0x3e>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e06e      	b.n	80038a2 <HAL_UART_Transmit+0x11c>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2221      	movs	r2, #33	; 0x21
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037da:	f7fe fab7 	bl	8001d4c <HAL_GetTick>
 80037de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	88fa      	ldrh	r2, [r7, #6]
 80037e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	88fa      	ldrh	r2, [r7, #6]
 80037ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f4:	d108      	bne.n	8003808 <HAL_UART_Transmit+0x82>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d104      	bne.n	8003808 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	61bb      	str	r3, [r7, #24]
 8003806:	e003      	b.n	8003810 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800380c:	2300      	movs	r3, #0
 800380e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003818:	e02a      	b.n	8003870 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2200      	movs	r2, #0
 8003822:	2180      	movs	r1, #128	; 0x80
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f840 	bl	80038aa <UART_WaitOnFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e036      	b.n	80038a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10b      	bne.n	8003852 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003848:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	3302      	adds	r3, #2
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	e007      	b.n	8003862 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	781a      	ldrb	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	3301      	adds	r3, #1
 8003860:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1cf      	bne.n	800381a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2200      	movs	r2, #0
 8003882:	2140      	movs	r1, #64	; 0x40
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f810 	bl	80038aa <UART_WaitOnFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e006      	b.n	80038a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800389c:	2300      	movs	r3, #0
 800389e:	e000      	b.n	80038a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038a0:	2302      	movs	r3, #2
  }
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3720      	adds	r7, #32
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b090      	sub	sp, #64	; 0x40
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	60f8      	str	r0, [r7, #12]
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	603b      	str	r3, [r7, #0]
 80038b6:	4613      	mov	r3, r2
 80038b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ba:	e050      	b.n	800395e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038c2:	d04c      	beq.n	800395e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d007      	beq.n	80038da <UART_WaitOnFlagUntilTimeout+0x30>
 80038ca:	f7fe fa3f 	bl	8001d4c <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d241      	bcs.n	800395e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	330c      	adds	r3, #12
 80038e0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e4:	e853 3f00 	ldrex	r3, [r3]
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	330c      	adds	r3, #12
 80038f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038fa:	637a      	str	r2, [r7, #52]	; 0x34
 80038fc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003900:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003902:	e841 2300 	strex	r3, r2, [r1]
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1e5      	bne.n	80038da <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3314      	adds	r3, #20
 8003914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	e853 3f00 	ldrex	r3, [r3]
 800391c:	613b      	str	r3, [r7, #16]
   return(result);
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	63bb      	str	r3, [r7, #56]	; 0x38
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3314      	adds	r3, #20
 800392c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800392e:	623a      	str	r2, [r7, #32]
 8003930:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003932:	69f9      	ldr	r1, [r7, #28]
 8003934:	6a3a      	ldr	r2, [r7, #32]
 8003936:	e841 2300 	strex	r3, r2, [r1]
 800393a:	61bb      	str	r3, [r7, #24]
   return(result);
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1e5      	bne.n	800390e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e00f      	b.n	800397e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4013      	ands	r3, r2
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	429a      	cmp	r2, r3
 800396c:	bf0c      	ite	eq
 800396e:	2301      	moveq	r3, #1
 8003970:	2300      	movne	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	461a      	mov	r2, r3
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	429a      	cmp	r2, r3
 800397a:	d09f      	beq.n	80038bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3740      	adds	r7, #64	; 0x40
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800398c:	b09f      	sub	sp, #124	; 0x7c
 800398e:	af00      	add	r7, sp, #0
 8003990:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800399c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399e:	68d9      	ldr	r1, [r3, #12]
 80039a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	ea40 0301 	orr.w	r3, r0, r1
 80039a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	431a      	orrs	r2, r3
 80039ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	4313      	orrs	r3, r2
 80039c0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80039c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039cc:	f021 010c 	bic.w	r1, r1, #12
 80039d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039d6:	430b      	orrs	r3, r1
 80039d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e6:	6999      	ldr	r1, [r3, #24]
 80039e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	ea40 0301 	orr.w	r3, r0, r1
 80039f0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4bc5      	ldr	r3, [pc, #788]	; (8003d0c <UART_SetConfig+0x384>)
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d004      	beq.n	8003a06 <UART_SetConfig+0x7e>
 80039fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	4bc3      	ldr	r3, [pc, #780]	; (8003d10 <UART_SetConfig+0x388>)
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d103      	bne.n	8003a0e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a06:	f7ff f8b5 	bl	8002b74 <HAL_RCC_GetPCLK2Freq>
 8003a0a:	6778      	str	r0, [r7, #116]	; 0x74
 8003a0c:	e002      	b.n	8003a14 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a0e:	f7ff f89d 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 8003a12:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a1c:	f040 80b6 	bne.w	8003b8c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a22:	461c      	mov	r4, r3
 8003a24:	f04f 0500 	mov.w	r5, #0
 8003a28:	4622      	mov	r2, r4
 8003a2a:	462b      	mov	r3, r5
 8003a2c:	1891      	adds	r1, r2, r2
 8003a2e:	6439      	str	r1, [r7, #64]	; 0x40
 8003a30:	415b      	adcs	r3, r3
 8003a32:	647b      	str	r3, [r7, #68]	; 0x44
 8003a34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a38:	1912      	adds	r2, r2, r4
 8003a3a:	eb45 0303 	adc.w	r3, r5, r3
 8003a3e:	f04f 0000 	mov.w	r0, #0
 8003a42:	f04f 0100 	mov.w	r1, #0
 8003a46:	00d9      	lsls	r1, r3, #3
 8003a48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a4c:	00d0      	lsls	r0, r2, #3
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	1911      	adds	r1, r2, r4
 8003a54:	6639      	str	r1, [r7, #96]	; 0x60
 8003a56:	416b      	adcs	r3, r5
 8003a58:	667b      	str	r3, [r7, #100]	; 0x64
 8003a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	1891      	adds	r1, r2, r2
 8003a66:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a68:	415b      	adcs	r3, r3
 8003a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a70:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003a74:	f7fd f8b2 	bl	8000bdc <__aeabi_uldivmod>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4ba5      	ldr	r3, [pc, #660]	; (8003d14 <UART_SetConfig+0x38c>)
 8003a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	011e      	lsls	r6, r3, #4
 8003a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a88:	461c      	mov	r4, r3
 8003a8a:	f04f 0500 	mov.w	r5, #0
 8003a8e:	4622      	mov	r2, r4
 8003a90:	462b      	mov	r3, r5
 8003a92:	1891      	adds	r1, r2, r2
 8003a94:	6339      	str	r1, [r7, #48]	; 0x30
 8003a96:	415b      	adcs	r3, r3
 8003a98:	637b      	str	r3, [r7, #52]	; 0x34
 8003a9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003a9e:	1912      	adds	r2, r2, r4
 8003aa0:	eb45 0303 	adc.w	r3, r5, r3
 8003aa4:	f04f 0000 	mov.w	r0, #0
 8003aa8:	f04f 0100 	mov.w	r1, #0
 8003aac:	00d9      	lsls	r1, r3, #3
 8003aae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ab2:	00d0      	lsls	r0, r2, #3
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	1911      	adds	r1, r2, r4
 8003aba:	65b9      	str	r1, [r7, #88]	; 0x58
 8003abc:	416b      	adcs	r3, r5
 8003abe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	1891      	adds	r1, r2, r2
 8003acc:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ace:	415b      	adcs	r3, r3
 8003ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ad2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ad6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ada:	f7fd f87f 	bl	8000bdc <__aeabi_uldivmod>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4b8c      	ldr	r3, [pc, #560]	; (8003d14 <UART_SetConfig+0x38c>)
 8003ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	2164      	movs	r1, #100	; 0x64
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	3332      	adds	r3, #50	; 0x32
 8003af6:	4a87      	ldr	r2, [pc, #540]	; (8003d14 <UART_SetConfig+0x38c>)
 8003af8:	fba2 2303 	umull	r2, r3, r2, r3
 8003afc:	095b      	lsrs	r3, r3, #5
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b04:	441e      	add	r6, r3
 8003b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f04f 0100 	mov.w	r1, #0
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	1894      	adds	r4, r2, r2
 8003b14:	623c      	str	r4, [r7, #32]
 8003b16:	415b      	adcs	r3, r3
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b1e:	1812      	adds	r2, r2, r0
 8003b20:	eb41 0303 	adc.w	r3, r1, r3
 8003b24:	f04f 0400 	mov.w	r4, #0
 8003b28:	f04f 0500 	mov.w	r5, #0
 8003b2c:	00dd      	lsls	r5, r3, #3
 8003b2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b32:	00d4      	lsls	r4, r2, #3
 8003b34:	4622      	mov	r2, r4
 8003b36:	462b      	mov	r3, r5
 8003b38:	1814      	adds	r4, r2, r0
 8003b3a:	653c      	str	r4, [r7, #80]	; 0x50
 8003b3c:	414b      	adcs	r3, r1
 8003b3e:	657b      	str	r3, [r7, #84]	; 0x54
 8003b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	461a      	mov	r2, r3
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	1891      	adds	r1, r2, r2
 8003b4c:	61b9      	str	r1, [r7, #24]
 8003b4e:	415b      	adcs	r3, r3
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b5a:	f7fd f83f 	bl	8000bdc <__aeabi_uldivmod>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4b6c      	ldr	r3, [pc, #432]	; (8003d14 <UART_SetConfig+0x38c>)
 8003b64:	fba3 1302 	umull	r1, r3, r3, r2
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	2164      	movs	r1, #100	; 0x64
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	3332      	adds	r3, #50	; 0x32
 8003b76:	4a67      	ldr	r2, [pc, #412]	; (8003d14 <UART_SetConfig+0x38c>)
 8003b78:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7c:	095b      	lsrs	r3, r3, #5
 8003b7e:	f003 0207 	and.w	r2, r3, #7
 8003b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4432      	add	r2, r6
 8003b88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b8a:	e0b9      	b.n	8003d00 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b8e:	461c      	mov	r4, r3
 8003b90:	f04f 0500 	mov.w	r5, #0
 8003b94:	4622      	mov	r2, r4
 8003b96:	462b      	mov	r3, r5
 8003b98:	1891      	adds	r1, r2, r2
 8003b9a:	6139      	str	r1, [r7, #16]
 8003b9c:	415b      	adcs	r3, r3
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ba4:	1912      	adds	r2, r2, r4
 8003ba6:	eb45 0303 	adc.w	r3, r5, r3
 8003baa:	f04f 0000 	mov.w	r0, #0
 8003bae:	f04f 0100 	mov.w	r1, #0
 8003bb2:	00d9      	lsls	r1, r3, #3
 8003bb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bb8:	00d0      	lsls	r0, r2, #3
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	eb12 0804 	adds.w	r8, r2, r4
 8003bc2:	eb43 0905 	adc.w	r9, r3, r5
 8003bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f04f 0100 	mov.w	r1, #0
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	008b      	lsls	r3, r1, #2
 8003bda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bde:	0082      	lsls	r2, r0, #2
 8003be0:	4640      	mov	r0, r8
 8003be2:	4649      	mov	r1, r9
 8003be4:	f7fc fffa 	bl	8000bdc <__aeabi_uldivmod>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4b49      	ldr	r3, [pc, #292]	; (8003d14 <UART_SetConfig+0x38c>)
 8003bee:	fba3 2302 	umull	r2, r3, r3, r2
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	011e      	lsls	r6, r3, #4
 8003bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f04f 0100 	mov.w	r1, #0
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	1894      	adds	r4, r2, r2
 8003c04:	60bc      	str	r4, [r7, #8]
 8003c06:	415b      	adcs	r3, r3
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c0e:	1812      	adds	r2, r2, r0
 8003c10:	eb41 0303 	adc.w	r3, r1, r3
 8003c14:	f04f 0400 	mov.w	r4, #0
 8003c18:	f04f 0500 	mov.w	r5, #0
 8003c1c:	00dd      	lsls	r5, r3, #3
 8003c1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c22:	00d4      	lsls	r4, r2, #3
 8003c24:	4622      	mov	r2, r4
 8003c26:	462b      	mov	r3, r5
 8003c28:	1814      	adds	r4, r2, r0
 8003c2a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003c2c:	414b      	adcs	r3, r1
 8003c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f04f 0100 	mov.w	r1, #0
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	008b      	lsls	r3, r1, #2
 8003c44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c48:	0082      	lsls	r2, r0, #2
 8003c4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003c4e:	f7fc ffc5 	bl	8000bdc <__aeabi_uldivmod>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4b2f      	ldr	r3, [pc, #188]	; (8003d14 <UART_SetConfig+0x38c>)
 8003c58:	fba3 1302 	umull	r1, r3, r3, r2
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	2164      	movs	r1, #100	; 0x64
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	3332      	adds	r3, #50	; 0x32
 8003c6a:	4a2a      	ldr	r2, [pc, #168]	; (8003d14 <UART_SetConfig+0x38c>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c76:	441e      	add	r6, r3
 8003c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f04f 0100 	mov.w	r1, #0
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	1894      	adds	r4, r2, r2
 8003c86:	603c      	str	r4, [r7, #0]
 8003c88:	415b      	adcs	r3, r3
 8003c8a:	607b      	str	r3, [r7, #4]
 8003c8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c90:	1812      	adds	r2, r2, r0
 8003c92:	eb41 0303 	adc.w	r3, r1, r3
 8003c96:	f04f 0400 	mov.w	r4, #0
 8003c9a:	f04f 0500 	mov.w	r5, #0
 8003c9e:	00dd      	lsls	r5, r3, #3
 8003ca0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ca4:	00d4      	lsls	r4, r2, #3
 8003ca6:	4622      	mov	r2, r4
 8003ca8:	462b      	mov	r3, r5
 8003caa:	eb12 0a00 	adds.w	sl, r2, r0
 8003cae:	eb43 0b01 	adc.w	fp, r3, r1
 8003cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f04f 0100 	mov.w	r1, #0
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	008b      	lsls	r3, r1, #2
 8003cc6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cca:	0082      	lsls	r2, r0, #2
 8003ccc:	4650      	mov	r0, sl
 8003cce:	4659      	mov	r1, fp
 8003cd0:	f7fc ff84 	bl	8000bdc <__aeabi_uldivmod>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <UART_SetConfig+0x38c>)
 8003cda:	fba3 1302 	umull	r1, r3, r3, r2
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	2164      	movs	r1, #100	; 0x64
 8003ce2:	fb01 f303 	mul.w	r3, r1, r3
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	3332      	adds	r3, #50	; 0x32
 8003cec:	4a09      	ldr	r2, [pc, #36]	; (8003d14 <UART_SetConfig+0x38c>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	f003 020f 	and.w	r2, r3, #15
 8003cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4432      	add	r2, r6
 8003cfe:	609a      	str	r2, [r3, #8]
}
 8003d00:	bf00      	nop
 8003d02:	377c      	adds	r7, #124	; 0x7c
 8003d04:	46bd      	mov	sp, r7
 8003d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40011000 	.word	0x40011000
 8003d10:	40011400 	.word	0x40011400
 8003d14:	51eb851f 	.word	0x51eb851f

08003d18 <__errno>:
 8003d18:	4b01      	ldr	r3, [pc, #4]	; (8003d20 <__errno+0x8>)
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	2000000c 	.word	0x2000000c

08003d24 <__libc_init_array>:
 8003d24:	b570      	push	{r4, r5, r6, lr}
 8003d26:	4d0d      	ldr	r5, [pc, #52]	; (8003d5c <__libc_init_array+0x38>)
 8003d28:	4c0d      	ldr	r4, [pc, #52]	; (8003d60 <__libc_init_array+0x3c>)
 8003d2a:	1b64      	subs	r4, r4, r5
 8003d2c:	10a4      	asrs	r4, r4, #2
 8003d2e:	2600      	movs	r6, #0
 8003d30:	42a6      	cmp	r6, r4
 8003d32:	d109      	bne.n	8003d48 <__libc_init_array+0x24>
 8003d34:	4d0b      	ldr	r5, [pc, #44]	; (8003d64 <__libc_init_array+0x40>)
 8003d36:	4c0c      	ldr	r4, [pc, #48]	; (8003d68 <__libc_init_array+0x44>)
 8003d38:	f000 feec 	bl	8004b14 <_init>
 8003d3c:	1b64      	subs	r4, r4, r5
 8003d3e:	10a4      	asrs	r4, r4, #2
 8003d40:	2600      	movs	r6, #0
 8003d42:	42a6      	cmp	r6, r4
 8003d44:	d105      	bne.n	8003d52 <__libc_init_array+0x2e>
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
 8003d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d4c:	4798      	blx	r3
 8003d4e:	3601      	adds	r6, #1
 8003d50:	e7ee      	b.n	8003d30 <__libc_init_array+0xc>
 8003d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d56:	4798      	blx	r3
 8003d58:	3601      	adds	r6, #1
 8003d5a:	e7f2      	b.n	8003d42 <__libc_init_array+0x1e>
 8003d5c:	08004c08 	.word	0x08004c08
 8003d60:	08004c08 	.word	0x08004c08
 8003d64:	08004c08 	.word	0x08004c08
 8003d68:	08004c0c 	.word	0x08004c0c

08003d6c <memset>:
 8003d6c:	4402      	add	r2, r0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d100      	bne.n	8003d76 <memset+0xa>
 8003d74:	4770      	bx	lr
 8003d76:	f803 1b01 	strb.w	r1, [r3], #1
 8003d7a:	e7f9      	b.n	8003d70 <memset+0x4>

08003d7c <siprintf>:
 8003d7c:	b40e      	push	{r1, r2, r3}
 8003d7e:	b500      	push	{lr}
 8003d80:	b09c      	sub	sp, #112	; 0x70
 8003d82:	ab1d      	add	r3, sp, #116	; 0x74
 8003d84:	9002      	str	r0, [sp, #8]
 8003d86:	9006      	str	r0, [sp, #24]
 8003d88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d8c:	4809      	ldr	r0, [pc, #36]	; (8003db4 <siprintf+0x38>)
 8003d8e:	9107      	str	r1, [sp, #28]
 8003d90:	9104      	str	r1, [sp, #16]
 8003d92:	4909      	ldr	r1, [pc, #36]	; (8003db8 <siprintf+0x3c>)
 8003d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d98:	9105      	str	r1, [sp, #20]
 8003d9a:	6800      	ldr	r0, [r0, #0]
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	a902      	add	r1, sp, #8
 8003da0:	f000 f868 	bl	8003e74 <_svfiprintf_r>
 8003da4:	9b02      	ldr	r3, [sp, #8]
 8003da6:	2200      	movs	r2, #0
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	b01c      	add	sp, #112	; 0x70
 8003dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8003db0:	b003      	add	sp, #12
 8003db2:	4770      	bx	lr
 8003db4:	2000000c 	.word	0x2000000c
 8003db8:	ffff0208 	.word	0xffff0208

08003dbc <__ssputs_r>:
 8003dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc0:	688e      	ldr	r6, [r1, #8]
 8003dc2:	429e      	cmp	r6, r3
 8003dc4:	4682      	mov	sl, r0
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	4690      	mov	r8, r2
 8003dca:	461f      	mov	r7, r3
 8003dcc:	d838      	bhi.n	8003e40 <__ssputs_r+0x84>
 8003dce:	898a      	ldrh	r2, [r1, #12]
 8003dd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003dd4:	d032      	beq.n	8003e3c <__ssputs_r+0x80>
 8003dd6:	6825      	ldr	r5, [r4, #0]
 8003dd8:	6909      	ldr	r1, [r1, #16]
 8003dda:	eba5 0901 	sub.w	r9, r5, r1
 8003dde:	6965      	ldr	r5, [r4, #20]
 8003de0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003de4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003de8:	3301      	adds	r3, #1
 8003dea:	444b      	add	r3, r9
 8003dec:	106d      	asrs	r5, r5, #1
 8003dee:	429d      	cmp	r5, r3
 8003df0:	bf38      	it	cc
 8003df2:	461d      	movcc	r5, r3
 8003df4:	0553      	lsls	r3, r2, #21
 8003df6:	d531      	bpl.n	8003e5c <__ssputs_r+0xa0>
 8003df8:	4629      	mov	r1, r5
 8003dfa:	f000 fb47 	bl	800448c <_malloc_r>
 8003dfe:	4606      	mov	r6, r0
 8003e00:	b950      	cbnz	r0, 8003e18 <__ssputs_r+0x5c>
 8003e02:	230c      	movs	r3, #12
 8003e04:	f8ca 3000 	str.w	r3, [sl]
 8003e08:	89a3      	ldrh	r3, [r4, #12]
 8003e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e0e:	81a3      	strh	r3, [r4, #12]
 8003e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e18:	6921      	ldr	r1, [r4, #16]
 8003e1a:	464a      	mov	r2, r9
 8003e1c:	f000 fabe 	bl	800439c <memcpy>
 8003e20:	89a3      	ldrh	r3, [r4, #12]
 8003e22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e2a:	81a3      	strh	r3, [r4, #12]
 8003e2c:	6126      	str	r6, [r4, #16]
 8003e2e:	6165      	str	r5, [r4, #20]
 8003e30:	444e      	add	r6, r9
 8003e32:	eba5 0509 	sub.w	r5, r5, r9
 8003e36:	6026      	str	r6, [r4, #0]
 8003e38:	60a5      	str	r5, [r4, #8]
 8003e3a:	463e      	mov	r6, r7
 8003e3c:	42be      	cmp	r6, r7
 8003e3e:	d900      	bls.n	8003e42 <__ssputs_r+0x86>
 8003e40:	463e      	mov	r6, r7
 8003e42:	4632      	mov	r2, r6
 8003e44:	6820      	ldr	r0, [r4, #0]
 8003e46:	4641      	mov	r1, r8
 8003e48:	f000 fab6 	bl	80043b8 <memmove>
 8003e4c:	68a3      	ldr	r3, [r4, #8]
 8003e4e:	6822      	ldr	r2, [r4, #0]
 8003e50:	1b9b      	subs	r3, r3, r6
 8003e52:	4432      	add	r2, r6
 8003e54:	60a3      	str	r3, [r4, #8]
 8003e56:	6022      	str	r2, [r4, #0]
 8003e58:	2000      	movs	r0, #0
 8003e5a:	e7db      	b.n	8003e14 <__ssputs_r+0x58>
 8003e5c:	462a      	mov	r2, r5
 8003e5e:	f000 fb6f 	bl	8004540 <_realloc_r>
 8003e62:	4606      	mov	r6, r0
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d1e1      	bne.n	8003e2c <__ssputs_r+0x70>
 8003e68:	6921      	ldr	r1, [r4, #16]
 8003e6a:	4650      	mov	r0, sl
 8003e6c:	f000 fabe 	bl	80043ec <_free_r>
 8003e70:	e7c7      	b.n	8003e02 <__ssputs_r+0x46>
	...

08003e74 <_svfiprintf_r>:
 8003e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e78:	4698      	mov	r8, r3
 8003e7a:	898b      	ldrh	r3, [r1, #12]
 8003e7c:	061b      	lsls	r3, r3, #24
 8003e7e:	b09d      	sub	sp, #116	; 0x74
 8003e80:	4607      	mov	r7, r0
 8003e82:	460d      	mov	r5, r1
 8003e84:	4614      	mov	r4, r2
 8003e86:	d50e      	bpl.n	8003ea6 <_svfiprintf_r+0x32>
 8003e88:	690b      	ldr	r3, [r1, #16]
 8003e8a:	b963      	cbnz	r3, 8003ea6 <_svfiprintf_r+0x32>
 8003e8c:	2140      	movs	r1, #64	; 0x40
 8003e8e:	f000 fafd 	bl	800448c <_malloc_r>
 8003e92:	6028      	str	r0, [r5, #0]
 8003e94:	6128      	str	r0, [r5, #16]
 8003e96:	b920      	cbnz	r0, 8003ea2 <_svfiprintf_r+0x2e>
 8003e98:	230c      	movs	r3, #12
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ea0:	e0d1      	b.n	8004046 <_svfiprintf_r+0x1d2>
 8003ea2:	2340      	movs	r3, #64	; 0x40
 8003ea4:	616b      	str	r3, [r5, #20]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8003eaa:	2320      	movs	r3, #32
 8003eac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003eb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003eb4:	2330      	movs	r3, #48	; 0x30
 8003eb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004060 <_svfiprintf_r+0x1ec>
 8003eba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ebe:	f04f 0901 	mov.w	r9, #1
 8003ec2:	4623      	mov	r3, r4
 8003ec4:	469a      	mov	sl, r3
 8003ec6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003eca:	b10a      	cbz	r2, 8003ed0 <_svfiprintf_r+0x5c>
 8003ecc:	2a25      	cmp	r2, #37	; 0x25
 8003ece:	d1f9      	bne.n	8003ec4 <_svfiprintf_r+0x50>
 8003ed0:	ebba 0b04 	subs.w	fp, sl, r4
 8003ed4:	d00b      	beq.n	8003eee <_svfiprintf_r+0x7a>
 8003ed6:	465b      	mov	r3, fp
 8003ed8:	4622      	mov	r2, r4
 8003eda:	4629      	mov	r1, r5
 8003edc:	4638      	mov	r0, r7
 8003ede:	f7ff ff6d 	bl	8003dbc <__ssputs_r>
 8003ee2:	3001      	adds	r0, #1
 8003ee4:	f000 80aa 	beq.w	800403c <_svfiprintf_r+0x1c8>
 8003ee8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003eea:	445a      	add	r2, fp
 8003eec:	9209      	str	r2, [sp, #36]	; 0x24
 8003eee:	f89a 3000 	ldrb.w	r3, [sl]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80a2 	beq.w	800403c <_svfiprintf_r+0x1c8>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003efe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f02:	f10a 0a01 	add.w	sl, sl, #1
 8003f06:	9304      	str	r3, [sp, #16]
 8003f08:	9307      	str	r3, [sp, #28]
 8003f0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f0e:	931a      	str	r3, [sp, #104]	; 0x68
 8003f10:	4654      	mov	r4, sl
 8003f12:	2205      	movs	r2, #5
 8003f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f18:	4851      	ldr	r0, [pc, #324]	; (8004060 <_svfiprintf_r+0x1ec>)
 8003f1a:	f7fc f969 	bl	80001f0 <memchr>
 8003f1e:	9a04      	ldr	r2, [sp, #16]
 8003f20:	b9d8      	cbnz	r0, 8003f5a <_svfiprintf_r+0xe6>
 8003f22:	06d0      	lsls	r0, r2, #27
 8003f24:	bf44      	itt	mi
 8003f26:	2320      	movmi	r3, #32
 8003f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f2c:	0711      	lsls	r1, r2, #28
 8003f2e:	bf44      	itt	mi
 8003f30:	232b      	movmi	r3, #43	; 0x2b
 8003f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f36:	f89a 3000 	ldrb.w	r3, [sl]
 8003f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f3c:	d015      	beq.n	8003f6a <_svfiprintf_r+0xf6>
 8003f3e:	9a07      	ldr	r2, [sp, #28]
 8003f40:	4654      	mov	r4, sl
 8003f42:	2000      	movs	r0, #0
 8003f44:	f04f 0c0a 	mov.w	ip, #10
 8003f48:	4621      	mov	r1, r4
 8003f4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f4e:	3b30      	subs	r3, #48	; 0x30
 8003f50:	2b09      	cmp	r3, #9
 8003f52:	d94e      	bls.n	8003ff2 <_svfiprintf_r+0x17e>
 8003f54:	b1b0      	cbz	r0, 8003f84 <_svfiprintf_r+0x110>
 8003f56:	9207      	str	r2, [sp, #28]
 8003f58:	e014      	b.n	8003f84 <_svfiprintf_r+0x110>
 8003f5a:	eba0 0308 	sub.w	r3, r0, r8
 8003f5e:	fa09 f303 	lsl.w	r3, r9, r3
 8003f62:	4313      	orrs	r3, r2
 8003f64:	9304      	str	r3, [sp, #16]
 8003f66:	46a2      	mov	sl, r4
 8003f68:	e7d2      	b.n	8003f10 <_svfiprintf_r+0x9c>
 8003f6a:	9b03      	ldr	r3, [sp, #12]
 8003f6c:	1d19      	adds	r1, r3, #4
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	9103      	str	r1, [sp, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	bfbb      	ittet	lt
 8003f76:	425b      	neglt	r3, r3
 8003f78:	f042 0202 	orrlt.w	r2, r2, #2
 8003f7c:	9307      	strge	r3, [sp, #28]
 8003f7e:	9307      	strlt	r3, [sp, #28]
 8003f80:	bfb8      	it	lt
 8003f82:	9204      	strlt	r2, [sp, #16]
 8003f84:	7823      	ldrb	r3, [r4, #0]
 8003f86:	2b2e      	cmp	r3, #46	; 0x2e
 8003f88:	d10c      	bne.n	8003fa4 <_svfiprintf_r+0x130>
 8003f8a:	7863      	ldrb	r3, [r4, #1]
 8003f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f8e:	d135      	bne.n	8003ffc <_svfiprintf_r+0x188>
 8003f90:	9b03      	ldr	r3, [sp, #12]
 8003f92:	1d1a      	adds	r2, r3, #4
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	9203      	str	r2, [sp, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bfb8      	it	lt
 8003f9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003fa0:	3402      	adds	r4, #2
 8003fa2:	9305      	str	r3, [sp, #20]
 8003fa4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004070 <_svfiprintf_r+0x1fc>
 8003fa8:	7821      	ldrb	r1, [r4, #0]
 8003faa:	2203      	movs	r2, #3
 8003fac:	4650      	mov	r0, sl
 8003fae:	f7fc f91f 	bl	80001f0 <memchr>
 8003fb2:	b140      	cbz	r0, 8003fc6 <_svfiprintf_r+0x152>
 8003fb4:	2340      	movs	r3, #64	; 0x40
 8003fb6:	eba0 000a 	sub.w	r0, r0, sl
 8003fba:	fa03 f000 	lsl.w	r0, r3, r0
 8003fbe:	9b04      	ldr	r3, [sp, #16]
 8003fc0:	4303      	orrs	r3, r0
 8003fc2:	3401      	adds	r4, #1
 8003fc4:	9304      	str	r3, [sp, #16]
 8003fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fca:	4826      	ldr	r0, [pc, #152]	; (8004064 <_svfiprintf_r+0x1f0>)
 8003fcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fd0:	2206      	movs	r2, #6
 8003fd2:	f7fc f90d 	bl	80001f0 <memchr>
 8003fd6:	2800      	cmp	r0, #0
 8003fd8:	d038      	beq.n	800404c <_svfiprintf_r+0x1d8>
 8003fda:	4b23      	ldr	r3, [pc, #140]	; (8004068 <_svfiprintf_r+0x1f4>)
 8003fdc:	bb1b      	cbnz	r3, 8004026 <_svfiprintf_r+0x1b2>
 8003fde:	9b03      	ldr	r3, [sp, #12]
 8003fe0:	3307      	adds	r3, #7
 8003fe2:	f023 0307 	bic.w	r3, r3, #7
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	9303      	str	r3, [sp, #12]
 8003fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fec:	4433      	add	r3, r6
 8003fee:	9309      	str	r3, [sp, #36]	; 0x24
 8003ff0:	e767      	b.n	8003ec2 <_svfiprintf_r+0x4e>
 8003ff2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ff6:	460c      	mov	r4, r1
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	e7a5      	b.n	8003f48 <_svfiprintf_r+0xd4>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	3401      	adds	r4, #1
 8004000:	9305      	str	r3, [sp, #20]
 8004002:	4619      	mov	r1, r3
 8004004:	f04f 0c0a 	mov.w	ip, #10
 8004008:	4620      	mov	r0, r4
 800400a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800400e:	3a30      	subs	r2, #48	; 0x30
 8004010:	2a09      	cmp	r2, #9
 8004012:	d903      	bls.n	800401c <_svfiprintf_r+0x1a8>
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0c5      	beq.n	8003fa4 <_svfiprintf_r+0x130>
 8004018:	9105      	str	r1, [sp, #20]
 800401a:	e7c3      	b.n	8003fa4 <_svfiprintf_r+0x130>
 800401c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004020:	4604      	mov	r4, r0
 8004022:	2301      	movs	r3, #1
 8004024:	e7f0      	b.n	8004008 <_svfiprintf_r+0x194>
 8004026:	ab03      	add	r3, sp, #12
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	462a      	mov	r2, r5
 800402c:	4b0f      	ldr	r3, [pc, #60]	; (800406c <_svfiprintf_r+0x1f8>)
 800402e:	a904      	add	r1, sp, #16
 8004030:	4638      	mov	r0, r7
 8004032:	f3af 8000 	nop.w
 8004036:	1c42      	adds	r2, r0, #1
 8004038:	4606      	mov	r6, r0
 800403a:	d1d6      	bne.n	8003fea <_svfiprintf_r+0x176>
 800403c:	89ab      	ldrh	r3, [r5, #12]
 800403e:	065b      	lsls	r3, r3, #25
 8004040:	f53f af2c 	bmi.w	8003e9c <_svfiprintf_r+0x28>
 8004044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004046:	b01d      	add	sp, #116	; 0x74
 8004048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800404c:	ab03      	add	r3, sp, #12
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	462a      	mov	r2, r5
 8004052:	4b06      	ldr	r3, [pc, #24]	; (800406c <_svfiprintf_r+0x1f8>)
 8004054:	a904      	add	r1, sp, #16
 8004056:	4638      	mov	r0, r7
 8004058:	f000 f87a 	bl	8004150 <_printf_i>
 800405c:	e7eb      	b.n	8004036 <_svfiprintf_r+0x1c2>
 800405e:	bf00      	nop
 8004060:	08004b5c 	.word	0x08004b5c
 8004064:	08004b66 	.word	0x08004b66
 8004068:	00000000 	.word	0x00000000
 800406c:	08003dbd 	.word	0x08003dbd
 8004070:	08004b62 	.word	0x08004b62

08004074 <_printf_common>:
 8004074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004078:	4616      	mov	r6, r2
 800407a:	4699      	mov	r9, r3
 800407c:	688a      	ldr	r2, [r1, #8]
 800407e:	690b      	ldr	r3, [r1, #16]
 8004080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004084:	4293      	cmp	r3, r2
 8004086:	bfb8      	it	lt
 8004088:	4613      	movlt	r3, r2
 800408a:	6033      	str	r3, [r6, #0]
 800408c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004090:	4607      	mov	r7, r0
 8004092:	460c      	mov	r4, r1
 8004094:	b10a      	cbz	r2, 800409a <_printf_common+0x26>
 8004096:	3301      	adds	r3, #1
 8004098:	6033      	str	r3, [r6, #0]
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	0699      	lsls	r1, r3, #26
 800409e:	bf42      	ittt	mi
 80040a0:	6833      	ldrmi	r3, [r6, #0]
 80040a2:	3302      	addmi	r3, #2
 80040a4:	6033      	strmi	r3, [r6, #0]
 80040a6:	6825      	ldr	r5, [r4, #0]
 80040a8:	f015 0506 	ands.w	r5, r5, #6
 80040ac:	d106      	bne.n	80040bc <_printf_common+0x48>
 80040ae:	f104 0a19 	add.w	sl, r4, #25
 80040b2:	68e3      	ldr	r3, [r4, #12]
 80040b4:	6832      	ldr	r2, [r6, #0]
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	42ab      	cmp	r3, r5
 80040ba:	dc26      	bgt.n	800410a <_printf_common+0x96>
 80040bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040c0:	1e13      	subs	r3, r2, #0
 80040c2:	6822      	ldr	r2, [r4, #0]
 80040c4:	bf18      	it	ne
 80040c6:	2301      	movne	r3, #1
 80040c8:	0692      	lsls	r2, r2, #26
 80040ca:	d42b      	bmi.n	8004124 <_printf_common+0xb0>
 80040cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040d0:	4649      	mov	r1, r9
 80040d2:	4638      	mov	r0, r7
 80040d4:	47c0      	blx	r8
 80040d6:	3001      	adds	r0, #1
 80040d8:	d01e      	beq.n	8004118 <_printf_common+0xa4>
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	68e5      	ldr	r5, [r4, #12]
 80040de:	6832      	ldr	r2, [r6, #0]
 80040e0:	f003 0306 	and.w	r3, r3, #6
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	bf08      	it	eq
 80040e8:	1aad      	subeq	r5, r5, r2
 80040ea:	68a3      	ldr	r3, [r4, #8]
 80040ec:	6922      	ldr	r2, [r4, #16]
 80040ee:	bf0c      	ite	eq
 80040f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040f4:	2500      	movne	r5, #0
 80040f6:	4293      	cmp	r3, r2
 80040f8:	bfc4      	itt	gt
 80040fa:	1a9b      	subgt	r3, r3, r2
 80040fc:	18ed      	addgt	r5, r5, r3
 80040fe:	2600      	movs	r6, #0
 8004100:	341a      	adds	r4, #26
 8004102:	42b5      	cmp	r5, r6
 8004104:	d11a      	bne.n	800413c <_printf_common+0xc8>
 8004106:	2000      	movs	r0, #0
 8004108:	e008      	b.n	800411c <_printf_common+0xa8>
 800410a:	2301      	movs	r3, #1
 800410c:	4652      	mov	r2, sl
 800410e:	4649      	mov	r1, r9
 8004110:	4638      	mov	r0, r7
 8004112:	47c0      	blx	r8
 8004114:	3001      	adds	r0, #1
 8004116:	d103      	bne.n	8004120 <_printf_common+0xac>
 8004118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800411c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004120:	3501      	adds	r5, #1
 8004122:	e7c6      	b.n	80040b2 <_printf_common+0x3e>
 8004124:	18e1      	adds	r1, r4, r3
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	2030      	movs	r0, #48	; 0x30
 800412a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800412e:	4422      	add	r2, r4
 8004130:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004134:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004138:	3302      	adds	r3, #2
 800413a:	e7c7      	b.n	80040cc <_printf_common+0x58>
 800413c:	2301      	movs	r3, #1
 800413e:	4622      	mov	r2, r4
 8004140:	4649      	mov	r1, r9
 8004142:	4638      	mov	r0, r7
 8004144:	47c0      	blx	r8
 8004146:	3001      	adds	r0, #1
 8004148:	d0e6      	beq.n	8004118 <_printf_common+0xa4>
 800414a:	3601      	adds	r6, #1
 800414c:	e7d9      	b.n	8004102 <_printf_common+0x8e>
	...

08004150 <_printf_i>:
 8004150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004154:	460c      	mov	r4, r1
 8004156:	4691      	mov	r9, r2
 8004158:	7e27      	ldrb	r7, [r4, #24]
 800415a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800415c:	2f78      	cmp	r7, #120	; 0x78
 800415e:	4680      	mov	r8, r0
 8004160:	469a      	mov	sl, r3
 8004162:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004166:	d807      	bhi.n	8004178 <_printf_i+0x28>
 8004168:	2f62      	cmp	r7, #98	; 0x62
 800416a:	d80a      	bhi.n	8004182 <_printf_i+0x32>
 800416c:	2f00      	cmp	r7, #0
 800416e:	f000 80d8 	beq.w	8004322 <_printf_i+0x1d2>
 8004172:	2f58      	cmp	r7, #88	; 0x58
 8004174:	f000 80a3 	beq.w	80042be <_printf_i+0x16e>
 8004178:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800417c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004180:	e03a      	b.n	80041f8 <_printf_i+0xa8>
 8004182:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004186:	2b15      	cmp	r3, #21
 8004188:	d8f6      	bhi.n	8004178 <_printf_i+0x28>
 800418a:	a001      	add	r0, pc, #4	; (adr r0, 8004190 <_printf_i+0x40>)
 800418c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004190:	080041e9 	.word	0x080041e9
 8004194:	080041fd 	.word	0x080041fd
 8004198:	08004179 	.word	0x08004179
 800419c:	08004179 	.word	0x08004179
 80041a0:	08004179 	.word	0x08004179
 80041a4:	08004179 	.word	0x08004179
 80041a8:	080041fd 	.word	0x080041fd
 80041ac:	08004179 	.word	0x08004179
 80041b0:	08004179 	.word	0x08004179
 80041b4:	08004179 	.word	0x08004179
 80041b8:	08004179 	.word	0x08004179
 80041bc:	08004309 	.word	0x08004309
 80041c0:	0800422d 	.word	0x0800422d
 80041c4:	080042eb 	.word	0x080042eb
 80041c8:	08004179 	.word	0x08004179
 80041cc:	08004179 	.word	0x08004179
 80041d0:	0800432b 	.word	0x0800432b
 80041d4:	08004179 	.word	0x08004179
 80041d8:	0800422d 	.word	0x0800422d
 80041dc:	08004179 	.word	0x08004179
 80041e0:	08004179 	.word	0x08004179
 80041e4:	080042f3 	.word	0x080042f3
 80041e8:	680b      	ldr	r3, [r1, #0]
 80041ea:	1d1a      	adds	r2, r3, #4
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	600a      	str	r2, [r1, #0]
 80041f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0a3      	b.n	8004344 <_printf_i+0x1f4>
 80041fc:	6825      	ldr	r5, [r4, #0]
 80041fe:	6808      	ldr	r0, [r1, #0]
 8004200:	062e      	lsls	r6, r5, #24
 8004202:	f100 0304 	add.w	r3, r0, #4
 8004206:	d50a      	bpl.n	800421e <_printf_i+0xce>
 8004208:	6805      	ldr	r5, [r0, #0]
 800420a:	600b      	str	r3, [r1, #0]
 800420c:	2d00      	cmp	r5, #0
 800420e:	da03      	bge.n	8004218 <_printf_i+0xc8>
 8004210:	232d      	movs	r3, #45	; 0x2d
 8004212:	426d      	negs	r5, r5
 8004214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004218:	485e      	ldr	r0, [pc, #376]	; (8004394 <_printf_i+0x244>)
 800421a:	230a      	movs	r3, #10
 800421c:	e019      	b.n	8004252 <_printf_i+0x102>
 800421e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004222:	6805      	ldr	r5, [r0, #0]
 8004224:	600b      	str	r3, [r1, #0]
 8004226:	bf18      	it	ne
 8004228:	b22d      	sxthne	r5, r5
 800422a:	e7ef      	b.n	800420c <_printf_i+0xbc>
 800422c:	680b      	ldr	r3, [r1, #0]
 800422e:	6825      	ldr	r5, [r4, #0]
 8004230:	1d18      	adds	r0, r3, #4
 8004232:	6008      	str	r0, [r1, #0]
 8004234:	0628      	lsls	r0, r5, #24
 8004236:	d501      	bpl.n	800423c <_printf_i+0xec>
 8004238:	681d      	ldr	r5, [r3, #0]
 800423a:	e002      	b.n	8004242 <_printf_i+0xf2>
 800423c:	0669      	lsls	r1, r5, #25
 800423e:	d5fb      	bpl.n	8004238 <_printf_i+0xe8>
 8004240:	881d      	ldrh	r5, [r3, #0]
 8004242:	4854      	ldr	r0, [pc, #336]	; (8004394 <_printf_i+0x244>)
 8004244:	2f6f      	cmp	r7, #111	; 0x6f
 8004246:	bf0c      	ite	eq
 8004248:	2308      	moveq	r3, #8
 800424a:	230a      	movne	r3, #10
 800424c:	2100      	movs	r1, #0
 800424e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004252:	6866      	ldr	r6, [r4, #4]
 8004254:	60a6      	str	r6, [r4, #8]
 8004256:	2e00      	cmp	r6, #0
 8004258:	bfa2      	ittt	ge
 800425a:	6821      	ldrge	r1, [r4, #0]
 800425c:	f021 0104 	bicge.w	r1, r1, #4
 8004260:	6021      	strge	r1, [r4, #0]
 8004262:	b90d      	cbnz	r5, 8004268 <_printf_i+0x118>
 8004264:	2e00      	cmp	r6, #0
 8004266:	d04d      	beq.n	8004304 <_printf_i+0x1b4>
 8004268:	4616      	mov	r6, r2
 800426a:	fbb5 f1f3 	udiv	r1, r5, r3
 800426e:	fb03 5711 	mls	r7, r3, r1, r5
 8004272:	5dc7      	ldrb	r7, [r0, r7]
 8004274:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004278:	462f      	mov	r7, r5
 800427a:	42bb      	cmp	r3, r7
 800427c:	460d      	mov	r5, r1
 800427e:	d9f4      	bls.n	800426a <_printf_i+0x11a>
 8004280:	2b08      	cmp	r3, #8
 8004282:	d10b      	bne.n	800429c <_printf_i+0x14c>
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	07df      	lsls	r7, r3, #31
 8004288:	d508      	bpl.n	800429c <_printf_i+0x14c>
 800428a:	6923      	ldr	r3, [r4, #16]
 800428c:	6861      	ldr	r1, [r4, #4]
 800428e:	4299      	cmp	r1, r3
 8004290:	bfde      	ittt	le
 8004292:	2330      	movle	r3, #48	; 0x30
 8004294:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004298:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800429c:	1b92      	subs	r2, r2, r6
 800429e:	6122      	str	r2, [r4, #16]
 80042a0:	f8cd a000 	str.w	sl, [sp]
 80042a4:	464b      	mov	r3, r9
 80042a6:	aa03      	add	r2, sp, #12
 80042a8:	4621      	mov	r1, r4
 80042aa:	4640      	mov	r0, r8
 80042ac:	f7ff fee2 	bl	8004074 <_printf_common>
 80042b0:	3001      	adds	r0, #1
 80042b2:	d14c      	bne.n	800434e <_printf_i+0x1fe>
 80042b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042b8:	b004      	add	sp, #16
 80042ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042be:	4835      	ldr	r0, [pc, #212]	; (8004394 <_printf_i+0x244>)
 80042c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	680e      	ldr	r6, [r1, #0]
 80042c8:	061f      	lsls	r7, r3, #24
 80042ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80042ce:	600e      	str	r6, [r1, #0]
 80042d0:	d514      	bpl.n	80042fc <_printf_i+0x1ac>
 80042d2:	07d9      	lsls	r1, r3, #31
 80042d4:	bf44      	itt	mi
 80042d6:	f043 0320 	orrmi.w	r3, r3, #32
 80042da:	6023      	strmi	r3, [r4, #0]
 80042dc:	b91d      	cbnz	r5, 80042e6 <_printf_i+0x196>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	f023 0320 	bic.w	r3, r3, #32
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	2310      	movs	r3, #16
 80042e8:	e7b0      	b.n	800424c <_printf_i+0xfc>
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	f043 0320 	orr.w	r3, r3, #32
 80042f0:	6023      	str	r3, [r4, #0]
 80042f2:	2378      	movs	r3, #120	; 0x78
 80042f4:	4828      	ldr	r0, [pc, #160]	; (8004398 <_printf_i+0x248>)
 80042f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042fa:	e7e3      	b.n	80042c4 <_printf_i+0x174>
 80042fc:	065e      	lsls	r6, r3, #25
 80042fe:	bf48      	it	mi
 8004300:	b2ad      	uxthmi	r5, r5
 8004302:	e7e6      	b.n	80042d2 <_printf_i+0x182>
 8004304:	4616      	mov	r6, r2
 8004306:	e7bb      	b.n	8004280 <_printf_i+0x130>
 8004308:	680b      	ldr	r3, [r1, #0]
 800430a:	6826      	ldr	r6, [r4, #0]
 800430c:	6960      	ldr	r0, [r4, #20]
 800430e:	1d1d      	adds	r5, r3, #4
 8004310:	600d      	str	r5, [r1, #0]
 8004312:	0635      	lsls	r5, r6, #24
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	d501      	bpl.n	800431c <_printf_i+0x1cc>
 8004318:	6018      	str	r0, [r3, #0]
 800431a:	e002      	b.n	8004322 <_printf_i+0x1d2>
 800431c:	0671      	lsls	r1, r6, #25
 800431e:	d5fb      	bpl.n	8004318 <_printf_i+0x1c8>
 8004320:	8018      	strh	r0, [r3, #0]
 8004322:	2300      	movs	r3, #0
 8004324:	6123      	str	r3, [r4, #16]
 8004326:	4616      	mov	r6, r2
 8004328:	e7ba      	b.n	80042a0 <_printf_i+0x150>
 800432a:	680b      	ldr	r3, [r1, #0]
 800432c:	1d1a      	adds	r2, r3, #4
 800432e:	600a      	str	r2, [r1, #0]
 8004330:	681e      	ldr	r6, [r3, #0]
 8004332:	6862      	ldr	r2, [r4, #4]
 8004334:	2100      	movs	r1, #0
 8004336:	4630      	mov	r0, r6
 8004338:	f7fb ff5a 	bl	80001f0 <memchr>
 800433c:	b108      	cbz	r0, 8004342 <_printf_i+0x1f2>
 800433e:	1b80      	subs	r0, r0, r6
 8004340:	6060      	str	r0, [r4, #4]
 8004342:	6863      	ldr	r3, [r4, #4]
 8004344:	6123      	str	r3, [r4, #16]
 8004346:	2300      	movs	r3, #0
 8004348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800434c:	e7a8      	b.n	80042a0 <_printf_i+0x150>
 800434e:	6923      	ldr	r3, [r4, #16]
 8004350:	4632      	mov	r2, r6
 8004352:	4649      	mov	r1, r9
 8004354:	4640      	mov	r0, r8
 8004356:	47d0      	blx	sl
 8004358:	3001      	adds	r0, #1
 800435a:	d0ab      	beq.n	80042b4 <_printf_i+0x164>
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	079b      	lsls	r3, r3, #30
 8004360:	d413      	bmi.n	800438a <_printf_i+0x23a>
 8004362:	68e0      	ldr	r0, [r4, #12]
 8004364:	9b03      	ldr	r3, [sp, #12]
 8004366:	4298      	cmp	r0, r3
 8004368:	bfb8      	it	lt
 800436a:	4618      	movlt	r0, r3
 800436c:	e7a4      	b.n	80042b8 <_printf_i+0x168>
 800436e:	2301      	movs	r3, #1
 8004370:	4632      	mov	r2, r6
 8004372:	4649      	mov	r1, r9
 8004374:	4640      	mov	r0, r8
 8004376:	47d0      	blx	sl
 8004378:	3001      	adds	r0, #1
 800437a:	d09b      	beq.n	80042b4 <_printf_i+0x164>
 800437c:	3501      	adds	r5, #1
 800437e:	68e3      	ldr	r3, [r4, #12]
 8004380:	9903      	ldr	r1, [sp, #12]
 8004382:	1a5b      	subs	r3, r3, r1
 8004384:	42ab      	cmp	r3, r5
 8004386:	dcf2      	bgt.n	800436e <_printf_i+0x21e>
 8004388:	e7eb      	b.n	8004362 <_printf_i+0x212>
 800438a:	2500      	movs	r5, #0
 800438c:	f104 0619 	add.w	r6, r4, #25
 8004390:	e7f5      	b.n	800437e <_printf_i+0x22e>
 8004392:	bf00      	nop
 8004394:	08004b6d 	.word	0x08004b6d
 8004398:	08004b7e 	.word	0x08004b7e

0800439c <memcpy>:
 800439c:	440a      	add	r2, r1
 800439e:	4291      	cmp	r1, r2
 80043a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80043a4:	d100      	bne.n	80043a8 <memcpy+0xc>
 80043a6:	4770      	bx	lr
 80043a8:	b510      	push	{r4, lr}
 80043aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043b2:	4291      	cmp	r1, r2
 80043b4:	d1f9      	bne.n	80043aa <memcpy+0xe>
 80043b6:	bd10      	pop	{r4, pc}

080043b8 <memmove>:
 80043b8:	4288      	cmp	r0, r1
 80043ba:	b510      	push	{r4, lr}
 80043bc:	eb01 0402 	add.w	r4, r1, r2
 80043c0:	d902      	bls.n	80043c8 <memmove+0x10>
 80043c2:	4284      	cmp	r4, r0
 80043c4:	4623      	mov	r3, r4
 80043c6:	d807      	bhi.n	80043d8 <memmove+0x20>
 80043c8:	1e43      	subs	r3, r0, #1
 80043ca:	42a1      	cmp	r1, r4
 80043cc:	d008      	beq.n	80043e0 <memmove+0x28>
 80043ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043d6:	e7f8      	b.n	80043ca <memmove+0x12>
 80043d8:	4402      	add	r2, r0
 80043da:	4601      	mov	r1, r0
 80043dc:	428a      	cmp	r2, r1
 80043de:	d100      	bne.n	80043e2 <memmove+0x2a>
 80043e0:	bd10      	pop	{r4, pc}
 80043e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043ea:	e7f7      	b.n	80043dc <memmove+0x24>

080043ec <_free_r>:
 80043ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043ee:	2900      	cmp	r1, #0
 80043f0:	d048      	beq.n	8004484 <_free_r+0x98>
 80043f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043f6:	9001      	str	r0, [sp, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f1a1 0404 	sub.w	r4, r1, #4
 80043fe:	bfb8      	it	lt
 8004400:	18e4      	addlt	r4, r4, r3
 8004402:	f000 f8d3 	bl	80045ac <__malloc_lock>
 8004406:	4a20      	ldr	r2, [pc, #128]	; (8004488 <_free_r+0x9c>)
 8004408:	9801      	ldr	r0, [sp, #4]
 800440a:	6813      	ldr	r3, [r2, #0]
 800440c:	4615      	mov	r5, r2
 800440e:	b933      	cbnz	r3, 800441e <_free_r+0x32>
 8004410:	6063      	str	r3, [r4, #4]
 8004412:	6014      	str	r4, [r2, #0]
 8004414:	b003      	add	sp, #12
 8004416:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800441a:	f000 b8cd 	b.w	80045b8 <__malloc_unlock>
 800441e:	42a3      	cmp	r3, r4
 8004420:	d90b      	bls.n	800443a <_free_r+0x4e>
 8004422:	6821      	ldr	r1, [r4, #0]
 8004424:	1862      	adds	r2, r4, r1
 8004426:	4293      	cmp	r3, r2
 8004428:	bf04      	itt	eq
 800442a:	681a      	ldreq	r2, [r3, #0]
 800442c:	685b      	ldreq	r3, [r3, #4]
 800442e:	6063      	str	r3, [r4, #4]
 8004430:	bf04      	itt	eq
 8004432:	1852      	addeq	r2, r2, r1
 8004434:	6022      	streq	r2, [r4, #0]
 8004436:	602c      	str	r4, [r5, #0]
 8004438:	e7ec      	b.n	8004414 <_free_r+0x28>
 800443a:	461a      	mov	r2, r3
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	b10b      	cbz	r3, 8004444 <_free_r+0x58>
 8004440:	42a3      	cmp	r3, r4
 8004442:	d9fa      	bls.n	800443a <_free_r+0x4e>
 8004444:	6811      	ldr	r1, [r2, #0]
 8004446:	1855      	adds	r5, r2, r1
 8004448:	42a5      	cmp	r5, r4
 800444a:	d10b      	bne.n	8004464 <_free_r+0x78>
 800444c:	6824      	ldr	r4, [r4, #0]
 800444e:	4421      	add	r1, r4
 8004450:	1854      	adds	r4, r2, r1
 8004452:	42a3      	cmp	r3, r4
 8004454:	6011      	str	r1, [r2, #0]
 8004456:	d1dd      	bne.n	8004414 <_free_r+0x28>
 8004458:	681c      	ldr	r4, [r3, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	6053      	str	r3, [r2, #4]
 800445e:	4421      	add	r1, r4
 8004460:	6011      	str	r1, [r2, #0]
 8004462:	e7d7      	b.n	8004414 <_free_r+0x28>
 8004464:	d902      	bls.n	800446c <_free_r+0x80>
 8004466:	230c      	movs	r3, #12
 8004468:	6003      	str	r3, [r0, #0]
 800446a:	e7d3      	b.n	8004414 <_free_r+0x28>
 800446c:	6825      	ldr	r5, [r4, #0]
 800446e:	1961      	adds	r1, r4, r5
 8004470:	428b      	cmp	r3, r1
 8004472:	bf04      	itt	eq
 8004474:	6819      	ldreq	r1, [r3, #0]
 8004476:	685b      	ldreq	r3, [r3, #4]
 8004478:	6063      	str	r3, [r4, #4]
 800447a:	bf04      	itt	eq
 800447c:	1949      	addeq	r1, r1, r5
 800447e:	6021      	streq	r1, [r4, #0]
 8004480:	6054      	str	r4, [r2, #4]
 8004482:	e7c7      	b.n	8004414 <_free_r+0x28>
 8004484:	b003      	add	sp, #12
 8004486:	bd30      	pop	{r4, r5, pc}
 8004488:	20000090 	.word	0x20000090

0800448c <_malloc_r>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	1ccd      	adds	r5, r1, #3
 8004490:	f025 0503 	bic.w	r5, r5, #3
 8004494:	3508      	adds	r5, #8
 8004496:	2d0c      	cmp	r5, #12
 8004498:	bf38      	it	cc
 800449a:	250c      	movcc	r5, #12
 800449c:	2d00      	cmp	r5, #0
 800449e:	4606      	mov	r6, r0
 80044a0:	db01      	blt.n	80044a6 <_malloc_r+0x1a>
 80044a2:	42a9      	cmp	r1, r5
 80044a4:	d903      	bls.n	80044ae <_malloc_r+0x22>
 80044a6:	230c      	movs	r3, #12
 80044a8:	6033      	str	r3, [r6, #0]
 80044aa:	2000      	movs	r0, #0
 80044ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044ae:	f000 f87d 	bl	80045ac <__malloc_lock>
 80044b2:	4921      	ldr	r1, [pc, #132]	; (8004538 <_malloc_r+0xac>)
 80044b4:	680a      	ldr	r2, [r1, #0]
 80044b6:	4614      	mov	r4, r2
 80044b8:	b99c      	cbnz	r4, 80044e2 <_malloc_r+0x56>
 80044ba:	4f20      	ldr	r7, [pc, #128]	; (800453c <_malloc_r+0xb0>)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	b923      	cbnz	r3, 80044ca <_malloc_r+0x3e>
 80044c0:	4621      	mov	r1, r4
 80044c2:	4630      	mov	r0, r6
 80044c4:	f000 f862 	bl	800458c <_sbrk_r>
 80044c8:	6038      	str	r0, [r7, #0]
 80044ca:	4629      	mov	r1, r5
 80044cc:	4630      	mov	r0, r6
 80044ce:	f000 f85d 	bl	800458c <_sbrk_r>
 80044d2:	1c43      	adds	r3, r0, #1
 80044d4:	d123      	bne.n	800451e <_malloc_r+0x92>
 80044d6:	230c      	movs	r3, #12
 80044d8:	6033      	str	r3, [r6, #0]
 80044da:	4630      	mov	r0, r6
 80044dc:	f000 f86c 	bl	80045b8 <__malloc_unlock>
 80044e0:	e7e3      	b.n	80044aa <_malloc_r+0x1e>
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	1b5b      	subs	r3, r3, r5
 80044e6:	d417      	bmi.n	8004518 <_malloc_r+0x8c>
 80044e8:	2b0b      	cmp	r3, #11
 80044ea:	d903      	bls.n	80044f4 <_malloc_r+0x68>
 80044ec:	6023      	str	r3, [r4, #0]
 80044ee:	441c      	add	r4, r3
 80044f0:	6025      	str	r5, [r4, #0]
 80044f2:	e004      	b.n	80044fe <_malloc_r+0x72>
 80044f4:	6863      	ldr	r3, [r4, #4]
 80044f6:	42a2      	cmp	r2, r4
 80044f8:	bf0c      	ite	eq
 80044fa:	600b      	streq	r3, [r1, #0]
 80044fc:	6053      	strne	r3, [r2, #4]
 80044fe:	4630      	mov	r0, r6
 8004500:	f000 f85a 	bl	80045b8 <__malloc_unlock>
 8004504:	f104 000b 	add.w	r0, r4, #11
 8004508:	1d23      	adds	r3, r4, #4
 800450a:	f020 0007 	bic.w	r0, r0, #7
 800450e:	1ac2      	subs	r2, r0, r3
 8004510:	d0cc      	beq.n	80044ac <_malloc_r+0x20>
 8004512:	1a1b      	subs	r3, r3, r0
 8004514:	50a3      	str	r3, [r4, r2]
 8004516:	e7c9      	b.n	80044ac <_malloc_r+0x20>
 8004518:	4622      	mov	r2, r4
 800451a:	6864      	ldr	r4, [r4, #4]
 800451c:	e7cc      	b.n	80044b8 <_malloc_r+0x2c>
 800451e:	1cc4      	adds	r4, r0, #3
 8004520:	f024 0403 	bic.w	r4, r4, #3
 8004524:	42a0      	cmp	r0, r4
 8004526:	d0e3      	beq.n	80044f0 <_malloc_r+0x64>
 8004528:	1a21      	subs	r1, r4, r0
 800452a:	4630      	mov	r0, r6
 800452c:	f000 f82e 	bl	800458c <_sbrk_r>
 8004530:	3001      	adds	r0, #1
 8004532:	d1dd      	bne.n	80044f0 <_malloc_r+0x64>
 8004534:	e7cf      	b.n	80044d6 <_malloc_r+0x4a>
 8004536:	bf00      	nop
 8004538:	20000090 	.word	0x20000090
 800453c:	20000094 	.word	0x20000094

08004540 <_realloc_r>:
 8004540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004542:	4607      	mov	r7, r0
 8004544:	4614      	mov	r4, r2
 8004546:	460e      	mov	r6, r1
 8004548:	b921      	cbnz	r1, 8004554 <_realloc_r+0x14>
 800454a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800454e:	4611      	mov	r1, r2
 8004550:	f7ff bf9c 	b.w	800448c <_malloc_r>
 8004554:	b922      	cbnz	r2, 8004560 <_realloc_r+0x20>
 8004556:	f7ff ff49 	bl	80043ec <_free_r>
 800455a:	4625      	mov	r5, r4
 800455c:	4628      	mov	r0, r5
 800455e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004560:	f000 f830 	bl	80045c4 <_malloc_usable_size_r>
 8004564:	42a0      	cmp	r0, r4
 8004566:	d20f      	bcs.n	8004588 <_realloc_r+0x48>
 8004568:	4621      	mov	r1, r4
 800456a:	4638      	mov	r0, r7
 800456c:	f7ff ff8e 	bl	800448c <_malloc_r>
 8004570:	4605      	mov	r5, r0
 8004572:	2800      	cmp	r0, #0
 8004574:	d0f2      	beq.n	800455c <_realloc_r+0x1c>
 8004576:	4631      	mov	r1, r6
 8004578:	4622      	mov	r2, r4
 800457a:	f7ff ff0f 	bl	800439c <memcpy>
 800457e:	4631      	mov	r1, r6
 8004580:	4638      	mov	r0, r7
 8004582:	f7ff ff33 	bl	80043ec <_free_r>
 8004586:	e7e9      	b.n	800455c <_realloc_r+0x1c>
 8004588:	4635      	mov	r5, r6
 800458a:	e7e7      	b.n	800455c <_realloc_r+0x1c>

0800458c <_sbrk_r>:
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	4d06      	ldr	r5, [pc, #24]	; (80045a8 <_sbrk_r+0x1c>)
 8004590:	2300      	movs	r3, #0
 8004592:	4604      	mov	r4, r0
 8004594:	4608      	mov	r0, r1
 8004596:	602b      	str	r3, [r5, #0]
 8004598:	f7fd fa8e 	bl	8001ab8 <_sbrk>
 800459c:	1c43      	adds	r3, r0, #1
 800459e:	d102      	bne.n	80045a6 <_sbrk_r+0x1a>
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	b103      	cbz	r3, 80045a6 <_sbrk_r+0x1a>
 80045a4:	6023      	str	r3, [r4, #0]
 80045a6:	bd38      	pop	{r3, r4, r5, pc}
 80045a8:	200001e0 	.word	0x200001e0

080045ac <__malloc_lock>:
 80045ac:	4801      	ldr	r0, [pc, #4]	; (80045b4 <__malloc_lock+0x8>)
 80045ae:	f000 b811 	b.w	80045d4 <__retarget_lock_acquire_recursive>
 80045b2:	bf00      	nop
 80045b4:	200001e8 	.word	0x200001e8

080045b8 <__malloc_unlock>:
 80045b8:	4801      	ldr	r0, [pc, #4]	; (80045c0 <__malloc_unlock+0x8>)
 80045ba:	f000 b80c 	b.w	80045d6 <__retarget_lock_release_recursive>
 80045be:	bf00      	nop
 80045c0:	200001e8 	.word	0x200001e8

080045c4 <_malloc_usable_size_r>:
 80045c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045c8:	1f18      	subs	r0, r3, #4
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	bfbc      	itt	lt
 80045ce:	580b      	ldrlt	r3, [r1, r0]
 80045d0:	18c0      	addlt	r0, r0, r3
 80045d2:	4770      	bx	lr

080045d4 <__retarget_lock_acquire_recursive>:
 80045d4:	4770      	bx	lr

080045d6 <__retarget_lock_release_recursive>:
 80045d6:	4770      	bx	lr

080045d8 <roundf>:
 80045d8:	ee10 0a10 	vmov	r0, s0
 80045dc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80045e0:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80045e4:	2a16      	cmp	r2, #22
 80045e6:	dc15      	bgt.n	8004614 <roundf+0x3c>
 80045e8:	2a00      	cmp	r2, #0
 80045ea:	da08      	bge.n	80045fe <roundf+0x26>
 80045ec:	3201      	adds	r2, #1
 80045ee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80045f2:	d101      	bne.n	80045f8 <roundf+0x20>
 80045f4:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80045f8:	ee00 3a10 	vmov	s0, r3
 80045fc:	4770      	bx	lr
 80045fe:	4908      	ldr	r1, [pc, #32]	; (8004620 <roundf+0x48>)
 8004600:	4111      	asrs	r1, r2
 8004602:	4208      	tst	r0, r1
 8004604:	d0fa      	beq.n	80045fc <roundf+0x24>
 8004606:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800460a:	4113      	asrs	r3, r2
 800460c:	4403      	add	r3, r0
 800460e:	ea23 0301 	bic.w	r3, r3, r1
 8004612:	e7f1      	b.n	80045f8 <roundf+0x20>
 8004614:	2a80      	cmp	r2, #128	; 0x80
 8004616:	d1f1      	bne.n	80045fc <roundf+0x24>
 8004618:	ee30 0a00 	vadd.f32	s0, s0, s0
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	007fffff 	.word	0x007fffff

08004624 <atan2>:
 8004624:	f000 b800 	b.w	8004628 <__ieee754_atan2>

08004628 <__ieee754_atan2>:
 8004628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800462c:	ec57 6b11 	vmov	r6, r7, d1
 8004630:	4273      	negs	r3, r6
 8004632:	f8df e184 	ldr.w	lr, [pc, #388]	; 80047b8 <__ieee754_atan2+0x190>
 8004636:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800463a:	4333      	orrs	r3, r6
 800463c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8004640:	4573      	cmp	r3, lr
 8004642:	ec51 0b10 	vmov	r0, r1, d0
 8004646:	ee11 8a10 	vmov	r8, s2
 800464a:	d80a      	bhi.n	8004662 <__ieee754_atan2+0x3a>
 800464c:	4244      	negs	r4, r0
 800464e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004652:	4304      	orrs	r4, r0
 8004654:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8004658:	4574      	cmp	r4, lr
 800465a:	ee10 9a10 	vmov	r9, s0
 800465e:	468c      	mov	ip, r1
 8004660:	d907      	bls.n	8004672 <__ieee754_atan2+0x4a>
 8004662:	4632      	mov	r2, r6
 8004664:	463b      	mov	r3, r7
 8004666:	f7fb fe19 	bl	800029c <__adddf3>
 800466a:	ec41 0b10 	vmov	d0, r0, r1
 800466e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004672:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8004676:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800467a:	4334      	orrs	r4, r6
 800467c:	d103      	bne.n	8004686 <__ieee754_atan2+0x5e>
 800467e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004682:	f000 b89d 	b.w	80047c0 <atan>
 8004686:	17bc      	asrs	r4, r7, #30
 8004688:	f004 0402 	and.w	r4, r4, #2
 800468c:	ea53 0909 	orrs.w	r9, r3, r9
 8004690:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8004694:	d107      	bne.n	80046a6 <__ieee754_atan2+0x7e>
 8004696:	2c02      	cmp	r4, #2
 8004698:	d060      	beq.n	800475c <__ieee754_atan2+0x134>
 800469a:	2c03      	cmp	r4, #3
 800469c:	d1e5      	bne.n	800466a <__ieee754_atan2+0x42>
 800469e:	a142      	add	r1, pc, #264	; (adr r1, 80047a8 <__ieee754_atan2+0x180>)
 80046a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046a4:	e7e1      	b.n	800466a <__ieee754_atan2+0x42>
 80046a6:	ea52 0808 	orrs.w	r8, r2, r8
 80046aa:	d106      	bne.n	80046ba <__ieee754_atan2+0x92>
 80046ac:	f1bc 0f00 	cmp.w	ip, #0
 80046b0:	da5f      	bge.n	8004772 <__ieee754_atan2+0x14a>
 80046b2:	a13f      	add	r1, pc, #252	; (adr r1, 80047b0 <__ieee754_atan2+0x188>)
 80046b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046b8:	e7d7      	b.n	800466a <__ieee754_atan2+0x42>
 80046ba:	4572      	cmp	r2, lr
 80046bc:	d10f      	bne.n	80046de <__ieee754_atan2+0xb6>
 80046be:	4293      	cmp	r3, r2
 80046c0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80046c4:	d107      	bne.n	80046d6 <__ieee754_atan2+0xae>
 80046c6:	2c02      	cmp	r4, #2
 80046c8:	d84c      	bhi.n	8004764 <__ieee754_atan2+0x13c>
 80046ca:	4b35      	ldr	r3, [pc, #212]	; (80047a0 <__ieee754_atan2+0x178>)
 80046cc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80046d0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80046d4:	e7c9      	b.n	800466a <__ieee754_atan2+0x42>
 80046d6:	2c02      	cmp	r4, #2
 80046d8:	d848      	bhi.n	800476c <__ieee754_atan2+0x144>
 80046da:	4b32      	ldr	r3, [pc, #200]	; (80047a4 <__ieee754_atan2+0x17c>)
 80046dc:	e7f6      	b.n	80046cc <__ieee754_atan2+0xa4>
 80046de:	4573      	cmp	r3, lr
 80046e0:	d0e4      	beq.n	80046ac <__ieee754_atan2+0x84>
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80046e8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80046ec:	da1e      	bge.n	800472c <__ieee754_atan2+0x104>
 80046ee:	2f00      	cmp	r7, #0
 80046f0:	da01      	bge.n	80046f6 <__ieee754_atan2+0xce>
 80046f2:	323c      	adds	r2, #60	; 0x3c
 80046f4:	db1e      	blt.n	8004734 <__ieee754_atan2+0x10c>
 80046f6:	4632      	mov	r2, r6
 80046f8:	463b      	mov	r3, r7
 80046fa:	f7fc f8af 	bl	800085c <__aeabi_ddiv>
 80046fe:	ec41 0b10 	vmov	d0, r0, r1
 8004702:	f000 f9fd 	bl	8004b00 <fabs>
 8004706:	f000 f85b 	bl	80047c0 <atan>
 800470a:	ec51 0b10 	vmov	r0, r1, d0
 800470e:	2c01      	cmp	r4, #1
 8004710:	d013      	beq.n	800473a <__ieee754_atan2+0x112>
 8004712:	2c02      	cmp	r4, #2
 8004714:	d015      	beq.n	8004742 <__ieee754_atan2+0x11a>
 8004716:	2c00      	cmp	r4, #0
 8004718:	d0a7      	beq.n	800466a <__ieee754_atan2+0x42>
 800471a:	a319      	add	r3, pc, #100	; (adr r3, 8004780 <__ieee754_atan2+0x158>)
 800471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004720:	f7fb fdba 	bl	8000298 <__aeabi_dsub>
 8004724:	a318      	add	r3, pc, #96	; (adr r3, 8004788 <__ieee754_atan2+0x160>)
 8004726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472a:	e014      	b.n	8004756 <__ieee754_atan2+0x12e>
 800472c:	a118      	add	r1, pc, #96	; (adr r1, 8004790 <__ieee754_atan2+0x168>)
 800472e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004732:	e7ec      	b.n	800470e <__ieee754_atan2+0xe6>
 8004734:	2000      	movs	r0, #0
 8004736:	2100      	movs	r1, #0
 8004738:	e7e9      	b.n	800470e <__ieee754_atan2+0xe6>
 800473a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800473e:	4619      	mov	r1, r3
 8004740:	e793      	b.n	800466a <__ieee754_atan2+0x42>
 8004742:	a30f      	add	r3, pc, #60	; (adr r3, 8004780 <__ieee754_atan2+0x158>)
 8004744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004748:	f7fb fda6 	bl	8000298 <__aeabi_dsub>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	a10d      	add	r1, pc, #52	; (adr r1, 8004788 <__ieee754_atan2+0x160>)
 8004752:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004756:	f7fb fd9f 	bl	8000298 <__aeabi_dsub>
 800475a:	e786      	b.n	800466a <__ieee754_atan2+0x42>
 800475c:	a10a      	add	r1, pc, #40	; (adr r1, 8004788 <__ieee754_atan2+0x160>)
 800475e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004762:	e782      	b.n	800466a <__ieee754_atan2+0x42>
 8004764:	a10c      	add	r1, pc, #48	; (adr r1, 8004798 <__ieee754_atan2+0x170>)
 8004766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800476a:	e77e      	b.n	800466a <__ieee754_atan2+0x42>
 800476c:	2000      	movs	r0, #0
 800476e:	2100      	movs	r1, #0
 8004770:	e77b      	b.n	800466a <__ieee754_atan2+0x42>
 8004772:	a107      	add	r1, pc, #28	; (adr r1, 8004790 <__ieee754_atan2+0x168>)
 8004774:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004778:	e777      	b.n	800466a <__ieee754_atan2+0x42>
 800477a:	bf00      	nop
 800477c:	f3af 8000 	nop.w
 8004780:	33145c07 	.word	0x33145c07
 8004784:	3ca1a626 	.word	0x3ca1a626
 8004788:	54442d18 	.word	0x54442d18
 800478c:	400921fb 	.word	0x400921fb
 8004790:	54442d18 	.word	0x54442d18
 8004794:	3ff921fb 	.word	0x3ff921fb
 8004798:	54442d18 	.word	0x54442d18
 800479c:	3fe921fb 	.word	0x3fe921fb
 80047a0:	08004b90 	.word	0x08004b90
 80047a4:	08004ba8 	.word	0x08004ba8
 80047a8:	54442d18 	.word	0x54442d18
 80047ac:	c00921fb 	.word	0xc00921fb
 80047b0:	54442d18 	.word	0x54442d18
 80047b4:	bff921fb 	.word	0xbff921fb
 80047b8:	7ff00000 	.word	0x7ff00000
 80047bc:	00000000 	.word	0x00000000

080047c0 <atan>:
 80047c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c4:	ec55 4b10 	vmov	r4, r5, d0
 80047c8:	4bc3      	ldr	r3, [pc, #780]	; (8004ad8 <atan+0x318>)
 80047ca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80047ce:	429e      	cmp	r6, r3
 80047d0:	46ab      	mov	fp, r5
 80047d2:	dd18      	ble.n	8004806 <atan+0x46>
 80047d4:	4bc1      	ldr	r3, [pc, #772]	; (8004adc <atan+0x31c>)
 80047d6:	429e      	cmp	r6, r3
 80047d8:	dc01      	bgt.n	80047de <atan+0x1e>
 80047da:	d109      	bne.n	80047f0 <atan+0x30>
 80047dc:	b144      	cbz	r4, 80047f0 <atan+0x30>
 80047de:	4622      	mov	r2, r4
 80047e0:	462b      	mov	r3, r5
 80047e2:	4620      	mov	r0, r4
 80047e4:	4629      	mov	r1, r5
 80047e6:	f7fb fd59 	bl	800029c <__adddf3>
 80047ea:	4604      	mov	r4, r0
 80047ec:	460d      	mov	r5, r1
 80047ee:	e006      	b.n	80047fe <atan+0x3e>
 80047f0:	f1bb 0f00 	cmp.w	fp, #0
 80047f4:	f300 8131 	bgt.w	8004a5a <atan+0x29a>
 80047f8:	a59b      	add	r5, pc, #620	; (adr r5, 8004a68 <atan+0x2a8>)
 80047fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80047fe:	ec45 4b10 	vmov	d0, r4, r5
 8004802:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004806:	4bb6      	ldr	r3, [pc, #728]	; (8004ae0 <atan+0x320>)
 8004808:	429e      	cmp	r6, r3
 800480a:	dc14      	bgt.n	8004836 <atan+0x76>
 800480c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004810:	429e      	cmp	r6, r3
 8004812:	dc0d      	bgt.n	8004830 <atan+0x70>
 8004814:	a396      	add	r3, pc, #600	; (adr r3, 8004a70 <atan+0x2b0>)
 8004816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481a:	ee10 0a10 	vmov	r0, s0
 800481e:	4629      	mov	r1, r5
 8004820:	f7fb fd3c 	bl	800029c <__adddf3>
 8004824:	4baf      	ldr	r3, [pc, #700]	; (8004ae4 <atan+0x324>)
 8004826:	2200      	movs	r2, #0
 8004828:	f7fc f97e 	bl	8000b28 <__aeabi_dcmpgt>
 800482c:	2800      	cmp	r0, #0
 800482e:	d1e6      	bne.n	80047fe <atan+0x3e>
 8004830:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004834:	e02b      	b.n	800488e <atan+0xce>
 8004836:	f000 f963 	bl	8004b00 <fabs>
 800483a:	4bab      	ldr	r3, [pc, #684]	; (8004ae8 <atan+0x328>)
 800483c:	429e      	cmp	r6, r3
 800483e:	ec55 4b10 	vmov	r4, r5, d0
 8004842:	f300 80bf 	bgt.w	80049c4 <atan+0x204>
 8004846:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800484a:	429e      	cmp	r6, r3
 800484c:	f300 80a0 	bgt.w	8004990 <atan+0x1d0>
 8004850:	ee10 2a10 	vmov	r2, s0
 8004854:	ee10 0a10 	vmov	r0, s0
 8004858:	462b      	mov	r3, r5
 800485a:	4629      	mov	r1, r5
 800485c:	f7fb fd1e 	bl	800029c <__adddf3>
 8004860:	4ba0      	ldr	r3, [pc, #640]	; (8004ae4 <atan+0x324>)
 8004862:	2200      	movs	r2, #0
 8004864:	f7fb fd18 	bl	8000298 <__aeabi_dsub>
 8004868:	2200      	movs	r2, #0
 800486a:	4606      	mov	r6, r0
 800486c:	460f      	mov	r7, r1
 800486e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004872:	4620      	mov	r0, r4
 8004874:	4629      	mov	r1, r5
 8004876:	f7fb fd11 	bl	800029c <__adddf3>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4630      	mov	r0, r6
 8004880:	4639      	mov	r1, r7
 8004882:	f7fb ffeb 	bl	800085c <__aeabi_ddiv>
 8004886:	f04f 0a00 	mov.w	sl, #0
 800488a:	4604      	mov	r4, r0
 800488c:	460d      	mov	r5, r1
 800488e:	4622      	mov	r2, r4
 8004890:	462b      	mov	r3, r5
 8004892:	4620      	mov	r0, r4
 8004894:	4629      	mov	r1, r5
 8004896:	f7fb feb7 	bl	8000608 <__aeabi_dmul>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	4680      	mov	r8, r0
 80048a0:	4689      	mov	r9, r1
 80048a2:	f7fb feb1 	bl	8000608 <__aeabi_dmul>
 80048a6:	a374      	add	r3, pc, #464	; (adr r3, 8004a78 <atan+0x2b8>)
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	4606      	mov	r6, r0
 80048ae:	460f      	mov	r7, r1
 80048b0:	f7fb feaa 	bl	8000608 <__aeabi_dmul>
 80048b4:	a372      	add	r3, pc, #456	; (adr r3, 8004a80 <atan+0x2c0>)
 80048b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ba:	f7fb fcef 	bl	800029c <__adddf3>
 80048be:	4632      	mov	r2, r6
 80048c0:	463b      	mov	r3, r7
 80048c2:	f7fb fea1 	bl	8000608 <__aeabi_dmul>
 80048c6:	a370      	add	r3, pc, #448	; (adr r3, 8004a88 <atan+0x2c8>)
 80048c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048cc:	f7fb fce6 	bl	800029c <__adddf3>
 80048d0:	4632      	mov	r2, r6
 80048d2:	463b      	mov	r3, r7
 80048d4:	f7fb fe98 	bl	8000608 <__aeabi_dmul>
 80048d8:	a36d      	add	r3, pc, #436	; (adr r3, 8004a90 <atan+0x2d0>)
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	f7fb fcdd 	bl	800029c <__adddf3>
 80048e2:	4632      	mov	r2, r6
 80048e4:	463b      	mov	r3, r7
 80048e6:	f7fb fe8f 	bl	8000608 <__aeabi_dmul>
 80048ea:	a36b      	add	r3, pc, #428	; (adr r3, 8004a98 <atan+0x2d8>)
 80048ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f0:	f7fb fcd4 	bl	800029c <__adddf3>
 80048f4:	4632      	mov	r2, r6
 80048f6:	463b      	mov	r3, r7
 80048f8:	f7fb fe86 	bl	8000608 <__aeabi_dmul>
 80048fc:	a368      	add	r3, pc, #416	; (adr r3, 8004aa0 <atan+0x2e0>)
 80048fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004902:	f7fb fccb 	bl	800029c <__adddf3>
 8004906:	4642      	mov	r2, r8
 8004908:	464b      	mov	r3, r9
 800490a:	f7fb fe7d 	bl	8000608 <__aeabi_dmul>
 800490e:	a366      	add	r3, pc, #408	; (adr r3, 8004aa8 <atan+0x2e8>)
 8004910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004914:	4680      	mov	r8, r0
 8004916:	4689      	mov	r9, r1
 8004918:	4630      	mov	r0, r6
 800491a:	4639      	mov	r1, r7
 800491c:	f7fb fe74 	bl	8000608 <__aeabi_dmul>
 8004920:	a363      	add	r3, pc, #396	; (adr r3, 8004ab0 <atan+0x2f0>)
 8004922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004926:	f7fb fcb7 	bl	8000298 <__aeabi_dsub>
 800492a:	4632      	mov	r2, r6
 800492c:	463b      	mov	r3, r7
 800492e:	f7fb fe6b 	bl	8000608 <__aeabi_dmul>
 8004932:	a361      	add	r3, pc, #388	; (adr r3, 8004ab8 <atan+0x2f8>)
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	f7fb fcae 	bl	8000298 <__aeabi_dsub>
 800493c:	4632      	mov	r2, r6
 800493e:	463b      	mov	r3, r7
 8004940:	f7fb fe62 	bl	8000608 <__aeabi_dmul>
 8004944:	a35e      	add	r3, pc, #376	; (adr r3, 8004ac0 <atan+0x300>)
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	f7fb fca5 	bl	8000298 <__aeabi_dsub>
 800494e:	4632      	mov	r2, r6
 8004950:	463b      	mov	r3, r7
 8004952:	f7fb fe59 	bl	8000608 <__aeabi_dmul>
 8004956:	a35c      	add	r3, pc, #368	; (adr r3, 8004ac8 <atan+0x308>)
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	f7fb fc9c 	bl	8000298 <__aeabi_dsub>
 8004960:	4632      	mov	r2, r6
 8004962:	463b      	mov	r3, r7
 8004964:	f7fb fe50 	bl	8000608 <__aeabi_dmul>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4640      	mov	r0, r8
 800496e:	4649      	mov	r1, r9
 8004970:	f7fb fc94 	bl	800029c <__adddf3>
 8004974:	4622      	mov	r2, r4
 8004976:	462b      	mov	r3, r5
 8004978:	f7fb fe46 	bl	8000608 <__aeabi_dmul>
 800497c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	d14b      	bne.n	8004a1e <atan+0x25e>
 8004986:	4620      	mov	r0, r4
 8004988:	4629      	mov	r1, r5
 800498a:	f7fb fc85 	bl	8000298 <__aeabi_dsub>
 800498e:	e72c      	b.n	80047ea <atan+0x2a>
 8004990:	ee10 0a10 	vmov	r0, s0
 8004994:	4b53      	ldr	r3, [pc, #332]	; (8004ae4 <atan+0x324>)
 8004996:	2200      	movs	r2, #0
 8004998:	4629      	mov	r1, r5
 800499a:	f7fb fc7d 	bl	8000298 <__aeabi_dsub>
 800499e:	4b51      	ldr	r3, [pc, #324]	; (8004ae4 <atan+0x324>)
 80049a0:	4606      	mov	r6, r0
 80049a2:	460f      	mov	r7, r1
 80049a4:	2200      	movs	r2, #0
 80049a6:	4620      	mov	r0, r4
 80049a8:	4629      	mov	r1, r5
 80049aa:	f7fb fc77 	bl	800029c <__adddf3>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	4630      	mov	r0, r6
 80049b4:	4639      	mov	r1, r7
 80049b6:	f7fb ff51 	bl	800085c <__aeabi_ddiv>
 80049ba:	f04f 0a01 	mov.w	sl, #1
 80049be:	4604      	mov	r4, r0
 80049c0:	460d      	mov	r5, r1
 80049c2:	e764      	b.n	800488e <atan+0xce>
 80049c4:	4b49      	ldr	r3, [pc, #292]	; (8004aec <atan+0x32c>)
 80049c6:	429e      	cmp	r6, r3
 80049c8:	da1d      	bge.n	8004a06 <atan+0x246>
 80049ca:	ee10 0a10 	vmov	r0, s0
 80049ce:	4b48      	ldr	r3, [pc, #288]	; (8004af0 <atan+0x330>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	4629      	mov	r1, r5
 80049d4:	f7fb fc60 	bl	8000298 <__aeabi_dsub>
 80049d8:	4b45      	ldr	r3, [pc, #276]	; (8004af0 <atan+0x330>)
 80049da:	4606      	mov	r6, r0
 80049dc:	460f      	mov	r7, r1
 80049de:	2200      	movs	r2, #0
 80049e0:	4620      	mov	r0, r4
 80049e2:	4629      	mov	r1, r5
 80049e4:	f7fb fe10 	bl	8000608 <__aeabi_dmul>
 80049e8:	4b3e      	ldr	r3, [pc, #248]	; (8004ae4 <atan+0x324>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	f7fb fc56 	bl	800029c <__adddf3>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4630      	mov	r0, r6
 80049f6:	4639      	mov	r1, r7
 80049f8:	f7fb ff30 	bl	800085c <__aeabi_ddiv>
 80049fc:	f04f 0a02 	mov.w	sl, #2
 8004a00:	4604      	mov	r4, r0
 8004a02:	460d      	mov	r5, r1
 8004a04:	e743      	b.n	800488e <atan+0xce>
 8004a06:	462b      	mov	r3, r5
 8004a08:	ee10 2a10 	vmov	r2, s0
 8004a0c:	4939      	ldr	r1, [pc, #228]	; (8004af4 <atan+0x334>)
 8004a0e:	2000      	movs	r0, #0
 8004a10:	f7fb ff24 	bl	800085c <__aeabi_ddiv>
 8004a14:	f04f 0a03 	mov.w	sl, #3
 8004a18:	4604      	mov	r4, r0
 8004a1a:	460d      	mov	r5, r1
 8004a1c:	e737      	b.n	800488e <atan+0xce>
 8004a1e:	4b36      	ldr	r3, [pc, #216]	; (8004af8 <atan+0x338>)
 8004a20:	4e36      	ldr	r6, [pc, #216]	; (8004afc <atan+0x33c>)
 8004a22:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8004a26:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8004a2a:	e9da 2300 	ldrd	r2, r3, [sl]
 8004a2e:	f7fb fc33 	bl	8000298 <__aeabi_dsub>
 8004a32:	4622      	mov	r2, r4
 8004a34:	462b      	mov	r3, r5
 8004a36:	f7fb fc2f 	bl	8000298 <__aeabi_dsub>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004a42:	f7fb fc29 	bl	8000298 <__aeabi_dsub>
 8004a46:	f1bb 0f00 	cmp.w	fp, #0
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	460d      	mov	r5, r1
 8004a4e:	f6bf aed6 	bge.w	80047fe <atan+0x3e>
 8004a52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a56:	461d      	mov	r5, r3
 8004a58:	e6d1      	b.n	80047fe <atan+0x3e>
 8004a5a:	a51d      	add	r5, pc, #116	; (adr r5, 8004ad0 <atan+0x310>)
 8004a5c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004a60:	e6cd      	b.n	80047fe <atan+0x3e>
 8004a62:	bf00      	nop
 8004a64:	f3af 8000 	nop.w
 8004a68:	54442d18 	.word	0x54442d18
 8004a6c:	bff921fb 	.word	0xbff921fb
 8004a70:	8800759c 	.word	0x8800759c
 8004a74:	7e37e43c 	.word	0x7e37e43c
 8004a78:	e322da11 	.word	0xe322da11
 8004a7c:	3f90ad3a 	.word	0x3f90ad3a
 8004a80:	24760deb 	.word	0x24760deb
 8004a84:	3fa97b4b 	.word	0x3fa97b4b
 8004a88:	a0d03d51 	.word	0xa0d03d51
 8004a8c:	3fb10d66 	.word	0x3fb10d66
 8004a90:	c54c206e 	.word	0xc54c206e
 8004a94:	3fb745cd 	.word	0x3fb745cd
 8004a98:	920083ff 	.word	0x920083ff
 8004a9c:	3fc24924 	.word	0x3fc24924
 8004aa0:	5555550d 	.word	0x5555550d
 8004aa4:	3fd55555 	.word	0x3fd55555
 8004aa8:	2c6a6c2f 	.word	0x2c6a6c2f
 8004aac:	bfa2b444 	.word	0xbfa2b444
 8004ab0:	52defd9a 	.word	0x52defd9a
 8004ab4:	3fadde2d 	.word	0x3fadde2d
 8004ab8:	af749a6d 	.word	0xaf749a6d
 8004abc:	3fb3b0f2 	.word	0x3fb3b0f2
 8004ac0:	fe231671 	.word	0xfe231671
 8004ac4:	3fbc71c6 	.word	0x3fbc71c6
 8004ac8:	9998ebc4 	.word	0x9998ebc4
 8004acc:	3fc99999 	.word	0x3fc99999
 8004ad0:	54442d18 	.word	0x54442d18
 8004ad4:	3ff921fb 	.word	0x3ff921fb
 8004ad8:	440fffff 	.word	0x440fffff
 8004adc:	7ff00000 	.word	0x7ff00000
 8004ae0:	3fdbffff 	.word	0x3fdbffff
 8004ae4:	3ff00000 	.word	0x3ff00000
 8004ae8:	3ff2ffff 	.word	0x3ff2ffff
 8004aec:	40038000 	.word	0x40038000
 8004af0:	3ff80000 	.word	0x3ff80000
 8004af4:	bff00000 	.word	0xbff00000
 8004af8:	08004be0 	.word	0x08004be0
 8004afc:	08004bc0 	.word	0x08004bc0

08004b00 <fabs>:
 8004b00:	ec51 0b10 	vmov	r0, r1, d0
 8004b04:	ee10 2a10 	vmov	r2, s0
 8004b08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004b0c:	ec43 2b10 	vmov	d0, r2, r3
 8004b10:	4770      	bx	lr
	...

08004b14 <_init>:
 8004b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b16:	bf00      	nop
 8004b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b1a:	bc08      	pop	{r3}
 8004b1c:	469e      	mov	lr, r3
 8004b1e:	4770      	bx	lr

08004b20 <_fini>:
 8004b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b22:	bf00      	nop
 8004b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b26:	bc08      	pop	{r3}
 8004b28:	469e      	mov	lr, r3
 8004b2a:	4770      	bx	lr
