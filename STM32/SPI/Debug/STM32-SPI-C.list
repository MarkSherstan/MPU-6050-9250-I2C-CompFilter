
STM32-SPI-C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003cd4  08003cd4  00013cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d54  08003d54  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003d54  08003d54  00013d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d5c  08003d5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d5c  08003d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d60  08003d60  00013d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000070  08003dd4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08003dd4  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011328  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002403  00000000  00000000  000313c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  000337d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  00034538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a25  00000000  00000000  000351a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010396  00000000  00000000  0004cbcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fdd8  00000000  00000000  0005cf63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ecd3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ac8  00000000  00000000  000ecd90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003cbc 	.word	0x08003cbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003cbc 	.word	0x08003cbc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MPU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{   
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
    // Initialize variables
    uint8_t check, addr, val;

    // Confirm device
    MPU_REG_READ(SPIx, WHO_AM_I, &check, 1);
 8000592:	f107 020f 	add.w	r2, r7, #15
 8000596:	2301      	movs	r3, #1
 8000598:	2175      	movs	r1, #117	; 0x75
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f000 f850 	bl	8000640 <MPU_REG_READ>
    if (check == WHO_AM_I_9250_ANS)
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	2b71      	cmp	r3, #113	; 0x71
 80005a4:	d129      	bne.n	80005fa <MPU_begin+0x72>
    {
        // Startup / reset the sensor
        addr = PWR_MGMT_1;
 80005a6:	236b      	movs	r3, #107	; 0x6b
 80005a8:	73bb      	strb	r3, [r7, #14]
        val = 0x00;
 80005aa:	2300      	movs	r3, #0
 80005ac:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, &addr, &val);
 80005ae:	f107 020d 	add.w	r2, r7, #13
 80005b2:	f107 030e 	add.w	r3, r7, #14
 80005b6:	4619      	mov	r1, r3
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f000 f823 	bl	8000604 <MPU_REG_WRITE>

        // Disable I2C (SPI only)
        addr = USER_CTRL;
 80005be:	236a      	movs	r3, #106	; 0x6a
 80005c0:	73bb      	strb	r3, [r7, #14]
        val = 0x10;
 80005c2:	2310      	movs	r3, #16
 80005c4:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, &addr, &val);
 80005c6:	f107 020d 	add.w	r2, r7, #13
 80005ca:	f107 030e 	add.w	r3, r7, #14
 80005ce:	4619      	mov	r1, r3
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 f817 	bl	8000604 <MPU_REG_WRITE>
        
        // Set the full scale ranges
        setAccFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.aFullScaleRange);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80005dc:	461a      	mov	r2, r3
 80005de:	6839      	ldr	r1, [r7, #0]
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f000 f867 	bl	80006b4 <setAccFullScaleRange>
        setGyroFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.gFullScaleRange);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80005ec:	461a      	mov	r2, r3
 80005ee:	6839      	ldr	r1, [r7, #0]
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 f8c7 	bl	8000784 <setGyroFullScaleRange>
        return 1;
 80005f6:	2301      	movs	r3, #1
 80005f8:	e000      	b.n	80005fc <MPU_begin+0x74>
    }
    else 
    {
        return 0;
 80005fa:	2300      	movs	r3, #0
    }
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <MPU_REG_WRITE>:

/// @brief Read a specific registry address
/// @param pAddr Pointer to address to be written to
/// @param pVal Pointer of value to write to given address
void MPU_REG_WRITE(SPI_HandleTypeDef *SPIx, uint8_t *pAddr, uint8_t *pVal)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
	MPU_CS(CS_SELECT);
 8000610:	2000      	movs	r0, #0
 8000612:	f000 f83d 	bl	8000690 <MPU_CS>
    HAL_SPI_Transmit(SPIx, pAddr, 1, SPI_TIMOUT_MS);
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	2201      	movs	r2, #1
 800061c:	68b9      	ldr	r1, [r7, #8]
 800061e:	68f8      	ldr	r0, [r7, #12]
 8000620:	f001 fd85 	bl	800212e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, pVal, 1, SPI_TIMOUT_MS);
 8000624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000628:	2201      	movs	r2, #1
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	68f8      	ldr	r0, [r7, #12]
 800062e:	f001 fd7e 	bl	800212e <HAL_SPI_Transmit>
	MPU_CS(CS_DESELECT);
 8000632:	2001      	movs	r0, #1
 8000634:	f000 f82c 	bl	8000690 <MPU_CS>
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <MPU_REG_READ>:
/// @param SPIx Pointer to SPI structure config
/// @param addr Address to start reading at
/// @param pRxData Pointer to data buffer
/// @param RxSize Size of data buffer
void MPU_REG_READ(SPI_HandleTypeDef *SPIx, uint8_t addr, uint8_t *pRxData, uint16_t RxSize)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	607a      	str	r2, [r7, #4]
 800064a:	461a      	mov	r2, r3
 800064c:	460b      	mov	r3, r1
 800064e:	72fb      	strb	r3, [r7, #11]
 8000650:	4613      	mov	r3, r2
 8000652:	813b      	strh	r3, [r7, #8]
	MPU_CS(CS_SELECT);
 8000654:	2000      	movs	r0, #0
 8000656:	f000 f81b 	bl	8000690 <MPU_CS>
	uint8_t writeAddr = addr | READWRITE;
 800065a:	7afb      	ldrb	r3, [r7, #11]
 800065c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000660:	b2db      	uxtb	r3, r3
 8000662:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(SPIx, &writeAddr, 1, SPI_TIMOUT_MS);
 8000664:	f107 0117 	add.w	r1, r7, #23
 8000668:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066c:	2201      	movs	r2, #1
 800066e:	68f8      	ldr	r0, [r7, #12]
 8000670:	f001 fd5d 	bl	800212e <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPIx, pRxData, RxSize, SPI_TIMOUT_MS);
 8000674:	893a      	ldrh	r2, [r7, #8]
 8000676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067a:	6879      	ldr	r1, [r7, #4]
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f001 fe92 	bl	80023a6 <HAL_SPI_Receive>
	MPU_CS(CS_DESELECT);
 8000682:	2001      	movs	r0, #1
 8000684:	f000 f804 	bl	8000690 <MPU_CS>
}
 8000688:	bf00      	nop
 800068a:	3718      	adds	r7, #24
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <MPU_CS>:

/// @brief Set CS state to either start or end transmissions
/// @param state Set low to select, high to deselect
void MPU_CS(uint8_t state)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
//	HAL_GPIO_WritePin(mpuConfig.CS_PORT, mpuConfig.CS_PIN, state);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, state);
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	461a      	mov	r2, r3
 800069e:	2140      	movs	r1, #64	; 0x40
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <MPU_CS+0x20>)
 80006a2:	f001 f801 	bl	80016a8 <HAL_GPIO_WritePin>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40020400 	.word	0x40020400

080006b4 <setAccFullScaleRange>:
/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void setAccFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t aScale)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	4613      	mov	r3, r2
 80006c0:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = ACCEL_CONFIG;
 80006c2:	231c      	movs	r3, #28
 80006c4:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (aScale)
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b03      	cmp	r3, #3
 80006ca:	d847      	bhi.n	800075c <setAccFullScaleRange+0xa8>
 80006cc:	a201      	add	r2, pc, #4	; (adr r2, 80006d4 <setAccFullScaleRange+0x20>)
 80006ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d2:	bf00      	nop
 80006d4:	080006e5 	.word	0x080006e5
 80006d8:	08000703 	.word	0x08000703
 80006dc:	08000721 	.word	0x08000721
 80006e0:	0800073f 	.word	0x0800073f
    {
    case AFS_2G:
        pMPU9250->sensorData.aScaleFactor = 16384.0;
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80006ea:	601a      	str	r2, [r3, #0]
        val = 0x00;
 80006ec:	2300      	movs	r3, #0
 80006ee:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, &addr, &val);
 80006f0:	f107 0216 	add.w	r2, r7, #22
 80006f4:	f107 0317 	add.w	r3, r7, #23
 80006f8:	4619      	mov	r1, r3
 80006fa:	68f8      	ldr	r0, [r7, #12]
 80006fc:	f7ff ff82 	bl	8000604 <MPU_REG_WRITE>
        break;
 8000700:	e03b      	b.n	800077a <setAccFullScaleRange+0xc6>
    case AFS_4G:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000708:	601a      	str	r2, [r3, #0]
        val = 0x08;
 800070a:	2308      	movs	r3, #8
 800070c:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, &addr, &val);
 800070e:	f107 0216 	add.w	r2, r7, #22
 8000712:	f107 0317 	add.w	r3, r7, #23
 8000716:	4619      	mov	r1, r3
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f7ff ff73 	bl	8000604 <MPU_REG_WRITE>
        break;
 800071e:	e02c      	b.n	800077a <setAccFullScaleRange+0xc6>
    case AFS_8G:
        pMPU9250->sensorData.aScaleFactor = 4096.0;
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8000726:	601a      	str	r2, [r3, #0]
        val = 0x10;
 8000728:	2310      	movs	r3, #16
 800072a:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, &addr, &val);
 800072c:	f107 0216 	add.w	r2, r7, #22
 8000730:	f107 0317 	add.w	r3, r7, #23
 8000734:	4619      	mov	r1, r3
 8000736:	68f8      	ldr	r0, [r7, #12]
 8000738:	f7ff ff64 	bl	8000604 <MPU_REG_WRITE>
        break;
 800073c:	e01d      	b.n	800077a <setAccFullScaleRange+0xc6>
    case AFS_16G:
        pMPU9250->sensorData.aScaleFactor = 2048.0;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8000744:	601a      	str	r2, [r3, #0]
        val = 0x18;
 8000746:	2318      	movs	r3, #24
 8000748:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, &addr, &val);
 800074a:	f107 0216 	add.w	r2, r7, #22
 800074e:	f107 0317 	add.w	r3, r7, #23
 8000752:	4619      	mov	r1, r3
 8000754:	68f8      	ldr	r0, [r7, #12]
 8000756:	f7ff ff55 	bl	8000604 <MPU_REG_WRITE>
        break;
 800075a:	e00e      	b.n	800077a <setAccFullScaleRange+0xc6>
    default:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000762:	601a      	str	r2, [r3, #0]
        val = 0x08;
 8000764:	2308      	movs	r3, #8
 8000766:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, &addr, &val);
 8000768:	f107 0216 	add.w	r2, r7, #22
 800076c:	f107 0317 	add.w	r3, r7, #23
 8000770:	4619      	mov	r1, r3
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f7ff ff46 	bl	8000604 <MPU_REG_WRITE>
        break;
 8000778:	bf00      	nop
    }
}
 800077a:	bf00      	nop
 800077c:	3718      	adds	r7, #24
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop

08000784 <setGyroFullScaleRange>:
/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void setGyroFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t gScale)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	4613      	mov	r3, r2
 8000790:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = GYRO_CONFIG;
 8000792:	231b      	movs	r3, #27
 8000794:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (gScale)
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b03      	cmp	r3, #3
 800079a:	d843      	bhi.n	8000824 <setGyroFullScaleRange+0xa0>
 800079c:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <setGyroFullScaleRange+0x20>)
 800079e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a2:	bf00      	nop
 80007a4:	080007b5 	.word	0x080007b5
 80007a8:	080007d1 	.word	0x080007d1
 80007ac:	080007ed 	.word	0x080007ed
 80007b0:	08000809 	.word	0x08000809
    {
    case GFS_250DPS:
        pMPU9250->sensorData.gScaleFactor = 131.0;
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	4a24      	ldr	r2, [pc, #144]	; (8000848 <setGyroFullScaleRange+0xc4>)
 80007b8:	605a      	str	r2, [r3, #4]
        val = 0x00;
 80007ba:	2300      	movs	r3, #0
 80007bc:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, &addr, &val);
 80007be:	f107 0216 	add.w	r2, r7, #22
 80007c2:	f107 0317 	add.w	r3, r7, #23
 80007c6:	4619      	mov	r1, r3
 80007c8:	68f8      	ldr	r0, [r7, #12]
 80007ca:	f7ff ff1b 	bl	8000604 <MPU_REG_WRITE>
        break;
 80007ce:	e037      	b.n	8000840 <setGyroFullScaleRange+0xbc>
    case GFS_500DPS:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	4a1e      	ldr	r2, [pc, #120]	; (800084c <setGyroFullScaleRange+0xc8>)
 80007d4:	605a      	str	r2, [r3, #4]
        val = 0x08;
 80007d6:	2308      	movs	r3, #8
 80007d8:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, &addr, &val);
 80007da:	f107 0216 	add.w	r2, r7, #22
 80007de:	f107 0317 	add.w	r3, r7, #23
 80007e2:	4619      	mov	r1, r3
 80007e4:	68f8      	ldr	r0, [r7, #12]
 80007e6:	f7ff ff0d 	bl	8000604 <MPU_REG_WRITE>
        break;
 80007ea:	e029      	b.n	8000840 <setGyroFullScaleRange+0xbc>
    case GFS_1000DPS:
        pMPU9250->sensorData.gScaleFactor = 32.8;
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	4a18      	ldr	r2, [pc, #96]	; (8000850 <setGyroFullScaleRange+0xcc>)
 80007f0:	605a      	str	r2, [r3, #4]
        val = 0x10;
 80007f2:	2310      	movs	r3, #16
 80007f4:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, &addr, &val);
 80007f6:	f107 0216 	add.w	r2, r7, #22
 80007fa:	f107 0317 	add.w	r3, r7, #23
 80007fe:	4619      	mov	r1, r3
 8000800:	68f8      	ldr	r0, [r7, #12]
 8000802:	f7ff feff 	bl	8000604 <MPU_REG_WRITE>
        break;
 8000806:	e01b      	b.n	8000840 <setGyroFullScaleRange+0xbc>
    case GFS_2000DPS:
        pMPU9250->sensorData.gScaleFactor = 16.4;
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <setGyroFullScaleRange+0xd0>)
 800080c:	605a      	str	r2, [r3, #4]
        val = 0x18;
 800080e:	2318      	movs	r3, #24
 8000810:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, &addr, &val);
 8000812:	f107 0216 	add.w	r2, r7, #22
 8000816:	f107 0317 	add.w	r3, r7, #23
 800081a:	4619      	mov	r1, r3
 800081c:	68f8      	ldr	r0, [r7, #12]
 800081e:	f7ff fef1 	bl	8000604 <MPU_REG_WRITE>
        break;
 8000822:	e00d      	b.n	8000840 <setGyroFullScaleRange+0xbc>
    default:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4a09      	ldr	r2, [pc, #36]	; (800084c <setGyroFullScaleRange+0xc8>)
 8000828:	605a      	str	r2, [r3, #4]
        val = 0x08;
 800082a:	2308      	movs	r3, #8
 800082c:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, &addr, &val);
 800082e:	f107 0216 	add.w	r2, r7, #22
 8000832:	f107 0317 	add.w	r3, r7, #23
 8000836:	4619      	mov	r1, r3
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f7ff fee3 	bl	8000604 <MPU_REG_WRITE>
        break;
 800083e:	bf00      	nop
    }
}
 8000840:	bf00      	nop
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	43030000 	.word	0x43030000
 800084c:	42830000 	.word	0x42830000
 8000850:	42033333 	.word	0x42033333
 8000854:	41833333 	.word	0x41833333

08000858 <readRawData>:

/// @brief Read raw data from IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void readRawData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
    uint8_t buf[14];

    // Subroutine for reading the raw data
    MPU_REG_READ(SPIx, ACCEL_XOUT_H, &buf, 14);
 8000862:	f107 0208 	add.w	r2, r7, #8
 8000866:	230e      	movs	r3, #14
 8000868:	213b      	movs	r1, #59	; 0x3b
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff fee8 	bl	8000640 <MPU_REG_READ>

    // Bit shift the data
    pMPU9250->sensorData.ax = buf[0] << 8 | buf[1];
 8000870:	7a3b      	ldrb	r3, [r7, #8]
 8000872:	021b      	lsls	r3, r3, #8
 8000874:	7a7a      	ldrb	r2, [r7, #9]
 8000876:	4313      	orrs	r3, r2
 8000878:	ee07 3a90 	vmov	s15, r3
 800087c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	edc3 7a02 	vstr	s15, [r3, #8]
    pMPU9250->sensorData.ay = buf[2] << 8 | buf[3];
 8000886:	7abb      	ldrb	r3, [r7, #10]
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	7afa      	ldrb	r2, [r7, #11]
 800088c:	4313      	orrs	r3, r2
 800088e:	ee07 3a90 	vmov	s15, r3
 8000892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	edc3 7a03 	vstr	s15, [r3, #12]
    pMPU9250->sensorData.az = buf[4] << 8 | buf[5];
 800089c:	7b3b      	ldrb	r3, [r7, #12]
 800089e:	021b      	lsls	r3, r3, #8
 80008a0:	7b7a      	ldrb	r2, [r7, #13]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	ee07 3a90 	vmov	s15, r3
 80008a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	edc3 7a04 	vstr	s15, [r3, #16]

    // temperature = buf[6] << 8 | buf[7];

    pMPU9250->sensorData.gx = buf[8] << 8 | buf[9];
 80008b2:	7c3b      	ldrb	r3, [r7, #16]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	7c7a      	ldrb	r2, [r7, #17]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	ee07 3a90 	vmov	s15, r3
 80008be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	edc3 7a05 	vstr	s15, [r3, #20]
    pMPU9250->sensorData.gy = buf[10] << 8 | buf[11];
 80008c8:	7cbb      	ldrb	r3, [r7, #18]
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	7cfa      	ldrb	r2, [r7, #19]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	ee07 3a90 	vmov	s15, r3
 80008d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	edc3 7a06 	vstr	s15, [r3, #24]
    pMPU9250->sensorData.gz = buf[12] << 8 | buf[13];
 80008de:	7d3b      	ldrb	r3, [r7, #20]
 80008e0:	021b      	lsls	r3, r3, #8
 80008e2:	7d7a      	ldrb	r2, [r7, #21]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	ee07 3a90 	vmov	s15, r3
 80008ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80008f4:	bf00      	nop
 80008f6:	3718      	adds	r7, #24
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <MPU_calibrateGyro>:
/// @brief Find offsets for each axis of gyroscope.
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param numCalPoints Number of data points to average.
void MPU_calibrateGyro(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint16_t numCalPoints)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	4613      	mov	r3, r2
 8000908:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	61bb      	str	r3, [r7, #24]
    int32_t z = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8000916:	2300      	movs	r3, #0
 8000918:	827b      	strh	r3, [r7, #18]
 800091a:	e036      	b.n	800098a <MPU_calibrateGyro+0x8e>
    {
        readRawData(SPIx, pMPU9250);
 800091c:	68b9      	ldr	r1, [r7, #8]
 800091e:	68f8      	ldr	r0, [r7, #12]
 8000920:	f7ff ff9a 	bl	8000858 <readRawData>
        x += pMPU9250->sensorData.gx;
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	ee07 3a90 	vmov	s15, r3
 800092a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	edd3 7a05 	vldr	s15, [r3, #20]
 8000934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800093c:	ee17 3a90 	vmov	r3, s15
 8000940:	61fb      	str	r3, [r7, #28]
        y += pMPU9250->sensorData.gy;
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	ee07 3a90 	vmov	s15, r3
 8000948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000956:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800095a:	ee17 3a90 	vmov	r3, s15
 800095e:	61bb      	str	r3, [r7, #24]
        z += pMPU9250->sensorData.gz;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	ee07 3a90 	vmov	s15, r3
 8000966:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	edd3 7a07 	vldr	s15, [r3, #28]
 8000970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000974:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000978:	ee17 3a90 	vmov	r3, s15
 800097c:	617b      	str	r3, [r7, #20]
        HAL_Delay(3);
 800097e:	2003      	movs	r0, #3
 8000980:	f000 fc04 	bl	800118c <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8000984:	8a7b      	ldrh	r3, [r7, #18]
 8000986:	3301      	adds	r3, #1
 8000988:	827b      	strh	r3, [r7, #18]
 800098a:	8a7a      	ldrh	r2, [r7, #18]
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	429a      	cmp	r2, r3
 8000990:	d3c4      	bcc.n	800091c <MPU_calibrateGyro+0x20>
    }

    // Average the saved data points to find the gyroscope offset
    pMPU9250->gyroCal.x = (float)x / (float)numCalPoints;
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	ee07 3a90 	vmov	s15, r3
 8000998:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800099c:	88fb      	ldrh	r3, [r7, #6]
 800099e:	ee07 3a90 	vmov	s15, r3
 80009a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	edc3 7a08 	vstr	s15, [r3, #32]
    pMPU9250->gyroCal.y = (float)y / (float)numCalPoints;
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	ee07 3a90 	vmov	s15, r3
 80009b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80009ba:	88fb      	ldrh	r3, [r7, #6]
 80009bc:	ee07 3a90 	vmov	s15, r3
 80009c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    pMPU9250->gyroCal.z = (float)z / (float)numCalPoints;
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	ee07 3a90 	vmov	s15, r3
 80009d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	ee07 3a90 	vmov	s15, r3
 80009de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80009ec:	bf00      	nop
 80009ee:	3720      	adds	r7, #32
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b37      	ldr	r3, [pc, #220]	; (8000aec <MX_GPIO_Init+0xf8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a36      	ldr	r2, [pc, #216]	; (8000aec <MX_GPIO_Init+0xf8>)
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b34      	ldr	r3, [pc, #208]	; (8000aec <MX_GPIO_Init+0xf8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0304 	and.w	r3, r3, #4
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b30      	ldr	r3, [pc, #192]	; (8000aec <MX_GPIO_Init+0xf8>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a2f      	ldr	r2, [pc, #188]	; (8000aec <MX_GPIO_Init+0xf8>)
 8000a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <MX_GPIO_Init+0xf8>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	4b29      	ldr	r3, [pc, #164]	; (8000aec <MX_GPIO_Init+0xf8>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a28      	ldr	r2, [pc, #160]	; (8000aec <MX_GPIO_Init+0xf8>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b26      	ldr	r3, [pc, #152]	; (8000aec <MX_GPIO_Init+0xf8>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b22      	ldr	r3, [pc, #136]	; (8000aec <MX_GPIO_Init+0xf8>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a21      	ldr	r2, [pc, #132]	; (8000aec <MX_GPIO_Init+0xf8>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <MX_GPIO_Init+0xf8>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2120      	movs	r1, #32
 8000a7e:	481c      	ldr	r0, [pc, #112]	; (8000af0 <MX_GPIO_Init+0xfc>)
 8000a80:	f000 fe12 	bl	80016a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2140      	movs	r1, #64	; 0x40
 8000a88:	481a      	ldr	r0, [pc, #104]	; (8000af4 <MX_GPIO_Init+0x100>)
 8000a8a:	f000 fe0d 	bl	80016a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a94:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4814      	ldr	r0, [pc, #80]	; (8000af8 <MX_GPIO_Init+0x104>)
 8000aa6:	f000 fc7b 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aaa:	2320      	movs	r3, #32
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480b      	ldr	r0, [pc, #44]	; (8000af0 <MX_GPIO_Init+0xfc>)
 8000ac2:	f000 fc6d 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000ac6:	2340      	movs	r3, #64	; 0x40
 8000ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_GPIO_Init+0x100>)
 8000ade:	f000 fc5f 	bl	80013a0 <HAL_GPIO_Init>

}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	; 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020000 	.word	0x40020000
 8000af4:	40020400 	.word	0x40020400
 8000af8:	40020800 	.word	0x40020800

08000afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  MPU9250.settings.gFullScaleRange = GFS_500DPS;
 8000b00:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <main+0xb0>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  MPU9250.settings.aFullScaleRange = AFS_4G;
 8000b08:	4b28      	ldr	r3, [pc, #160]	; (8000bac <main+0xb0>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  MPU9250.settings.CS_PIN = GPIO_PIN_6;
 8000b10:	4b26      	ldr	r3, [pc, #152]	; (8000bac <main+0xb0>)
 8000b12:	2240      	movs	r2, #64	; 0x40
 8000b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  MPU9250.settings.CS_PORT = GPIOB;
 8000b18:	4b24      	ldr	r3, [pc, #144]	; (8000bac <main+0xb0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  MPU9250.attitude.tau = 0.98;
 8000b20:	4b22      	ldr	r3, [pc, #136]	; (8000bac <main+0xb0>)
 8000b22:	4a23      	ldr	r2, [pc, #140]	; (8000bb0 <main+0xb4>)
 8000b24:	62da      	str	r2, [r3, #44]	; 0x2c
  MPU9250.attitude.dt = 0.004;
 8000b26:	4b21      	ldr	r3, [pc, #132]	; (8000bac <main+0xb0>)
 8000b28:	4a22      	ldr	r2, [pc, #136]	; (8000bb4 <main+0xb8>)
 8000b2a:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f000 fabc 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f84e 	bl	8000bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b34:	f7ff ff5e 	bl	80009f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b38:	f000 fa1a 	bl	8000f70 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000b3c:	f000 f8ba 	bl	8000cb4 <MX_SPI1_Init>
  MX_TIM11_Init();
 8000b40:	f000 f9d0 	bl	8000ee4 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  MPU_begin(&hspi1, &MPU9250);
 8000b44:	4919      	ldr	r1, [pc, #100]	; (8000bac <main+0xb0>)
 8000b46:	481c      	ldr	r0, [pc, #112]	; (8000bb8 <main+0xbc>)
 8000b48:	f7ff fd1e 	bl	8000588 <MPU_begin>

  // Calibrate the IMU
  sprintf((char *)serialBuf, "CALIBRATING...\r\n");
 8000b4c:	491b      	ldr	r1, [pc, #108]	; (8000bbc <main+0xc0>)
 8000b4e:	481c      	ldr	r0, [pc, #112]	; (8000bc0 <main+0xc4>)
 8000b50:	f002 fc86 	bl	8003460 <siprintf>
  HAL_UART_Transmit(&huart2, serialBuf, strlen((char *)serialBuf), HAL_MAX_DELAY);
 8000b54:	481a      	ldr	r0, [pc, #104]	; (8000bc0 <main+0xc4>)
 8000b56:	f7ff fb43 	bl	80001e0 <strlen>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b62:	4917      	ldr	r1, [pc, #92]	; (8000bc0 <main+0xc4>)
 8000b64:	4817      	ldr	r0, [pc, #92]	; (8000bc4 <main+0xc8>)
 8000b66:	f002 f980 	bl	8002e6a <HAL_UART_Transmit>
  MPU_calibrateGyro(&hspi1, &MPU9250, CALIBRATION_POINTS);
 8000b6a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000b6e:	490f      	ldr	r1, [pc, #60]	; (8000bac <main+0xb0>)
 8000b70:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <main+0xbc>)
 8000b72:	f7ff fec3 	bl	80008fc <MPU_calibrateGyro>

  // Start timer and put processor into an efficient low power mode
  sprintf((char *)serialBuf, "START...\r\n");
 8000b76:	4914      	ldr	r1, [pc, #80]	; (8000bc8 <main+0xcc>)
 8000b78:	4811      	ldr	r0, [pc, #68]	; (8000bc0 <main+0xc4>)
 8000b7a:	f002 fc71 	bl	8003460 <siprintf>
  HAL_UART_Transmit(&huart2, serialBuf, strlen((char *)serialBuf), HAL_MAX_DELAY);
 8000b7e:	4810      	ldr	r0, [pc, #64]	; (8000bc0 <main+0xc4>)
 8000b80:	f7ff fb2e 	bl	80001e0 <strlen>
 8000b84:	4603      	mov	r3, r0
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b8c:	490c      	ldr	r1, [pc, #48]	; (8000bc0 <main+0xc4>)
 8000b8e:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <main+0xc8>)
 8000b90:	f002 f96b 	bl	8002e6a <HAL_UART_Transmit>

  HAL_TIM_Base_Start_IT(&htim11);
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <main+0xd0>)
 8000b96:	f002 f839 	bl	8002c0c <HAL_TIM_Base_Start_IT>
  HAL_PWR_EnableSleepOnExit();
 8000b9a:	f000 fdbb 	bl	8001714 <HAL_PWR_EnableSleepOnExit>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f000 fd9b 	bl	80016dc <HAL_PWR_EnterSLEEPMode>
 8000ba6:	2300      	movs	r3, #0
  //   /* USER CODE END WHILE */

  //   /* USER CODE BEGIN 3 */
  // }
  // /* USER CODE END 3 */
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200000fc 	.word	0x200000fc
 8000bb0:	3f7ae148 	.word	0x3f7ae148
 8000bb4:	3b83126f 	.word	0x3b83126f
 8000bb8:	20000140 	.word	0x20000140
 8000bbc:	08003cd4 	.word	0x08003cd4
 8000bc0:	20000098 	.word	0x20000098
 8000bc4:	200001e0 	.word	0x200001e0
 8000bc8:	08003ce8 	.word	0x08003ce8
 8000bcc:	20000198 	.word	0x20000198

08000bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b094      	sub	sp, #80	; 0x50
 8000bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	f107 0320 	add.w	r3, r7, #32
 8000bda:	2230      	movs	r2, #48	; 0x30
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f002 fc36 	bl	8003450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <SystemClock_Config+0xd0>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	4a28      	ldr	r2, [pc, #160]	; (8000ca0 <SystemClock_Config+0xd0>)
 8000bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c02:	6413      	str	r3, [r2, #64]	; 0x40
 8000c04:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <SystemClock_Config+0xd0>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c10:	2300      	movs	r3, #0
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <SystemClock_Config+0xd4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c1c:	4a21      	ldr	r2, [pc, #132]	; (8000ca4 <SystemClock_Config+0xd4>)
 8000c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <SystemClock_Config+0xd4>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c30:	2302      	movs	r3, #2
 8000c32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c34:	2301      	movs	r3, #1
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c38:	2310      	movs	r3, #16
 8000c3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c40:	2300      	movs	r3, #0
 8000c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c44:	2310      	movs	r3, #16
 8000c46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c48:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c4c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c4e:	2304      	movs	r3, #4
 8000c50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c52:	2307      	movs	r3, #7
 8000c54:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c56:	f107 0320 	add.w	r3, r7, #32
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 fd6a 	bl	8001734 <HAL_RCC_OscConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c66:	f000 f81f 	bl	8000ca8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	2102      	movs	r1, #2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 ffcc 	bl	8001c24 <HAL_RCC_ClockConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c92:	f000 f809 	bl	8000ca8 <Error_Handler>
  }
}
 8000c96:	bf00      	nop
 8000c98:	3750      	adds	r7, #80	; 0x50
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40007000 	.word	0x40007000

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <Error_Handler+0x8>
	...

08000cb4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000cba:	4a18      	ldr	r2, [pc, #96]	; (8000d1c <MX_SPI1_Init+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000cc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000ce8:	2230      	movs	r2, #48	; 0x30
 8000cea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000d00:	220a      	movs	r2, #10
 8000d02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d04:	4804      	ldr	r0, [pc, #16]	; (8000d18 <MX_SPI1_Init+0x64>)
 8000d06:	f001 f989 	bl	800201c <HAL_SPI_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d10:	f7ff ffca 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000140 	.word	0x20000140
 8000d1c:	40013000 	.word	0x40013000

08000d20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <HAL_SPI_MspInit+0x84>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d12b      	bne.n	8000d9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a10      	ldr	r2, [pc, #64]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d7a:	2338      	movs	r3, #56	; 0x38
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <HAL_SPI_MspInit+0x8c>)
 8000d96:	f000 fb03 	bl	80013a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	; 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40013000 	.word	0x40013000
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020400 	.word	0x40020400

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <HAL_MspInit+0x4c>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	4a0f      	ldr	r2, [pc, #60]	; (8000dfc <HAL_MspInit+0x4c>)
 8000dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <HAL_MspInit+0x4c>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <HAL_MspInit+0x4c>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <HAL_MspInit+0x4c>)
 8000ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de0:	6413      	str	r3, [r2, #64]	; 0x40
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_MspInit+0x4c>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dee:	2007      	movs	r0, #7
 8000df0:	f000 faa2 	bl	8001338 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40023800 	.word	0x40023800

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <NMI_Handler+0x4>

08000e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <HardFault_Handler+0x4>

08000e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <MemManage_Handler+0x4>

08000e12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <BusFault_Handler+0x4>

08000e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <UsageFault_Handler+0x4>

08000e1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4c:	f000 f97e 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e5c:	4a14      	ldr	r2, [pc, #80]	; (8000eb0 <_sbrk+0x5c>)
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <_sbrk+0x60>)
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d102      	bne.n	8000e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <_sbrk+0x64>)
 8000e72:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <_sbrk+0x68>)
 8000e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <_sbrk+0x64>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d207      	bcs.n	8000e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e84:	f002 faba 	bl	80033fc <__errno>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e92:	e009      	b.n	8000ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9a:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <_sbrk+0x64>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <_sbrk+0x64>)
 8000ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20018000 	.word	0x20018000
 8000eb4:	00000400 	.word	0x00000400
 8000eb8:	2000008c 	.word	0x2000008c
 8000ebc:	20000238 	.word	0x20000238

08000ec0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <SystemInit+0x20>)
 8000ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eca:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <SystemInit+0x20>)
 8000ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_TIM11_Init+0x40>)
 8000eea:	4a0f      	ldr	r2, [pc, #60]	; (8000f28 <MX_TIM11_Init+0x44>)
 8000eec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8400-1;
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <MX_TIM11_Init+0x40>)
 8000ef0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000ef4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <MX_TIM11_Init+0x40>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 40-1;
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_TIM11_Init+0x40>)
 8000efe:	2227      	movs	r2, #39	; 0x27
 8000f00:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <MX_TIM11_Init+0x40>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_TIM11_Init+0x40>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_TIM11_Init+0x40>)
 8000f10:	f001 fe2c 	bl	8002b6c <HAL_TIM_Base_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000f1a:	f7ff fec5 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000198 	.word	0x20000198
 8000f28:	40014800 	.word	0x40014800

08000f2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <HAL_TIM_Base_MspInit+0x3c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d10d      	bne.n	8000f5a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_TIM_Base_MspInit+0x40>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	4a09      	ldr	r2, [pc, #36]	; (8000f6c <HAL_TIM_Base_MspInit+0x40>)
 8000f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <HAL_TIM_Base_MspInit+0x40>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40014800 	.word	0x40014800
 8000f6c:	40023800 	.word	0x40023800

08000f70 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <MX_USART2_UART_Init+0x50>)
 8000f78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f96:	220c      	movs	r2, #12
 8000f98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000fa8:	f001 ff12 	bl	8002dd0 <HAL_UART_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fb2:	f7ff fe79 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200001e0 	.word	0x200001e0
 8000fc0:	40004400 	.word	0x40004400

08000fc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a19      	ldr	r2, [pc, #100]	; (8001048 <HAL_UART_MspInit+0x84>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d12b      	bne.n	800103e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <HAL_UART_MspInit+0x88>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	4a17      	ldr	r2, [pc, #92]	; (800104c <HAL_UART_MspInit+0x88>)
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_UART_MspInit+0x88>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_UART_MspInit+0x88>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a10      	ldr	r2, [pc, #64]	; (800104c <HAL_UART_MspInit+0x88>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_UART_MspInit+0x88>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800101e:	230c      	movs	r3, #12
 8001020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800102e:	2307      	movs	r3, #7
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <HAL_UART_MspInit+0x8c>)
 800103a:	f000 f9b1 	bl	80013a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800103e:	bf00      	nop
 8001040:	3728      	adds	r7, #40	; 0x28
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40004400 	.word	0x40004400
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000

08001054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800108c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800105a:	490e      	ldr	r1, [pc, #56]	; (8001094 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800105c:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001060:	e002      	b.n	8001068 <LoopCopyDataInit>

08001062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001066:	3304      	adds	r3, #4

08001068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800106c:	d3f9      	bcc.n	8001062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001070:	4c0b      	ldr	r4, [pc, #44]	; (80010a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001074:	e001      	b.n	800107a <LoopFillZerobss>

08001076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001078:	3204      	adds	r2, #4

0800107a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800107c:	d3fb      	bcc.n	8001076 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800107e:	f7ff ff1f 	bl	8000ec0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001082:	f002 f9c1 	bl	8003408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001086:	f7ff fd39 	bl	8000afc <main>
  bx  lr    
 800108a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800108c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001094:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001098:	08003d64 	.word	0x08003d64
  ldr r2, =_sbss
 800109c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010a0:	20000238 	.word	0x20000238

080010a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <HAL_Init+0x40>)
 80010b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <HAL_Init+0x40>)
 80010be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_Init+0x40>)
 80010ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 f931 	bl	8001338 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 f808 	bl	80010ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010dc:	f7ff fe68 	bl	8000db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023c00 	.word	0x40023c00

080010ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_InitTick+0x54>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x58>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	fbb3 f3f1 	udiv	r3, r3, r1
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f93b 	bl	8001386 <HAL_SYSTICK_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e00e      	b.n	8001138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d80a      	bhi.n	8001136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001120:	2200      	movs	r2, #0
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001128:	f000 f911 	bl	800134e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800112c:	4a06      	ldr	r2, [pc, #24]	; (8001148 <HAL_InitTick+0x5c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e000      	b.n	8001138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000000 	.word	0x20000000
 8001144:	20000008 	.word	0x20000008
 8001148:	20000004 	.word	0x20000004

0800114c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_IncTick+0x20>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x24>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <HAL_IncTick+0x24>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000008 	.word	0x20000008
 8001170:	20000224 	.word	0x20000224

08001174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <HAL_GetTick+0x14>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000224 	.word	0x20000224

0800118c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001194:	f7ff ffee 	bl	8001174 <HAL_GetTick>
 8001198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011a4:	d005      	beq.n	80011b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_Delay+0x44>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4413      	add	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011b2:	bf00      	nop
 80011b4:	f7ff ffde 	bl	8001174 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d8f7      	bhi.n	80011b4 <HAL_Delay+0x28>
  {
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000008 	.word	0x20000008

080011d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f0:	4013      	ands	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001206:	4a04      	ldr	r2, [pc, #16]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	60d3      	str	r3, [r2, #12]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <__NVIC_GetPriorityGrouping+0x18>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	f003 0307 	and.w	r3, r3, #7
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	2b00      	cmp	r3, #0
 800124a:	db0a      	blt.n	8001262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	b2da      	uxtb	r2, r3
 8001250:	490c      	ldr	r1, [pc, #48]	; (8001284 <__NVIC_SetPriority+0x4c>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	0112      	lsls	r2, r2, #4
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	440b      	add	r3, r1
 800125c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001260:	e00a      	b.n	8001278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4908      	ldr	r1, [pc, #32]	; (8001288 <__NVIC_SetPriority+0x50>)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	3b04      	subs	r3, #4
 8001270:	0112      	lsls	r2, r2, #4
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	440b      	add	r3, r1
 8001276:	761a      	strb	r2, [r3, #24]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000e100 	.word	0xe000e100
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f1c3 0307 	rsb	r3, r3, #7
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	bf28      	it	cs
 80012aa:	2304      	movcs	r3, #4
 80012ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3304      	adds	r3, #4
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	d902      	bls.n	80012bc <NVIC_EncodePriority+0x30>
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3b03      	subs	r3, #3
 80012ba:	e000      	b.n	80012be <NVIC_EncodePriority+0x32>
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43da      	mvns	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	401a      	ands	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	43d9      	mvns	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	4313      	orrs	r3, r2
         );
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3724      	adds	r7, #36	; 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001304:	d301      	bcc.n	800130a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001306:	2301      	movs	r3, #1
 8001308:	e00f      	b.n	800132a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130a:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <SysTick_Config+0x40>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001312:	210f      	movs	r1, #15
 8001314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001318:	f7ff ff8e 	bl	8001238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <SysTick_Config+0x40>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001322:	4b04      	ldr	r3, [pc, #16]	; (8001334 <SysTick_Config+0x40>)
 8001324:	2207      	movs	r2, #7
 8001326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	e000e010 	.word	0xe000e010

08001338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ff47 	bl	80011d4 <__NVIC_SetPriorityGrouping>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800134e:	b580      	push	{r7, lr}
 8001350:	b086      	sub	sp, #24
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	607a      	str	r2, [r7, #4]
 800135a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001360:	f7ff ff5c 	bl	800121c <__NVIC_GetPriorityGrouping>
 8001364:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	68b9      	ldr	r1, [r7, #8]
 800136a:	6978      	ldr	r0, [r7, #20]
 800136c:	f7ff ff8e 	bl	800128c <NVIC_EncodePriority>
 8001370:	4602      	mov	r2, r0
 8001372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff5d 	bl	8001238 <__NVIC_SetPriority>
}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ffb0 	bl	80012f4 <SysTick_Config>
 8001394:	4603      	mov	r3, r0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	; 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	e159      	b.n	8001670 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013bc:	2201      	movs	r2, #1
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f040 8148 	bne.w	800166a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d005      	beq.n	80013f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d130      	bne.n	8001454 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001428:	2201      	movs	r2, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f003 0201 	and.w	r2, r3, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b03      	cmp	r3, #3
 800145e:	d017      	beq.n	8001490 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d123      	bne.n	80014e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	08da      	lsrs	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3208      	adds	r2, #8
 80014a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	220f      	movs	r2, #15
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	691a      	ldr	r2, [r3, #16]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	08da      	lsrs	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3208      	adds	r2, #8
 80014de:	69b9      	ldr	r1, [r7, #24]
 80014e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0203 	and.w	r2, r3, #3
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80a2 	beq.w	800166a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b57      	ldr	r3, [pc, #348]	; (8001688 <HAL_GPIO_Init+0x2e8>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	4a56      	ldr	r2, [pc, #344]	; (8001688 <HAL_GPIO_Init+0x2e8>)
 8001530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001534:	6453      	str	r3, [r2, #68]	; 0x44
 8001536:	4b54      	ldr	r3, [pc, #336]	; (8001688 <HAL_GPIO_Init+0x2e8>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001542:	4a52      	ldr	r2, [pc, #328]	; (800168c <HAL_GPIO_Init+0x2ec>)
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	3302      	adds	r3, #2
 800154a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	220f      	movs	r2, #15
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a49      	ldr	r2, [pc, #292]	; (8001690 <HAL_GPIO_Init+0x2f0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d019      	beq.n	80015a2 <HAL_GPIO_Init+0x202>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a48      	ldr	r2, [pc, #288]	; (8001694 <HAL_GPIO_Init+0x2f4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_GPIO_Init+0x1fe>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a47      	ldr	r2, [pc, #284]	; (8001698 <HAL_GPIO_Init+0x2f8>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d00d      	beq.n	800159a <HAL_GPIO_Init+0x1fa>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a46      	ldr	r2, [pc, #280]	; (800169c <HAL_GPIO_Init+0x2fc>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d007      	beq.n	8001596 <HAL_GPIO_Init+0x1f6>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a45      	ldr	r2, [pc, #276]	; (80016a0 <HAL_GPIO_Init+0x300>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d101      	bne.n	8001592 <HAL_GPIO_Init+0x1f2>
 800158e:	2304      	movs	r3, #4
 8001590:	e008      	b.n	80015a4 <HAL_GPIO_Init+0x204>
 8001592:	2307      	movs	r3, #7
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x204>
 8001596:	2303      	movs	r3, #3
 8001598:	e004      	b.n	80015a4 <HAL_GPIO_Init+0x204>
 800159a:	2302      	movs	r3, #2
 800159c:	e002      	b.n	80015a4 <HAL_GPIO_Init+0x204>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <HAL_GPIO_Init+0x204>
 80015a2:	2300      	movs	r3, #0
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	f002 0203 	and.w	r2, r2, #3
 80015aa:	0092      	lsls	r2, r2, #2
 80015ac:	4093      	lsls	r3, r2
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b4:	4935      	ldr	r1, [pc, #212]	; (800168c <HAL_GPIO_Init+0x2ec>)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015c2:	4b38      	ldr	r3, [pc, #224]	; (80016a4 <HAL_GPIO_Init+0x304>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015e6:	4a2f      	ldr	r2, [pc, #188]	; (80016a4 <HAL_GPIO_Init+0x304>)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015ec:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <HAL_GPIO_Init+0x304>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001610:	4a24      	ldr	r2, [pc, #144]	; (80016a4 <HAL_GPIO_Init+0x304>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001616:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <HAL_GPIO_Init+0x304>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800163a:	4a1a      	ldr	r2, [pc, #104]	; (80016a4 <HAL_GPIO_Init+0x304>)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001640:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_GPIO_Init+0x304>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001664:	4a0f      	ldr	r2, [pc, #60]	; (80016a4 <HAL_GPIO_Init+0x304>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3301      	adds	r3, #1
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2b0f      	cmp	r3, #15
 8001674:	f67f aea2 	bls.w	80013bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	40013800 	.word	0x40013800
 8001690:	40020000 	.word	0x40020000
 8001694:	40020400 	.word	0x40020400
 8001698:	40020800 	.word	0x40020800
 800169c:	40020c00 	.word	0x40020c00
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40013c00 	.word	0x40013c00

080016a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	807b      	strh	r3, [r7, #2]
 80016b4:	4613      	mov	r3, r2
 80016b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016b8:	787b      	ldrb	r3, [r7, #1]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016be:	887a      	ldrh	r2, [r7, #2]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016c4:	e003      	b.n	80016ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016c6:	887b      	ldrh	r3, [r7, #2]
 80016c8:	041a      	lsls	r2, r3, #16
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	619a      	str	r2, [r3, #24]
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_PWR_EnterSLEEPMode+0x34>)
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_PWR_EnterSLEEPMode+0x34>)
 80016ee:	f023 0304 	bic.w	r3, r3, #4
 80016f2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d101      	bne.n	80016fe <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80016fa:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80016fc:	e002      	b.n	8001704 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80016fe:	bf40      	sev
    __WFE();
 8001700:	bf20      	wfe
    __WFE();
 8001702:	bf20      	wfe
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <HAL_PWR_EnableSleepOnExit+0x1c>)
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_PWR_EnableSleepOnExit+0x1c>)
 800171e:	f043 0302 	orr.w	r3, r3, #2
 8001722:	6113      	str	r3, [r2, #16]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e264      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d075      	beq.n	800183e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001752:	4ba3      	ldr	r3, [pc, #652]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b04      	cmp	r3, #4
 800175c:	d00c      	beq.n	8001778 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800175e:	4ba0      	ldr	r3, [pc, #640]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001766:	2b08      	cmp	r3, #8
 8001768:	d112      	bne.n	8001790 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800176a:	4b9d      	ldr	r3, [pc, #628]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001776:	d10b      	bne.n	8001790 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001778:	4b99      	ldr	r3, [pc, #612]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d05b      	beq.n	800183c <HAL_RCC_OscConfig+0x108>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d157      	bne.n	800183c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e23f      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001798:	d106      	bne.n	80017a8 <HAL_RCC_OscConfig+0x74>
 800179a:	4b91      	ldr	r3, [pc, #580]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a90      	ldr	r2, [pc, #576]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80017a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e01d      	b.n	80017e4 <HAL_RCC_OscConfig+0xb0>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017b0:	d10c      	bne.n	80017cc <HAL_RCC_OscConfig+0x98>
 80017b2:	4b8b      	ldr	r3, [pc, #556]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a8a      	ldr	r2, [pc, #552]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80017b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	4b88      	ldr	r3, [pc, #544]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a87      	ldr	r2, [pc, #540]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80017c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e00b      	b.n	80017e4 <HAL_RCC_OscConfig+0xb0>
 80017cc:	4b84      	ldr	r3, [pc, #528]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a83      	ldr	r2, [pc, #524]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80017d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4b81      	ldr	r3, [pc, #516]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a80      	ldr	r2, [pc, #512]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80017de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d013      	beq.n	8001814 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fcc2 	bl	8001174 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff fcbe 	bl	8001174 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	; 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e204      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	4b76      	ldr	r3, [pc, #472]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0xc0>
 8001812:	e014      	b.n	800183e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001814:	f7ff fcae 	bl	8001174 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800181c:	f7ff fcaa 	bl	8001174 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	; 0x64
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e1f0      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182e:	4b6c      	ldr	r3, [pc, #432]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0xe8>
 800183a:	e000      	b.n	800183e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d063      	beq.n	8001912 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800184a:	4b65      	ldr	r3, [pc, #404]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00b      	beq.n	800186e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001856:	4b62      	ldr	r3, [pc, #392]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800185e:	2b08      	cmp	r3, #8
 8001860:	d11c      	bne.n	800189c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001862:	4b5f      	ldr	r3, [pc, #380]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d116      	bne.n	800189c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186e:	4b5c      	ldr	r3, [pc, #368]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <HAL_RCC_OscConfig+0x152>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d001      	beq.n	8001886 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e1c4      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001886:	4b56      	ldr	r3, [pc, #344]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4952      	ldr	r1, [pc, #328]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001896:	4313      	orrs	r3, r2
 8001898:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189a:	e03a      	b.n	8001912 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d020      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a4:	4b4f      	ldr	r3, [pc, #316]	; (80019e4 <HAL_RCC_OscConfig+0x2b0>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018aa:	f7ff fc63 	bl	8001174 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b2:	f7ff fc5f 	bl	8001174 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e1a5      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c4:	4b46      	ldr	r3, [pc, #280]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0f0      	beq.n	80018b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d0:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4940      	ldr	r1, [pc, #256]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	600b      	str	r3, [r1, #0]
 80018e4:	e015      	b.n	8001912 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e6:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <HAL_RCC_OscConfig+0x2b0>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff fc42 	bl	8001174 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f4:	f7ff fc3e 	bl	8001174 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e184      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001906:	4b36      	ldr	r3, [pc, #216]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d030      	beq.n	8001980 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d016      	beq.n	8001954 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001926:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <HAL_RCC_OscConfig+0x2b4>)
 8001928:	2201      	movs	r2, #1
 800192a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192c:	f7ff fc22 	bl	8001174 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001934:	f7ff fc1e 	bl	8001174 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e164      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001946:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x200>
 8001952:	e015      	b.n	8001980 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001954:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <HAL_RCC_OscConfig+0x2b4>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195a:	f7ff fc0b 	bl	8001174 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001962:	f7ff fc07 	bl	8001174 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e14d      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001974:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f0      	bne.n	8001962 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80a0 	beq.w	8001ace <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10f      	bne.n	80019be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ac:	6413      	str	r3, [r2, #64]	; 0x40
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <HAL_RCC_OscConfig+0x2ac>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ba:	2301      	movs	r3, #1
 80019bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_RCC_OscConfig+0x2b8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d121      	bne.n	8001a0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_RCC_OscConfig+0x2b8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a07      	ldr	r2, [pc, #28]	; (80019ec <HAL_RCC_OscConfig+0x2b8>)
 80019d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d6:	f7ff fbcd 	bl	8001174 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019dc:	e011      	b.n	8001a02 <HAL_RCC_OscConfig+0x2ce>
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	42470000 	.word	0x42470000
 80019e8:	42470e80 	.word	0x42470e80
 80019ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f0:	f7ff fbc0 	bl	8001174 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e106      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a02:	4b85      	ldr	r3, [pc, #532]	; (8001c18 <HAL_RCC_OscConfig+0x4e4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d106      	bne.n	8001a24 <HAL_RCC_OscConfig+0x2f0>
 8001a16:	4b81      	ldr	r3, [pc, #516]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1a:	4a80      	ldr	r2, [pc, #512]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6713      	str	r3, [r2, #112]	; 0x70
 8001a22:	e01c      	b.n	8001a5e <HAL_RCC_OscConfig+0x32a>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d10c      	bne.n	8001a46 <HAL_RCC_OscConfig+0x312>
 8001a2c:	4b7b      	ldr	r3, [pc, #492]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a30:	4a7a      	ldr	r2, [pc, #488]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001a32:	f043 0304 	orr.w	r3, r3, #4
 8001a36:	6713      	str	r3, [r2, #112]	; 0x70
 8001a38:	4b78      	ldr	r3, [pc, #480]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3c:	4a77      	ldr	r2, [pc, #476]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6713      	str	r3, [r2, #112]	; 0x70
 8001a44:	e00b      	b.n	8001a5e <HAL_RCC_OscConfig+0x32a>
 8001a46:	4b75      	ldr	r3, [pc, #468]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4a:	4a74      	ldr	r2, [pc, #464]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001a4c:	f023 0301 	bic.w	r3, r3, #1
 8001a50:	6713      	str	r3, [r2, #112]	; 0x70
 8001a52:	4b72      	ldr	r3, [pc, #456]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a56:	4a71      	ldr	r2, [pc, #452]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001a58:	f023 0304 	bic.w	r3, r3, #4
 8001a5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d015      	beq.n	8001a92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a66:	f7ff fb85 	bl	8001174 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6c:	e00a      	b.n	8001a84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6e:	f7ff fb81 	bl	8001174 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e0c5      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a84:	4b65      	ldr	r3, [pc, #404]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0ee      	beq.n	8001a6e <HAL_RCC_OscConfig+0x33a>
 8001a90:	e014      	b.n	8001abc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a92:	f7ff fb6f 	bl	8001174 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a98:	e00a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a9a:	f7ff fb6b 	bl	8001174 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e0af      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab0:	4b5a      	ldr	r3, [pc, #360]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1ee      	bne.n	8001a9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d105      	bne.n	8001ace <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac2:	4b56      	ldr	r3, [pc, #344]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a55      	ldr	r2, [pc, #340]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 809b 	beq.w	8001c0e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ad8:	4b50      	ldr	r3, [pc, #320]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 030c 	and.w	r3, r3, #12
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d05c      	beq.n	8001b9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d141      	bne.n	8001b70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aec:	4b4c      	ldr	r3, [pc, #304]	; (8001c20 <HAL_RCC_OscConfig+0x4ec>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af2:	f7ff fb3f 	bl	8001174 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afa:	f7ff fb3b 	bl	8001174 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e081      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0c:	4b43      	ldr	r3, [pc, #268]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f0      	bne.n	8001afa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69da      	ldr	r2, [r3, #28]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	019b      	lsls	r3, r3, #6
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	085b      	lsrs	r3, r3, #1
 8001b30:	3b01      	subs	r3, #1
 8001b32:	041b      	lsls	r3, r3, #16
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3a:	061b      	lsls	r3, r3, #24
 8001b3c:	4937      	ldr	r1, [pc, #220]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b42:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <HAL_RCC_OscConfig+0x4ec>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fb14 	bl	8001174 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff fb10 	bl	8001174 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e056      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b62:	4b2e      	ldr	r3, [pc, #184]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0x41c>
 8001b6e:	e04e      	b.n	8001c0e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b70:	4b2b      	ldr	r3, [pc, #172]	; (8001c20 <HAL_RCC_OscConfig+0x4ec>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b76:	f7ff fafd 	bl	8001174 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b7e:	f7ff faf9 	bl	8001174 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e03f      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b90:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f0      	bne.n	8001b7e <HAL_RCC_OscConfig+0x44a>
 8001b9c:	e037      	b.n	8001c0e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e032      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001baa:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <HAL_RCC_OscConfig+0x4e8>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d028      	beq.n	8001c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d121      	bne.n	8001c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d11a      	bne.n	8001c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bda:	4013      	ands	r3, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001be0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d111      	bne.n	8001c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	085b      	lsrs	r3, r3, #1
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d107      	bne.n	8001c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d001      	beq.n	8001c0e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40007000 	.word	0x40007000
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	42470060 	.word	0x42470060

08001c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0cc      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c38:	4b68      	ldr	r3, [pc, #416]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d90c      	bls.n	8001c60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b65      	ldr	r3, [pc, #404]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4e:	4b63      	ldr	r3, [pc, #396]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d001      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0b8      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d020      	beq.n	8001cae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c78:	4b59      	ldr	r3, [pc, #356]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4a58      	ldr	r2, [pc, #352]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c90:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4a52      	ldr	r2, [pc, #328]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c9c:	4b50      	ldr	r3, [pc, #320]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	494d      	ldr	r1, [pc, #308]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d044      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d107      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	4b47      	ldr	r3, [pc, #284]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d119      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e07f      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d003      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce2:	4b3f      	ldr	r3, [pc, #252]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e06f      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf2:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e067      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d02:	4b37      	ldr	r3, [pc, #220]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f023 0203 	bic.w	r2, r3, #3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4934      	ldr	r1, [pc, #208]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d14:	f7ff fa2e 	bl	8001174 <HAL_GetTick>
 8001d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1c:	f7ff fa2a 	bl	8001174 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e04f      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 020c 	and.w	r2, r3, #12
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d1eb      	bne.n	8001d1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d44:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d20c      	bcs.n	8001d6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e032      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	4916      	ldr	r1, [pc, #88]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d009      	beq.n	8001daa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	490e      	ldr	r1, [pc, #56]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001daa:	f000 f821 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8001dae:	4602      	mov	r2, r0
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	490a      	ldr	r1, [pc, #40]	; (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001dbc:	5ccb      	ldrb	r3, [r1, r3]
 8001dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc2:	4a09      	ldr	r2, [pc, #36]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff f98e 	bl	80010ec <HAL_InitTick>

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023c00 	.word	0x40023c00
 8001de0:	40023800 	.word	0x40023800
 8001de4:	08003d08 	.word	0x08003d08
 8001de8:	20000000 	.word	0x20000000
 8001dec:	20000004 	.word	0x20000004

08001df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001df4:	b084      	sub	sp, #16
 8001df6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	2300      	movs	r3, #0
 8001e02:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e08:	4b67      	ldr	r3, [pc, #412]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d00d      	beq.n	8001e30 <HAL_RCC_GetSysClockFreq+0x40>
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	f200 80bd 	bhi.w	8001f94 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0x34>
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d003      	beq.n	8001e2a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e22:	e0b7      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e24:	4b61      	ldr	r3, [pc, #388]	; (8001fac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001e26:	60bb      	str	r3, [r7, #8]
       break;
 8001e28:	e0b7      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e2a:	4b61      	ldr	r3, [pc, #388]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001e2c:	60bb      	str	r3, [r7, #8]
      break;
 8001e2e:	e0b4      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e30:	4b5d      	ldr	r3, [pc, #372]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e3a:	4b5b      	ldr	r3, [pc, #364]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d04d      	beq.n	8001ee2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e46:	4b58      	ldr	r3, [pc, #352]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	099b      	lsrs	r3, r3, #6
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e56:	f04f 0100 	mov.w	r1, #0
 8001e5a:	ea02 0800 	and.w	r8, r2, r0
 8001e5e:	ea03 0901 	and.w	r9, r3, r1
 8001e62:	4640      	mov	r0, r8
 8001e64:	4649      	mov	r1, r9
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	014b      	lsls	r3, r1, #5
 8001e70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e74:	0142      	lsls	r2, r0, #5
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	ebb0 0008 	subs.w	r0, r0, r8
 8001e7e:	eb61 0109 	sbc.w	r1, r1, r9
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	018b      	lsls	r3, r1, #6
 8001e8c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e90:	0182      	lsls	r2, r0, #6
 8001e92:	1a12      	subs	r2, r2, r0
 8001e94:	eb63 0301 	sbc.w	r3, r3, r1
 8001e98:	f04f 0000 	mov.w	r0, #0
 8001e9c:	f04f 0100 	mov.w	r1, #0
 8001ea0:	00d9      	lsls	r1, r3, #3
 8001ea2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ea6:	00d0      	lsls	r0, r2, #3
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	eb12 0208 	adds.w	r2, r2, r8
 8001eb0:	eb43 0309 	adc.w	r3, r3, r9
 8001eb4:	f04f 0000 	mov.w	r0, #0
 8001eb8:	f04f 0100 	mov.w	r1, #0
 8001ebc:	0259      	lsls	r1, r3, #9
 8001ebe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ec2:	0250      	lsls	r0, r2, #9
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	f7fe f9dc 	bl	8000290 <__aeabi_uldivmod>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4613      	mov	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	e04a      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee2:	4b31      	ldr	r3, [pc, #196]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	099b      	lsrs	r3, r3, #6
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ef2:	f04f 0100 	mov.w	r1, #0
 8001ef6:	ea02 0400 	and.w	r4, r2, r0
 8001efa:	ea03 0501 	and.w	r5, r3, r1
 8001efe:	4620      	mov	r0, r4
 8001f00:	4629      	mov	r1, r5
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	014b      	lsls	r3, r1, #5
 8001f0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f10:	0142      	lsls	r2, r0, #5
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	1b00      	subs	r0, r0, r4
 8001f18:	eb61 0105 	sbc.w	r1, r1, r5
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	018b      	lsls	r3, r1, #6
 8001f26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f2a:	0182      	lsls	r2, r0, #6
 8001f2c:	1a12      	subs	r2, r2, r0
 8001f2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f32:	f04f 0000 	mov.w	r0, #0
 8001f36:	f04f 0100 	mov.w	r1, #0
 8001f3a:	00d9      	lsls	r1, r3, #3
 8001f3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f40:	00d0      	lsls	r0, r2, #3
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	1912      	adds	r2, r2, r4
 8001f48:	eb45 0303 	adc.w	r3, r5, r3
 8001f4c:	f04f 0000 	mov.w	r0, #0
 8001f50:	f04f 0100 	mov.w	r1, #0
 8001f54:	0299      	lsls	r1, r3, #10
 8001f56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f5a:	0290      	lsls	r0, r2, #10
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	461a      	mov	r2, r3
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	f7fe f990 	bl	8000290 <__aeabi_uldivmod>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4613      	mov	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	0c1b      	lsrs	r3, r3, #16
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	3301      	adds	r3, #1
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f90:	60bb      	str	r3, [r7, #8]
      break;
 8001f92:	e002      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f96:	60bb      	str	r3, [r7, #8]
      break;
 8001f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f9a:	68bb      	ldr	r3, [r7, #8]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	00f42400 	.word	0x00f42400
 8001fb0:	007a1200 	.word	0x007a1200

08001fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb8:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000000 	.word	0x20000000

08001fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fd0:	f7ff fff0 	bl	8001fb4 <HAL_RCC_GetHCLKFreq>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	0a9b      	lsrs	r3, r3, #10
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	4903      	ldr	r1, [pc, #12]	; (8001ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fe2:	5ccb      	ldrb	r3, [r1, r3]
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	08003d18 	.word	0x08003d18

08001ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ff8:	f7ff ffdc 	bl	8001fb4 <HAL_RCC_GetHCLKFreq>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	0b5b      	lsrs	r3, r3, #13
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	4903      	ldr	r1, [pc, #12]	; (8002018 <HAL_RCC_GetPCLK2Freq+0x24>)
 800200a:	5ccb      	ldrb	r3, [r1, r3]
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40023800 	.word	0x40023800
 8002018:	08003d18 	.word	0x08003d18

0800201c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e07b      	b.n	8002126 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	2b00      	cmp	r3, #0
 8002034:	d108      	bne.n	8002048 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800203e:	d009      	beq.n	8002054 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	61da      	str	r2, [r3, #28]
 8002046:	e005      	b.n	8002054 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fe56 	bl	8000d20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2202      	movs	r2, #2
 8002078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800208a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800209c:	431a      	orrs	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d8:	ea42 0103 	orr.w	r1, r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	0c1b      	lsrs	r3, r3, #16
 80020f2:	f003 0104 	and.w	r1, r3, #4
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	f003 0210 	and.w	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	69da      	ldr	r2, [r3, #28]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002114:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b088      	sub	sp, #32
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	4613      	mov	r3, r2
 800213c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_SPI_Transmit+0x22>
 800214c:	2302      	movs	r3, #2
 800214e:	e126      	b.n	800239e <HAL_SPI_Transmit+0x270>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002158:	f7ff f80c 	bl	8001174 <HAL_GetTick>
 800215c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b01      	cmp	r3, #1
 800216c:	d002      	beq.n	8002174 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800216e:	2302      	movs	r3, #2
 8002170:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002172:	e10b      	b.n	800238c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <HAL_SPI_Transmit+0x52>
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d102      	bne.n	8002186 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002184:	e102      	b.n	800238c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2203      	movs	r2, #3
 800218a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	88fa      	ldrh	r2, [r7, #6]
 800219e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	88fa      	ldrh	r2, [r7, #6]
 80021a4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021cc:	d10f      	bne.n	80021ee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f8:	2b40      	cmp	r3, #64	; 0x40
 80021fa:	d007      	beq.n	800220c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800220a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002214:	d14b      	bne.n	80022ae <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <HAL_SPI_Transmit+0xf6>
 800221e:	8afb      	ldrh	r3, [r7, #22]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d13e      	bne.n	80022a2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	881a      	ldrh	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002234:	1c9a      	adds	r2, r3, #2
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800223e:	b29b      	uxth	r3, r3
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002248:	e02b      	b.n	80022a2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b02      	cmp	r3, #2
 8002256:	d112      	bne.n	800227e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225c:	881a      	ldrh	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	1c9a      	adds	r2, r3, #2
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	86da      	strh	r2, [r3, #54]	; 0x36
 800227c:	e011      	b.n	80022a2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800227e:	f7fe ff79 	bl	8001174 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d803      	bhi.n	8002296 <HAL_SPI_Transmit+0x168>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002294:	d102      	bne.n	800229c <HAL_SPI_Transmit+0x16e>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022a0:	e074      	b.n	800238c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1ce      	bne.n	800224a <HAL_SPI_Transmit+0x11c>
 80022ac:	e04c      	b.n	8002348 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_SPI_Transmit+0x18e>
 80022b6:	8afb      	ldrh	r3, [r7, #22]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d140      	bne.n	800233e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	330c      	adds	r3, #12
 80022c6:	7812      	ldrb	r2, [r2, #0]
 80022c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022d8:	b29b      	uxth	r3, r3
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80022e2:	e02c      	b.n	800233e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d113      	bne.n	800231a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	330c      	adds	r3, #12
 80022fc:	7812      	ldrb	r2, [r2, #0]
 80022fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800230e:	b29b      	uxth	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	86da      	strh	r2, [r3, #54]	; 0x36
 8002318:	e011      	b.n	800233e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800231a:	f7fe ff2b 	bl	8001174 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d803      	bhi.n	8002332 <HAL_SPI_Transmit+0x204>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002330:	d102      	bne.n	8002338 <HAL_SPI_Transmit+0x20a>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800233c:	e026      	b.n	800238c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1cd      	bne.n	80022e4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	6839      	ldr	r1, [r7, #0]
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 fbcb 	bl	8002ae8 <SPI_EndRxTxTransaction>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10a      	bne.n	800237c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	77fb      	strb	r3, [r7, #31]
 8002388:	e000      	b.n	800238c <HAL_SPI_Transmit+0x25e>
  }

error:
 800238a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800239c:	7ffb      	ldrb	r3, [r7, #31]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3720      	adds	r7, #32
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b088      	sub	sp, #32
 80023aa:	af02      	add	r7, sp, #8
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	603b      	str	r3, [r7, #0]
 80023b2:	4613      	mov	r3, r2
 80023b4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023c2:	d112      	bne.n	80023ea <HAL_SPI_Receive+0x44>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10e      	bne.n	80023ea <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2204      	movs	r2, #4
 80023d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80023d4:	88fa      	ldrh	r2, [r7, #6]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	4613      	mov	r3, r2
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f8f1 	bl	80025c8 <HAL_SPI_TransmitReceive>
 80023e6:	4603      	mov	r3, r0
 80023e8:	e0ea      	b.n	80025c0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_SPI_Receive+0x52>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e0e3      	b.n	80025c0 <HAL_SPI_Receive+0x21a>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002400:	f7fe feb8 	bl	8001174 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b01      	cmp	r3, #1
 8002410:	d002      	beq.n	8002418 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002412:	2302      	movs	r3, #2
 8002414:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002416:	e0ca      	b.n	80025ae <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <HAL_SPI_Receive+0x7e>
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002428:	e0c1      	b.n	80025ae <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2204      	movs	r2, #4
 800242e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	88fa      	ldrh	r2, [r7, #6]
 8002442:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	88fa      	ldrh	r2, [r7, #6]
 8002448:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002470:	d10f      	bne.n	8002492 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002480:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002490:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249c:	2b40      	cmp	r3, #64	; 0x40
 800249e:	d007      	beq.n	80024b0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d162      	bne.n	800257e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80024b8:	e02e      	b.n	8002518 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d115      	bne.n	80024f4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f103 020c 	add.w	r2, r3, #12
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d4:	7812      	ldrb	r2, [r2, #0]
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024f2:	e011      	b.n	8002518 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024f4:	f7fe fe3e 	bl	8001174 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d803      	bhi.n	800250c <HAL_SPI_Receive+0x166>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800250a:	d102      	bne.n	8002512 <HAL_SPI_Receive+0x16c>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d102      	bne.n	8002518 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002516:	e04a      	b.n	80025ae <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1cb      	bne.n	80024ba <HAL_SPI_Receive+0x114>
 8002522:	e031      	b.n	8002588 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b01      	cmp	r3, #1
 8002530:	d113      	bne.n	800255a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253c:	b292      	uxth	r2, r2
 800253e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002544:	1c9a      	adds	r2, r3, #2
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002558:	e011      	b.n	800257e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800255a:	f7fe fe0b 	bl	8001174 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d803      	bhi.n	8002572 <HAL_SPI_Receive+0x1cc>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002570:	d102      	bne.n	8002578 <HAL_SPI_Receive+0x1d2>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d102      	bne.n	800257e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800257c:	e017      	b.n	80025ae <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002582:	b29b      	uxth	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1cd      	bne.n	8002524 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	6839      	ldr	r1, [r7, #0]
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 fa45 	bl	8002a1c <SPI_EndRxTransaction>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2220      	movs	r2, #32
 800259c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	75fb      	strb	r3, [r7, #23]
 80025aa:	e000      	b.n	80025ae <HAL_SPI_Receive+0x208>
  }

error :
 80025ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025be:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08c      	sub	sp, #48	; 0x30
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025d6:	2301      	movs	r3, #1
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_SPI_TransmitReceive+0x26>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e18a      	b.n	8002904 <HAL_SPI_TransmitReceive+0x33c>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025f6:	f7fe fdbd 	bl	8001174 <HAL_GetTick>
 80025fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800260c:	887b      	ldrh	r3, [r7, #2]
 800260e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002610:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002614:	2b01      	cmp	r3, #1
 8002616:	d00f      	beq.n	8002638 <HAL_SPI_TransmitReceive+0x70>
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800261e:	d107      	bne.n	8002630 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d103      	bne.n	8002630 <HAL_SPI_TransmitReceive+0x68>
 8002628:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800262c:	2b04      	cmp	r3, #4
 800262e:	d003      	beq.n	8002638 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002630:	2302      	movs	r3, #2
 8002632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002636:	e15b      	b.n	80028f0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_SPI_TransmitReceive+0x82>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <HAL_SPI_TransmitReceive+0x82>
 8002644:	887b      	ldrh	r3, [r7, #2]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d103      	bne.n	8002652 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002650:	e14e      	b.n	80028f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b04      	cmp	r3, #4
 800265c:	d003      	beq.n	8002666 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2205      	movs	r2, #5
 8002662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	887a      	ldrh	r2, [r7, #2]
 8002676:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	887a      	ldrh	r2, [r7, #2]
 800267c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	887a      	ldrh	r2, [r7, #2]
 8002688:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	887a      	ldrh	r2, [r7, #2]
 800268e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a6:	2b40      	cmp	r3, #64	; 0x40
 80026a8:	d007      	beq.n	80026ba <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026c2:	d178      	bne.n	80027b6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_SPI_TransmitReceive+0x10a>
 80026cc:	8b7b      	ldrh	r3, [r7, #26]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d166      	bne.n	80027a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	881a      	ldrh	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	1c9a      	adds	r2, r3, #2
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026f6:	e053      	b.n	80027a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b02      	cmp	r3, #2
 8002704:	d11b      	bne.n	800273e <HAL_SPI_TransmitReceive+0x176>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d016      	beq.n	800273e <HAL_SPI_TransmitReceive+0x176>
 8002710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002712:	2b01      	cmp	r3, #1
 8002714:	d113      	bne.n	800273e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	881a      	ldrh	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	1c9a      	adds	r2, r3, #2
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002730:	b29b      	uxth	r3, r3
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b01      	cmp	r3, #1
 800274a:	d119      	bne.n	8002780 <HAL_SPI_TransmitReceive+0x1b8>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d014      	beq.n	8002780 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68da      	ldr	r2, [r3, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002760:	b292      	uxth	r2, r2
 8002762:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002768:	1c9a      	adds	r2, r3, #2
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800277c:	2301      	movs	r3, #1
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002780:	f7fe fcf8 	bl	8001174 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800278c:	429a      	cmp	r2, r3
 800278e:	d807      	bhi.n	80027a0 <HAL_SPI_TransmitReceive+0x1d8>
 8002790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002792:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002796:	d003      	beq.n	80027a0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800279e:	e0a7      	b.n	80028f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1a6      	bne.n	80026f8 <HAL_SPI_TransmitReceive+0x130>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1a1      	bne.n	80026f8 <HAL_SPI_TransmitReceive+0x130>
 80027b4:	e07c      	b.n	80028b0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <HAL_SPI_TransmitReceive+0x1fc>
 80027be:	8b7b      	ldrh	r3, [r7, #26]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d16b      	bne.n	800289c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	330c      	adds	r3, #12
 80027ce:	7812      	ldrb	r2, [r2, #0]
 80027d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027ea:	e057      	b.n	800289c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d11c      	bne.n	8002834 <HAL_SPI_TransmitReceive+0x26c>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d017      	beq.n	8002834 <HAL_SPI_TransmitReceive+0x26c>
 8002804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002806:	2b01      	cmp	r3, #1
 8002808:	d114      	bne.n	8002834 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	330c      	adds	r3, #12
 8002814:	7812      	ldrb	r2, [r2, #0]
 8002816:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002826:	b29b      	uxth	r3, r3
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b01      	cmp	r3, #1
 8002840:	d119      	bne.n	8002876 <HAL_SPI_TransmitReceive+0x2ae>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002846:	b29b      	uxth	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d014      	beq.n	8002876 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002868:	b29b      	uxth	r3, r3
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002872:	2301      	movs	r3, #1
 8002874:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002876:	f7fe fc7d 	bl	8001174 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002882:	429a      	cmp	r2, r3
 8002884:	d803      	bhi.n	800288e <HAL_SPI_TransmitReceive+0x2c6>
 8002886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800288c:	d102      	bne.n	8002894 <HAL_SPI_TransmitReceive+0x2cc>
 800288e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002890:	2b00      	cmp	r3, #0
 8002892:	d103      	bne.n	800289c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800289a:	e029      	b.n	80028f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1a2      	bne.n	80027ec <HAL_SPI_TransmitReceive+0x224>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d19d      	bne.n	80027ec <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f917 	bl	8002ae8 <SPI_EndRxTxTransaction>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d006      	beq.n	80028ce <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2220      	movs	r2, #32
 80028ca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80028cc:	e010      	b.n	80028f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10b      	bne.n	80028ee <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	e000      	b.n	80028f0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80028ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002900:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002904:	4618      	mov	r0, r3
 8002906:	3730      	adds	r7, #48	; 0x30
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	4613      	mov	r3, r2
 800291a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800291c:	f7fe fc2a 	bl	8001174 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	4413      	add	r3, r2
 800292a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800292c:	f7fe fc22 	bl	8001174 <HAL_GetTick>
 8002930:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002932:	4b39      	ldr	r3, [pc, #228]	; (8002a18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	015b      	lsls	r3, r3, #5
 8002938:	0d1b      	lsrs	r3, r3, #20
 800293a:	69fa      	ldr	r2, [r7, #28]
 800293c:	fb02 f303 	mul.w	r3, r2, r3
 8002940:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002942:	e054      	b.n	80029ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800294a:	d050      	beq.n	80029ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800294c:	f7fe fc12 	bl	8001174 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	429a      	cmp	r2, r3
 800295a:	d902      	bls.n	8002962 <SPI_WaitFlagStateUntilTimeout+0x56>
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d13d      	bne.n	80029de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002970:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800297a:	d111      	bne.n	80029a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002984:	d004      	beq.n	8002990 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800298e:	d107      	bne.n	80029a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800299e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029a8:	d10f      	bne.n	80029ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e017      	b.n	8002a0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	4013      	ands	r3, r2
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	bf0c      	ite	eq
 80029fe:	2301      	moveq	r3, #1
 8002a00:	2300      	movne	r3, #0
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d19b      	bne.n	8002944 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3720      	adds	r7, #32
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000000 	.word	0x20000000

08002a1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a30:	d111      	bne.n	8002a56 <SPI_EndRxTransaction+0x3a>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a3a:	d004      	beq.n	8002a46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a44:	d107      	bne.n	8002a56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a54:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a5e:	d12a      	bne.n	8002ab6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a68:	d012      	beq.n	8002a90 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2200      	movs	r2, #0
 8002a72:	2180      	movs	r1, #128	; 0x80
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f7ff ff49 	bl	800290c <SPI_WaitFlagStateUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d02d      	beq.n	8002adc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a84:	f043 0220 	orr.w	r2, r3, #32
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e026      	b.n	8002ade <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2200      	movs	r2, #0
 8002a98:	2101      	movs	r1, #1
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f7ff ff36 	bl	800290c <SPI_WaitFlagStateUntilTimeout>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d01a      	beq.n	8002adc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	f043 0220 	orr.w	r2, r3, #32
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e013      	b.n	8002ade <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2200      	movs	r2, #0
 8002abe:	2101      	movs	r1, #1
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f7ff ff23 	bl	800290c <SPI_WaitFlagStateUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d007      	beq.n	8002adc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad0:	f043 0220 	orr.w	r2, r3, #32
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e000      	b.n	8002ade <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002af4:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <SPI_EndRxTxTransaction+0x7c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a1b      	ldr	r2, [pc, #108]	; (8002b68 <SPI_EndRxTxTransaction+0x80>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	0d5b      	lsrs	r3, r3, #21
 8002b00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b12:	d112      	bne.n	8002b3a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2180      	movs	r1, #128	; 0x80
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f7ff fef4 	bl	800290c <SPI_WaitFlagStateUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d016      	beq.n	8002b58 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2e:	f043 0220 	orr.w	r2, r3, #32
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e00f      	b.n	8002b5a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00a      	beq.n	8002b56 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b50:	2b80      	cmp	r3, #128	; 0x80
 8002b52:	d0f2      	beq.n	8002b3a <SPI_EndRxTxTransaction+0x52>
 8002b54:	e000      	b.n	8002b58 <SPI_EndRxTxTransaction+0x70>
        break;
 8002b56:	bf00      	nop
  }

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000000 	.word	0x20000000
 8002b68:	165e9f81 	.word	0x165e9f81

08002b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e041      	b.n	8002c02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7fe f9ca 	bl	8000f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4610      	mov	r0, r2
 8002bac:	f000 f890 	bl	8002cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d001      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e044      	b.n	8002cae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a1e      	ldr	r2, [pc, #120]	; (8002cbc <HAL_TIM_Base_Start_IT+0xb0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d018      	beq.n	8002c78 <HAL_TIM_Base_Start_IT+0x6c>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c4e:	d013      	beq.n	8002c78 <HAL_TIM_Base_Start_IT+0x6c>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a1a      	ldr	r2, [pc, #104]	; (8002cc0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00e      	beq.n	8002c78 <HAL_TIM_Base_Start_IT+0x6c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a19      	ldr	r2, [pc, #100]	; (8002cc4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d009      	beq.n	8002c78 <HAL_TIM_Base_Start_IT+0x6c>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a17      	ldr	r2, [pc, #92]	; (8002cc8 <HAL_TIM_Base_Start_IT+0xbc>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d004      	beq.n	8002c78 <HAL_TIM_Base_Start_IT+0x6c>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a16      	ldr	r2, [pc, #88]	; (8002ccc <HAL_TIM_Base_Start_IT+0xc0>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d111      	bne.n	8002c9c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2b06      	cmp	r3, #6
 8002c88:	d010      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0201 	orr.w	r2, r2, #1
 8002c98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c9a:	e007      	b.n	8002cac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40010000 	.word	0x40010000
 8002cc0:	40000400 	.word	0x40000400
 8002cc4:	40000800 	.word	0x40000800
 8002cc8:	40000c00 	.word	0x40000c00
 8002ccc:	40014000 	.word	0x40014000

08002cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a34      	ldr	r2, [pc, #208]	; (8002db4 <TIM_Base_SetConfig+0xe4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00f      	beq.n	8002d08 <TIM_Base_SetConfig+0x38>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cee:	d00b      	beq.n	8002d08 <TIM_Base_SetConfig+0x38>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a31      	ldr	r2, [pc, #196]	; (8002db8 <TIM_Base_SetConfig+0xe8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d007      	beq.n	8002d08 <TIM_Base_SetConfig+0x38>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a30      	ldr	r2, [pc, #192]	; (8002dbc <TIM_Base_SetConfig+0xec>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d003      	beq.n	8002d08 <TIM_Base_SetConfig+0x38>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a2f      	ldr	r2, [pc, #188]	; (8002dc0 <TIM_Base_SetConfig+0xf0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d108      	bne.n	8002d1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a25      	ldr	r2, [pc, #148]	; (8002db4 <TIM_Base_SetConfig+0xe4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d01b      	beq.n	8002d5a <TIM_Base_SetConfig+0x8a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d28:	d017      	beq.n	8002d5a <TIM_Base_SetConfig+0x8a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a22      	ldr	r2, [pc, #136]	; (8002db8 <TIM_Base_SetConfig+0xe8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d013      	beq.n	8002d5a <TIM_Base_SetConfig+0x8a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a21      	ldr	r2, [pc, #132]	; (8002dbc <TIM_Base_SetConfig+0xec>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00f      	beq.n	8002d5a <TIM_Base_SetConfig+0x8a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a20      	ldr	r2, [pc, #128]	; (8002dc0 <TIM_Base_SetConfig+0xf0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00b      	beq.n	8002d5a <TIM_Base_SetConfig+0x8a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a1f      	ldr	r2, [pc, #124]	; (8002dc4 <TIM_Base_SetConfig+0xf4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d007      	beq.n	8002d5a <TIM_Base_SetConfig+0x8a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a1e      	ldr	r2, [pc, #120]	; (8002dc8 <TIM_Base_SetConfig+0xf8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d003      	beq.n	8002d5a <TIM_Base_SetConfig+0x8a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a1d      	ldr	r2, [pc, #116]	; (8002dcc <TIM_Base_SetConfig+0xfc>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d108      	bne.n	8002d6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a08      	ldr	r2, [pc, #32]	; (8002db4 <TIM_Base_SetConfig+0xe4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d103      	bne.n	8002da0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	615a      	str	r2, [r3, #20]
}
 8002da6:	bf00      	nop
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40010000 	.word	0x40010000
 8002db8:	40000400 	.word	0x40000400
 8002dbc:	40000800 	.word	0x40000800
 8002dc0:	40000c00 	.word	0x40000c00
 8002dc4:	40014000 	.word	0x40014000
 8002dc8:	40014400 	.word	0x40014400
 8002dcc:	40014800 	.word	0x40014800

08002dd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e03f      	b.n	8002e62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fe f8e4 	bl	8000fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2224      	movs	r2, #36	; 0x24
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f929 	bl	800306c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b08a      	sub	sp, #40	; 0x28
 8002e6e:	af02      	add	r7, sp, #8
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	603b      	str	r3, [r7, #0]
 8002e76:	4613      	mov	r3, r2
 8002e78:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	d17c      	bne.n	8002f84 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <HAL_UART_Transmit+0x2c>
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e075      	b.n	8002f86 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_UART_Transmit+0x3e>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e06e      	b.n	8002f86 <HAL_UART_Transmit+0x11c>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2221      	movs	r2, #33	; 0x21
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ebe:	f7fe f959 	bl	8001174 <HAL_GetTick>
 8002ec2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	88fa      	ldrh	r2, [r7, #6]
 8002ec8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed8:	d108      	bne.n	8002eec <HAL_UART_Transmit+0x82>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d104      	bne.n	8002eec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	61bb      	str	r3, [r7, #24]
 8002eea:	e003      	b.n	8002ef4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002efc:	e02a      	b.n	8002f54 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2200      	movs	r2, #0
 8002f06:	2180      	movs	r1, #128	; 0x80
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f840 	bl	8002f8e <UART_WaitOnFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e036      	b.n	8002f86 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10b      	bne.n	8002f36 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	3302      	adds	r3, #2
 8002f32:	61bb      	str	r3, [r7, #24]
 8002f34:	e007      	b.n	8002f46 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	781a      	ldrb	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	3301      	adds	r3, #1
 8002f44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1cf      	bne.n	8002efe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2200      	movs	r2, #0
 8002f66:	2140      	movs	r1, #64	; 0x40
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f810 	bl	8002f8e <UART_WaitOnFlagUntilTimeout>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e006      	b.n	8002f86 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	e000      	b.n	8002f86 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f84:	2302      	movs	r3, #2
  }
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3720      	adds	r7, #32
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b090      	sub	sp, #64	; 0x40
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	603b      	str	r3, [r7, #0]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f9e:	e050      	b.n	8003042 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fa6:	d04c      	beq.n	8003042 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d007      	beq.n	8002fbe <UART_WaitOnFlagUntilTimeout+0x30>
 8002fae:	f7fe f8e1 	bl	8001174 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d241      	bcs.n	8003042 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	330c      	adds	r3, #12
 8002fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	e853 3f00 	ldrex	r3, [r3]
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	330c      	adds	r3, #12
 8002fdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fde:	637a      	str	r2, [r7, #52]	; 0x34
 8002fe0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fe4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fe6:	e841 2300 	strex	r3, r2, [r1]
 8002fea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1e5      	bne.n	8002fbe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	3314      	adds	r3, #20
 8002ff8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	e853 3f00 	ldrex	r3, [r3]
 8003000:	613b      	str	r3, [r7, #16]
   return(result);
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	63bb      	str	r3, [r7, #56]	; 0x38
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	3314      	adds	r3, #20
 8003010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003012:	623a      	str	r2, [r7, #32]
 8003014:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003016:	69f9      	ldr	r1, [r7, #28]
 8003018:	6a3a      	ldr	r2, [r7, #32]
 800301a:	e841 2300 	strex	r3, r2, [r1]
 800301e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1e5      	bne.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2220      	movs	r2, #32
 8003032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e00f      	b.n	8003062 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4013      	ands	r3, r2
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	429a      	cmp	r2, r3
 8003050:	bf0c      	ite	eq
 8003052:	2301      	moveq	r3, #1
 8003054:	2300      	movne	r3, #0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	461a      	mov	r2, r3
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	429a      	cmp	r2, r3
 800305e:	d09f      	beq.n	8002fa0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3740      	adds	r7, #64	; 0x40
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800306c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003070:	b09f      	sub	sp, #124	; 0x7c
 8003072:	af00      	add	r7, sp, #0
 8003074:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003082:	68d9      	ldr	r1, [r3, #12]
 8003084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	ea40 0301 	orr.w	r3, r0, r1
 800308c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800308e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	431a      	orrs	r2, r3
 8003098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	431a      	orrs	r2, r3
 800309e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80030a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030b0:	f021 010c 	bic.w	r1, r1, #12
 80030b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030ba:	430b      	orrs	r3, r1
 80030bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ca:	6999      	ldr	r1, [r3, #24]
 80030cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	ea40 0301 	orr.w	r3, r0, r1
 80030d4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	4bc5      	ldr	r3, [pc, #788]	; (80033f0 <UART_SetConfig+0x384>)
 80030dc:	429a      	cmp	r2, r3
 80030de:	d004      	beq.n	80030ea <UART_SetConfig+0x7e>
 80030e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4bc3      	ldr	r3, [pc, #780]	; (80033f4 <UART_SetConfig+0x388>)
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d103      	bne.n	80030f2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030ea:	f7fe ff83 	bl	8001ff4 <HAL_RCC_GetPCLK2Freq>
 80030ee:	6778      	str	r0, [r7, #116]	; 0x74
 80030f0:	e002      	b.n	80030f8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030f2:	f7fe ff6b 	bl	8001fcc <HAL_RCC_GetPCLK1Freq>
 80030f6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003100:	f040 80b6 	bne.w	8003270 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003106:	461c      	mov	r4, r3
 8003108:	f04f 0500 	mov.w	r5, #0
 800310c:	4622      	mov	r2, r4
 800310e:	462b      	mov	r3, r5
 8003110:	1891      	adds	r1, r2, r2
 8003112:	6439      	str	r1, [r7, #64]	; 0x40
 8003114:	415b      	adcs	r3, r3
 8003116:	647b      	str	r3, [r7, #68]	; 0x44
 8003118:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800311c:	1912      	adds	r2, r2, r4
 800311e:	eb45 0303 	adc.w	r3, r5, r3
 8003122:	f04f 0000 	mov.w	r0, #0
 8003126:	f04f 0100 	mov.w	r1, #0
 800312a:	00d9      	lsls	r1, r3, #3
 800312c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003130:	00d0      	lsls	r0, r2, #3
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	1911      	adds	r1, r2, r4
 8003138:	6639      	str	r1, [r7, #96]	; 0x60
 800313a:	416b      	adcs	r3, r5
 800313c:	667b      	str	r3, [r7, #100]	; 0x64
 800313e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	1891      	adds	r1, r2, r2
 800314a:	63b9      	str	r1, [r7, #56]	; 0x38
 800314c:	415b      	adcs	r3, r3
 800314e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003150:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003154:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003158:	f7fd f89a 	bl	8000290 <__aeabi_uldivmod>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4ba5      	ldr	r3, [pc, #660]	; (80033f8 <UART_SetConfig+0x38c>)
 8003162:	fba3 2302 	umull	r2, r3, r3, r2
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	011e      	lsls	r6, r3, #4
 800316a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800316c:	461c      	mov	r4, r3
 800316e:	f04f 0500 	mov.w	r5, #0
 8003172:	4622      	mov	r2, r4
 8003174:	462b      	mov	r3, r5
 8003176:	1891      	adds	r1, r2, r2
 8003178:	6339      	str	r1, [r7, #48]	; 0x30
 800317a:	415b      	adcs	r3, r3
 800317c:	637b      	str	r3, [r7, #52]	; 0x34
 800317e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003182:	1912      	adds	r2, r2, r4
 8003184:	eb45 0303 	adc.w	r3, r5, r3
 8003188:	f04f 0000 	mov.w	r0, #0
 800318c:	f04f 0100 	mov.w	r1, #0
 8003190:	00d9      	lsls	r1, r3, #3
 8003192:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003196:	00d0      	lsls	r0, r2, #3
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	1911      	adds	r1, r2, r4
 800319e:	65b9      	str	r1, [r7, #88]	; 0x58
 80031a0:	416b      	adcs	r3, r5
 80031a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	461a      	mov	r2, r3
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	1891      	adds	r1, r2, r2
 80031b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80031b2:	415b      	adcs	r3, r3
 80031b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031ba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80031be:	f7fd f867 	bl	8000290 <__aeabi_uldivmod>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4b8c      	ldr	r3, [pc, #560]	; (80033f8 <UART_SetConfig+0x38c>)
 80031c8:	fba3 1302 	umull	r1, r3, r3, r2
 80031cc:	095b      	lsrs	r3, r3, #5
 80031ce:	2164      	movs	r1, #100	; 0x64
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	3332      	adds	r3, #50	; 0x32
 80031da:	4a87      	ldr	r2, [pc, #540]	; (80033f8 <UART_SetConfig+0x38c>)
 80031dc:	fba2 2303 	umull	r2, r3, r2, r3
 80031e0:	095b      	lsrs	r3, r3, #5
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031e8:	441e      	add	r6, r3
 80031ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ec:	4618      	mov	r0, r3
 80031ee:	f04f 0100 	mov.w	r1, #0
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	1894      	adds	r4, r2, r2
 80031f8:	623c      	str	r4, [r7, #32]
 80031fa:	415b      	adcs	r3, r3
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
 80031fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003202:	1812      	adds	r2, r2, r0
 8003204:	eb41 0303 	adc.w	r3, r1, r3
 8003208:	f04f 0400 	mov.w	r4, #0
 800320c:	f04f 0500 	mov.w	r5, #0
 8003210:	00dd      	lsls	r5, r3, #3
 8003212:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003216:	00d4      	lsls	r4, r2, #3
 8003218:	4622      	mov	r2, r4
 800321a:	462b      	mov	r3, r5
 800321c:	1814      	adds	r4, r2, r0
 800321e:	653c      	str	r4, [r7, #80]	; 0x50
 8003220:	414b      	adcs	r3, r1
 8003222:	657b      	str	r3, [r7, #84]	; 0x54
 8003224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	461a      	mov	r2, r3
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	1891      	adds	r1, r2, r2
 8003230:	61b9      	str	r1, [r7, #24]
 8003232:	415b      	adcs	r3, r3
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800323a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800323e:	f7fd f827 	bl	8000290 <__aeabi_uldivmod>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4b6c      	ldr	r3, [pc, #432]	; (80033f8 <UART_SetConfig+0x38c>)
 8003248:	fba3 1302 	umull	r1, r3, r3, r2
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	2164      	movs	r1, #100	; 0x64
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	3332      	adds	r3, #50	; 0x32
 800325a:	4a67      	ldr	r2, [pc, #412]	; (80033f8 <UART_SetConfig+0x38c>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	f003 0207 	and.w	r2, r3, #7
 8003266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4432      	add	r2, r6
 800326c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800326e:	e0b9      	b.n	80033e4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003272:	461c      	mov	r4, r3
 8003274:	f04f 0500 	mov.w	r5, #0
 8003278:	4622      	mov	r2, r4
 800327a:	462b      	mov	r3, r5
 800327c:	1891      	adds	r1, r2, r2
 800327e:	6139      	str	r1, [r7, #16]
 8003280:	415b      	adcs	r3, r3
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003288:	1912      	adds	r2, r2, r4
 800328a:	eb45 0303 	adc.w	r3, r5, r3
 800328e:	f04f 0000 	mov.w	r0, #0
 8003292:	f04f 0100 	mov.w	r1, #0
 8003296:	00d9      	lsls	r1, r3, #3
 8003298:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800329c:	00d0      	lsls	r0, r2, #3
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	eb12 0804 	adds.w	r8, r2, r4
 80032a6:	eb43 0905 	adc.w	r9, r3, r5
 80032aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f04f 0100 	mov.w	r1, #0
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	008b      	lsls	r3, r1, #2
 80032be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032c2:	0082      	lsls	r2, r0, #2
 80032c4:	4640      	mov	r0, r8
 80032c6:	4649      	mov	r1, r9
 80032c8:	f7fc ffe2 	bl	8000290 <__aeabi_uldivmod>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4b49      	ldr	r3, [pc, #292]	; (80033f8 <UART_SetConfig+0x38c>)
 80032d2:	fba3 2302 	umull	r2, r3, r3, r2
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	011e      	lsls	r6, r3, #4
 80032da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032dc:	4618      	mov	r0, r3
 80032de:	f04f 0100 	mov.w	r1, #0
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	1894      	adds	r4, r2, r2
 80032e8:	60bc      	str	r4, [r7, #8]
 80032ea:	415b      	adcs	r3, r3
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032f2:	1812      	adds	r2, r2, r0
 80032f4:	eb41 0303 	adc.w	r3, r1, r3
 80032f8:	f04f 0400 	mov.w	r4, #0
 80032fc:	f04f 0500 	mov.w	r5, #0
 8003300:	00dd      	lsls	r5, r3, #3
 8003302:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003306:	00d4      	lsls	r4, r2, #3
 8003308:	4622      	mov	r2, r4
 800330a:	462b      	mov	r3, r5
 800330c:	1814      	adds	r4, r2, r0
 800330e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003310:	414b      	adcs	r3, r1
 8003312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	4618      	mov	r0, r3
 800331a:	f04f 0100 	mov.w	r1, #0
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	008b      	lsls	r3, r1, #2
 8003328:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800332c:	0082      	lsls	r2, r0, #2
 800332e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003332:	f7fc ffad 	bl	8000290 <__aeabi_uldivmod>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <UART_SetConfig+0x38c>)
 800333c:	fba3 1302 	umull	r1, r3, r3, r2
 8003340:	095b      	lsrs	r3, r3, #5
 8003342:	2164      	movs	r1, #100	; 0x64
 8003344:	fb01 f303 	mul.w	r3, r1, r3
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	3332      	adds	r3, #50	; 0x32
 800334e:	4a2a      	ldr	r2, [pc, #168]	; (80033f8 <UART_SetConfig+0x38c>)
 8003350:	fba2 2303 	umull	r2, r3, r2, r3
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800335a:	441e      	add	r6, r3
 800335c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800335e:	4618      	mov	r0, r3
 8003360:	f04f 0100 	mov.w	r1, #0
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	1894      	adds	r4, r2, r2
 800336a:	603c      	str	r4, [r7, #0]
 800336c:	415b      	adcs	r3, r3
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003374:	1812      	adds	r2, r2, r0
 8003376:	eb41 0303 	adc.w	r3, r1, r3
 800337a:	f04f 0400 	mov.w	r4, #0
 800337e:	f04f 0500 	mov.w	r5, #0
 8003382:	00dd      	lsls	r5, r3, #3
 8003384:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003388:	00d4      	lsls	r4, r2, #3
 800338a:	4622      	mov	r2, r4
 800338c:	462b      	mov	r3, r5
 800338e:	eb12 0a00 	adds.w	sl, r2, r0
 8003392:	eb43 0b01 	adc.w	fp, r3, r1
 8003396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	4618      	mov	r0, r3
 800339c:	f04f 0100 	mov.w	r1, #0
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	008b      	lsls	r3, r1, #2
 80033aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033ae:	0082      	lsls	r2, r0, #2
 80033b0:	4650      	mov	r0, sl
 80033b2:	4659      	mov	r1, fp
 80033b4:	f7fc ff6c 	bl	8000290 <__aeabi_uldivmod>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <UART_SetConfig+0x38c>)
 80033be:	fba3 1302 	umull	r1, r3, r3, r2
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	2164      	movs	r1, #100	; 0x64
 80033c6:	fb01 f303 	mul.w	r3, r1, r3
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	3332      	adds	r3, #50	; 0x32
 80033d0:	4a09      	ldr	r2, [pc, #36]	; (80033f8 <UART_SetConfig+0x38c>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	f003 020f 	and.w	r2, r3, #15
 80033dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4432      	add	r2, r6
 80033e2:	609a      	str	r2, [r3, #8]
}
 80033e4:	bf00      	nop
 80033e6:	377c      	adds	r7, #124	; 0x7c
 80033e8:	46bd      	mov	sp, r7
 80033ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033ee:	bf00      	nop
 80033f0:	40011000 	.word	0x40011000
 80033f4:	40011400 	.word	0x40011400
 80033f8:	51eb851f 	.word	0x51eb851f

080033fc <__errno>:
 80033fc:	4b01      	ldr	r3, [pc, #4]	; (8003404 <__errno+0x8>)
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	2000000c 	.word	0x2000000c

08003408 <__libc_init_array>:
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	4d0d      	ldr	r5, [pc, #52]	; (8003440 <__libc_init_array+0x38>)
 800340c:	4c0d      	ldr	r4, [pc, #52]	; (8003444 <__libc_init_array+0x3c>)
 800340e:	1b64      	subs	r4, r4, r5
 8003410:	10a4      	asrs	r4, r4, #2
 8003412:	2600      	movs	r6, #0
 8003414:	42a6      	cmp	r6, r4
 8003416:	d109      	bne.n	800342c <__libc_init_array+0x24>
 8003418:	4d0b      	ldr	r5, [pc, #44]	; (8003448 <__libc_init_array+0x40>)
 800341a:	4c0c      	ldr	r4, [pc, #48]	; (800344c <__libc_init_array+0x44>)
 800341c:	f000 fc4e 	bl	8003cbc <_init>
 8003420:	1b64      	subs	r4, r4, r5
 8003422:	10a4      	asrs	r4, r4, #2
 8003424:	2600      	movs	r6, #0
 8003426:	42a6      	cmp	r6, r4
 8003428:	d105      	bne.n	8003436 <__libc_init_array+0x2e>
 800342a:	bd70      	pop	{r4, r5, r6, pc}
 800342c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003430:	4798      	blx	r3
 8003432:	3601      	adds	r6, #1
 8003434:	e7ee      	b.n	8003414 <__libc_init_array+0xc>
 8003436:	f855 3b04 	ldr.w	r3, [r5], #4
 800343a:	4798      	blx	r3
 800343c:	3601      	adds	r6, #1
 800343e:	e7f2      	b.n	8003426 <__libc_init_array+0x1e>
 8003440:	08003d5c 	.word	0x08003d5c
 8003444:	08003d5c 	.word	0x08003d5c
 8003448:	08003d5c 	.word	0x08003d5c
 800344c:	08003d60 	.word	0x08003d60

08003450 <memset>:
 8003450:	4402      	add	r2, r0
 8003452:	4603      	mov	r3, r0
 8003454:	4293      	cmp	r3, r2
 8003456:	d100      	bne.n	800345a <memset+0xa>
 8003458:	4770      	bx	lr
 800345a:	f803 1b01 	strb.w	r1, [r3], #1
 800345e:	e7f9      	b.n	8003454 <memset+0x4>

08003460 <siprintf>:
 8003460:	b40e      	push	{r1, r2, r3}
 8003462:	b500      	push	{lr}
 8003464:	b09c      	sub	sp, #112	; 0x70
 8003466:	ab1d      	add	r3, sp, #116	; 0x74
 8003468:	9002      	str	r0, [sp, #8]
 800346a:	9006      	str	r0, [sp, #24]
 800346c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003470:	4809      	ldr	r0, [pc, #36]	; (8003498 <siprintf+0x38>)
 8003472:	9107      	str	r1, [sp, #28]
 8003474:	9104      	str	r1, [sp, #16]
 8003476:	4909      	ldr	r1, [pc, #36]	; (800349c <siprintf+0x3c>)
 8003478:	f853 2b04 	ldr.w	r2, [r3], #4
 800347c:	9105      	str	r1, [sp, #20]
 800347e:	6800      	ldr	r0, [r0, #0]
 8003480:	9301      	str	r3, [sp, #4]
 8003482:	a902      	add	r1, sp, #8
 8003484:	f000 f868 	bl	8003558 <_svfiprintf_r>
 8003488:	9b02      	ldr	r3, [sp, #8]
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	b01c      	add	sp, #112	; 0x70
 8003490:	f85d eb04 	ldr.w	lr, [sp], #4
 8003494:	b003      	add	sp, #12
 8003496:	4770      	bx	lr
 8003498:	2000000c 	.word	0x2000000c
 800349c:	ffff0208 	.word	0xffff0208

080034a0 <__ssputs_r>:
 80034a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034a4:	688e      	ldr	r6, [r1, #8]
 80034a6:	429e      	cmp	r6, r3
 80034a8:	4682      	mov	sl, r0
 80034aa:	460c      	mov	r4, r1
 80034ac:	4690      	mov	r8, r2
 80034ae:	461f      	mov	r7, r3
 80034b0:	d838      	bhi.n	8003524 <__ssputs_r+0x84>
 80034b2:	898a      	ldrh	r2, [r1, #12]
 80034b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034b8:	d032      	beq.n	8003520 <__ssputs_r+0x80>
 80034ba:	6825      	ldr	r5, [r4, #0]
 80034bc:	6909      	ldr	r1, [r1, #16]
 80034be:	eba5 0901 	sub.w	r9, r5, r1
 80034c2:	6965      	ldr	r5, [r4, #20]
 80034c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80034cc:	3301      	adds	r3, #1
 80034ce:	444b      	add	r3, r9
 80034d0:	106d      	asrs	r5, r5, #1
 80034d2:	429d      	cmp	r5, r3
 80034d4:	bf38      	it	cc
 80034d6:	461d      	movcc	r5, r3
 80034d8:	0553      	lsls	r3, r2, #21
 80034da:	d531      	bpl.n	8003540 <__ssputs_r+0xa0>
 80034dc:	4629      	mov	r1, r5
 80034de:	f000 fb47 	bl	8003b70 <_malloc_r>
 80034e2:	4606      	mov	r6, r0
 80034e4:	b950      	cbnz	r0, 80034fc <__ssputs_r+0x5c>
 80034e6:	230c      	movs	r3, #12
 80034e8:	f8ca 3000 	str.w	r3, [sl]
 80034ec:	89a3      	ldrh	r3, [r4, #12]
 80034ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034f2:	81a3      	strh	r3, [r4, #12]
 80034f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034fc:	6921      	ldr	r1, [r4, #16]
 80034fe:	464a      	mov	r2, r9
 8003500:	f000 fabe 	bl	8003a80 <memcpy>
 8003504:	89a3      	ldrh	r3, [r4, #12]
 8003506:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800350a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800350e:	81a3      	strh	r3, [r4, #12]
 8003510:	6126      	str	r6, [r4, #16]
 8003512:	6165      	str	r5, [r4, #20]
 8003514:	444e      	add	r6, r9
 8003516:	eba5 0509 	sub.w	r5, r5, r9
 800351a:	6026      	str	r6, [r4, #0]
 800351c:	60a5      	str	r5, [r4, #8]
 800351e:	463e      	mov	r6, r7
 8003520:	42be      	cmp	r6, r7
 8003522:	d900      	bls.n	8003526 <__ssputs_r+0x86>
 8003524:	463e      	mov	r6, r7
 8003526:	4632      	mov	r2, r6
 8003528:	6820      	ldr	r0, [r4, #0]
 800352a:	4641      	mov	r1, r8
 800352c:	f000 fab6 	bl	8003a9c <memmove>
 8003530:	68a3      	ldr	r3, [r4, #8]
 8003532:	6822      	ldr	r2, [r4, #0]
 8003534:	1b9b      	subs	r3, r3, r6
 8003536:	4432      	add	r2, r6
 8003538:	60a3      	str	r3, [r4, #8]
 800353a:	6022      	str	r2, [r4, #0]
 800353c:	2000      	movs	r0, #0
 800353e:	e7db      	b.n	80034f8 <__ssputs_r+0x58>
 8003540:	462a      	mov	r2, r5
 8003542:	f000 fb6f 	bl	8003c24 <_realloc_r>
 8003546:	4606      	mov	r6, r0
 8003548:	2800      	cmp	r0, #0
 800354a:	d1e1      	bne.n	8003510 <__ssputs_r+0x70>
 800354c:	6921      	ldr	r1, [r4, #16]
 800354e:	4650      	mov	r0, sl
 8003550:	f000 fabe 	bl	8003ad0 <_free_r>
 8003554:	e7c7      	b.n	80034e6 <__ssputs_r+0x46>
	...

08003558 <_svfiprintf_r>:
 8003558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800355c:	4698      	mov	r8, r3
 800355e:	898b      	ldrh	r3, [r1, #12]
 8003560:	061b      	lsls	r3, r3, #24
 8003562:	b09d      	sub	sp, #116	; 0x74
 8003564:	4607      	mov	r7, r0
 8003566:	460d      	mov	r5, r1
 8003568:	4614      	mov	r4, r2
 800356a:	d50e      	bpl.n	800358a <_svfiprintf_r+0x32>
 800356c:	690b      	ldr	r3, [r1, #16]
 800356e:	b963      	cbnz	r3, 800358a <_svfiprintf_r+0x32>
 8003570:	2140      	movs	r1, #64	; 0x40
 8003572:	f000 fafd 	bl	8003b70 <_malloc_r>
 8003576:	6028      	str	r0, [r5, #0]
 8003578:	6128      	str	r0, [r5, #16]
 800357a:	b920      	cbnz	r0, 8003586 <_svfiprintf_r+0x2e>
 800357c:	230c      	movs	r3, #12
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003584:	e0d1      	b.n	800372a <_svfiprintf_r+0x1d2>
 8003586:	2340      	movs	r3, #64	; 0x40
 8003588:	616b      	str	r3, [r5, #20]
 800358a:	2300      	movs	r3, #0
 800358c:	9309      	str	r3, [sp, #36]	; 0x24
 800358e:	2320      	movs	r3, #32
 8003590:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003594:	f8cd 800c 	str.w	r8, [sp, #12]
 8003598:	2330      	movs	r3, #48	; 0x30
 800359a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003744 <_svfiprintf_r+0x1ec>
 800359e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035a2:	f04f 0901 	mov.w	r9, #1
 80035a6:	4623      	mov	r3, r4
 80035a8:	469a      	mov	sl, r3
 80035aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035ae:	b10a      	cbz	r2, 80035b4 <_svfiprintf_r+0x5c>
 80035b0:	2a25      	cmp	r2, #37	; 0x25
 80035b2:	d1f9      	bne.n	80035a8 <_svfiprintf_r+0x50>
 80035b4:	ebba 0b04 	subs.w	fp, sl, r4
 80035b8:	d00b      	beq.n	80035d2 <_svfiprintf_r+0x7a>
 80035ba:	465b      	mov	r3, fp
 80035bc:	4622      	mov	r2, r4
 80035be:	4629      	mov	r1, r5
 80035c0:	4638      	mov	r0, r7
 80035c2:	f7ff ff6d 	bl	80034a0 <__ssputs_r>
 80035c6:	3001      	adds	r0, #1
 80035c8:	f000 80aa 	beq.w	8003720 <_svfiprintf_r+0x1c8>
 80035cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035ce:	445a      	add	r2, fp
 80035d0:	9209      	str	r2, [sp, #36]	; 0x24
 80035d2:	f89a 3000 	ldrb.w	r3, [sl]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 80a2 	beq.w	8003720 <_svfiprintf_r+0x1c8>
 80035dc:	2300      	movs	r3, #0
 80035de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035e6:	f10a 0a01 	add.w	sl, sl, #1
 80035ea:	9304      	str	r3, [sp, #16]
 80035ec:	9307      	str	r3, [sp, #28]
 80035ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035f2:	931a      	str	r3, [sp, #104]	; 0x68
 80035f4:	4654      	mov	r4, sl
 80035f6:	2205      	movs	r2, #5
 80035f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035fc:	4851      	ldr	r0, [pc, #324]	; (8003744 <_svfiprintf_r+0x1ec>)
 80035fe:	f7fc fdf7 	bl	80001f0 <memchr>
 8003602:	9a04      	ldr	r2, [sp, #16]
 8003604:	b9d8      	cbnz	r0, 800363e <_svfiprintf_r+0xe6>
 8003606:	06d0      	lsls	r0, r2, #27
 8003608:	bf44      	itt	mi
 800360a:	2320      	movmi	r3, #32
 800360c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003610:	0711      	lsls	r1, r2, #28
 8003612:	bf44      	itt	mi
 8003614:	232b      	movmi	r3, #43	; 0x2b
 8003616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800361a:	f89a 3000 	ldrb.w	r3, [sl]
 800361e:	2b2a      	cmp	r3, #42	; 0x2a
 8003620:	d015      	beq.n	800364e <_svfiprintf_r+0xf6>
 8003622:	9a07      	ldr	r2, [sp, #28]
 8003624:	4654      	mov	r4, sl
 8003626:	2000      	movs	r0, #0
 8003628:	f04f 0c0a 	mov.w	ip, #10
 800362c:	4621      	mov	r1, r4
 800362e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003632:	3b30      	subs	r3, #48	; 0x30
 8003634:	2b09      	cmp	r3, #9
 8003636:	d94e      	bls.n	80036d6 <_svfiprintf_r+0x17e>
 8003638:	b1b0      	cbz	r0, 8003668 <_svfiprintf_r+0x110>
 800363a:	9207      	str	r2, [sp, #28]
 800363c:	e014      	b.n	8003668 <_svfiprintf_r+0x110>
 800363e:	eba0 0308 	sub.w	r3, r0, r8
 8003642:	fa09 f303 	lsl.w	r3, r9, r3
 8003646:	4313      	orrs	r3, r2
 8003648:	9304      	str	r3, [sp, #16]
 800364a:	46a2      	mov	sl, r4
 800364c:	e7d2      	b.n	80035f4 <_svfiprintf_r+0x9c>
 800364e:	9b03      	ldr	r3, [sp, #12]
 8003650:	1d19      	adds	r1, r3, #4
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	9103      	str	r1, [sp, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	bfbb      	ittet	lt
 800365a:	425b      	neglt	r3, r3
 800365c:	f042 0202 	orrlt.w	r2, r2, #2
 8003660:	9307      	strge	r3, [sp, #28]
 8003662:	9307      	strlt	r3, [sp, #28]
 8003664:	bfb8      	it	lt
 8003666:	9204      	strlt	r2, [sp, #16]
 8003668:	7823      	ldrb	r3, [r4, #0]
 800366a:	2b2e      	cmp	r3, #46	; 0x2e
 800366c:	d10c      	bne.n	8003688 <_svfiprintf_r+0x130>
 800366e:	7863      	ldrb	r3, [r4, #1]
 8003670:	2b2a      	cmp	r3, #42	; 0x2a
 8003672:	d135      	bne.n	80036e0 <_svfiprintf_r+0x188>
 8003674:	9b03      	ldr	r3, [sp, #12]
 8003676:	1d1a      	adds	r2, r3, #4
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	9203      	str	r2, [sp, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	bfb8      	it	lt
 8003680:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003684:	3402      	adds	r4, #2
 8003686:	9305      	str	r3, [sp, #20]
 8003688:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003754 <_svfiprintf_r+0x1fc>
 800368c:	7821      	ldrb	r1, [r4, #0]
 800368e:	2203      	movs	r2, #3
 8003690:	4650      	mov	r0, sl
 8003692:	f7fc fdad 	bl	80001f0 <memchr>
 8003696:	b140      	cbz	r0, 80036aa <_svfiprintf_r+0x152>
 8003698:	2340      	movs	r3, #64	; 0x40
 800369a:	eba0 000a 	sub.w	r0, r0, sl
 800369e:	fa03 f000 	lsl.w	r0, r3, r0
 80036a2:	9b04      	ldr	r3, [sp, #16]
 80036a4:	4303      	orrs	r3, r0
 80036a6:	3401      	adds	r4, #1
 80036a8:	9304      	str	r3, [sp, #16]
 80036aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ae:	4826      	ldr	r0, [pc, #152]	; (8003748 <_svfiprintf_r+0x1f0>)
 80036b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036b4:	2206      	movs	r2, #6
 80036b6:	f7fc fd9b 	bl	80001f0 <memchr>
 80036ba:	2800      	cmp	r0, #0
 80036bc:	d038      	beq.n	8003730 <_svfiprintf_r+0x1d8>
 80036be:	4b23      	ldr	r3, [pc, #140]	; (800374c <_svfiprintf_r+0x1f4>)
 80036c0:	bb1b      	cbnz	r3, 800370a <_svfiprintf_r+0x1b2>
 80036c2:	9b03      	ldr	r3, [sp, #12]
 80036c4:	3307      	adds	r3, #7
 80036c6:	f023 0307 	bic.w	r3, r3, #7
 80036ca:	3308      	adds	r3, #8
 80036cc:	9303      	str	r3, [sp, #12]
 80036ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036d0:	4433      	add	r3, r6
 80036d2:	9309      	str	r3, [sp, #36]	; 0x24
 80036d4:	e767      	b.n	80035a6 <_svfiprintf_r+0x4e>
 80036d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80036da:	460c      	mov	r4, r1
 80036dc:	2001      	movs	r0, #1
 80036de:	e7a5      	b.n	800362c <_svfiprintf_r+0xd4>
 80036e0:	2300      	movs	r3, #0
 80036e2:	3401      	adds	r4, #1
 80036e4:	9305      	str	r3, [sp, #20]
 80036e6:	4619      	mov	r1, r3
 80036e8:	f04f 0c0a 	mov.w	ip, #10
 80036ec:	4620      	mov	r0, r4
 80036ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036f2:	3a30      	subs	r2, #48	; 0x30
 80036f4:	2a09      	cmp	r2, #9
 80036f6:	d903      	bls.n	8003700 <_svfiprintf_r+0x1a8>
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0c5      	beq.n	8003688 <_svfiprintf_r+0x130>
 80036fc:	9105      	str	r1, [sp, #20]
 80036fe:	e7c3      	b.n	8003688 <_svfiprintf_r+0x130>
 8003700:	fb0c 2101 	mla	r1, ip, r1, r2
 8003704:	4604      	mov	r4, r0
 8003706:	2301      	movs	r3, #1
 8003708:	e7f0      	b.n	80036ec <_svfiprintf_r+0x194>
 800370a:	ab03      	add	r3, sp, #12
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	462a      	mov	r2, r5
 8003710:	4b0f      	ldr	r3, [pc, #60]	; (8003750 <_svfiprintf_r+0x1f8>)
 8003712:	a904      	add	r1, sp, #16
 8003714:	4638      	mov	r0, r7
 8003716:	f3af 8000 	nop.w
 800371a:	1c42      	adds	r2, r0, #1
 800371c:	4606      	mov	r6, r0
 800371e:	d1d6      	bne.n	80036ce <_svfiprintf_r+0x176>
 8003720:	89ab      	ldrh	r3, [r5, #12]
 8003722:	065b      	lsls	r3, r3, #25
 8003724:	f53f af2c 	bmi.w	8003580 <_svfiprintf_r+0x28>
 8003728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800372a:	b01d      	add	sp, #116	; 0x74
 800372c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003730:	ab03      	add	r3, sp, #12
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	462a      	mov	r2, r5
 8003736:	4b06      	ldr	r3, [pc, #24]	; (8003750 <_svfiprintf_r+0x1f8>)
 8003738:	a904      	add	r1, sp, #16
 800373a:	4638      	mov	r0, r7
 800373c:	f000 f87a 	bl	8003834 <_printf_i>
 8003740:	e7eb      	b.n	800371a <_svfiprintf_r+0x1c2>
 8003742:	bf00      	nop
 8003744:	08003d20 	.word	0x08003d20
 8003748:	08003d2a 	.word	0x08003d2a
 800374c:	00000000 	.word	0x00000000
 8003750:	080034a1 	.word	0x080034a1
 8003754:	08003d26 	.word	0x08003d26

08003758 <_printf_common>:
 8003758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800375c:	4616      	mov	r6, r2
 800375e:	4699      	mov	r9, r3
 8003760:	688a      	ldr	r2, [r1, #8]
 8003762:	690b      	ldr	r3, [r1, #16]
 8003764:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003768:	4293      	cmp	r3, r2
 800376a:	bfb8      	it	lt
 800376c:	4613      	movlt	r3, r2
 800376e:	6033      	str	r3, [r6, #0]
 8003770:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003774:	4607      	mov	r7, r0
 8003776:	460c      	mov	r4, r1
 8003778:	b10a      	cbz	r2, 800377e <_printf_common+0x26>
 800377a:	3301      	adds	r3, #1
 800377c:	6033      	str	r3, [r6, #0]
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	0699      	lsls	r1, r3, #26
 8003782:	bf42      	ittt	mi
 8003784:	6833      	ldrmi	r3, [r6, #0]
 8003786:	3302      	addmi	r3, #2
 8003788:	6033      	strmi	r3, [r6, #0]
 800378a:	6825      	ldr	r5, [r4, #0]
 800378c:	f015 0506 	ands.w	r5, r5, #6
 8003790:	d106      	bne.n	80037a0 <_printf_common+0x48>
 8003792:	f104 0a19 	add.w	sl, r4, #25
 8003796:	68e3      	ldr	r3, [r4, #12]
 8003798:	6832      	ldr	r2, [r6, #0]
 800379a:	1a9b      	subs	r3, r3, r2
 800379c:	42ab      	cmp	r3, r5
 800379e:	dc26      	bgt.n	80037ee <_printf_common+0x96>
 80037a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037a4:	1e13      	subs	r3, r2, #0
 80037a6:	6822      	ldr	r2, [r4, #0]
 80037a8:	bf18      	it	ne
 80037aa:	2301      	movne	r3, #1
 80037ac:	0692      	lsls	r2, r2, #26
 80037ae:	d42b      	bmi.n	8003808 <_printf_common+0xb0>
 80037b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037b4:	4649      	mov	r1, r9
 80037b6:	4638      	mov	r0, r7
 80037b8:	47c0      	blx	r8
 80037ba:	3001      	adds	r0, #1
 80037bc:	d01e      	beq.n	80037fc <_printf_common+0xa4>
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	68e5      	ldr	r5, [r4, #12]
 80037c2:	6832      	ldr	r2, [r6, #0]
 80037c4:	f003 0306 	and.w	r3, r3, #6
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	bf08      	it	eq
 80037cc:	1aad      	subeq	r5, r5, r2
 80037ce:	68a3      	ldr	r3, [r4, #8]
 80037d0:	6922      	ldr	r2, [r4, #16]
 80037d2:	bf0c      	ite	eq
 80037d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037d8:	2500      	movne	r5, #0
 80037da:	4293      	cmp	r3, r2
 80037dc:	bfc4      	itt	gt
 80037de:	1a9b      	subgt	r3, r3, r2
 80037e0:	18ed      	addgt	r5, r5, r3
 80037e2:	2600      	movs	r6, #0
 80037e4:	341a      	adds	r4, #26
 80037e6:	42b5      	cmp	r5, r6
 80037e8:	d11a      	bne.n	8003820 <_printf_common+0xc8>
 80037ea:	2000      	movs	r0, #0
 80037ec:	e008      	b.n	8003800 <_printf_common+0xa8>
 80037ee:	2301      	movs	r3, #1
 80037f0:	4652      	mov	r2, sl
 80037f2:	4649      	mov	r1, r9
 80037f4:	4638      	mov	r0, r7
 80037f6:	47c0      	blx	r8
 80037f8:	3001      	adds	r0, #1
 80037fa:	d103      	bne.n	8003804 <_printf_common+0xac>
 80037fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003804:	3501      	adds	r5, #1
 8003806:	e7c6      	b.n	8003796 <_printf_common+0x3e>
 8003808:	18e1      	adds	r1, r4, r3
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	2030      	movs	r0, #48	; 0x30
 800380e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003812:	4422      	add	r2, r4
 8003814:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003818:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800381c:	3302      	adds	r3, #2
 800381e:	e7c7      	b.n	80037b0 <_printf_common+0x58>
 8003820:	2301      	movs	r3, #1
 8003822:	4622      	mov	r2, r4
 8003824:	4649      	mov	r1, r9
 8003826:	4638      	mov	r0, r7
 8003828:	47c0      	blx	r8
 800382a:	3001      	adds	r0, #1
 800382c:	d0e6      	beq.n	80037fc <_printf_common+0xa4>
 800382e:	3601      	adds	r6, #1
 8003830:	e7d9      	b.n	80037e6 <_printf_common+0x8e>
	...

08003834 <_printf_i>:
 8003834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003838:	460c      	mov	r4, r1
 800383a:	4691      	mov	r9, r2
 800383c:	7e27      	ldrb	r7, [r4, #24]
 800383e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003840:	2f78      	cmp	r7, #120	; 0x78
 8003842:	4680      	mov	r8, r0
 8003844:	469a      	mov	sl, r3
 8003846:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800384a:	d807      	bhi.n	800385c <_printf_i+0x28>
 800384c:	2f62      	cmp	r7, #98	; 0x62
 800384e:	d80a      	bhi.n	8003866 <_printf_i+0x32>
 8003850:	2f00      	cmp	r7, #0
 8003852:	f000 80d8 	beq.w	8003a06 <_printf_i+0x1d2>
 8003856:	2f58      	cmp	r7, #88	; 0x58
 8003858:	f000 80a3 	beq.w	80039a2 <_printf_i+0x16e>
 800385c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003860:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003864:	e03a      	b.n	80038dc <_printf_i+0xa8>
 8003866:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800386a:	2b15      	cmp	r3, #21
 800386c:	d8f6      	bhi.n	800385c <_printf_i+0x28>
 800386e:	a001      	add	r0, pc, #4	; (adr r0, 8003874 <_printf_i+0x40>)
 8003870:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003874:	080038cd 	.word	0x080038cd
 8003878:	080038e1 	.word	0x080038e1
 800387c:	0800385d 	.word	0x0800385d
 8003880:	0800385d 	.word	0x0800385d
 8003884:	0800385d 	.word	0x0800385d
 8003888:	0800385d 	.word	0x0800385d
 800388c:	080038e1 	.word	0x080038e1
 8003890:	0800385d 	.word	0x0800385d
 8003894:	0800385d 	.word	0x0800385d
 8003898:	0800385d 	.word	0x0800385d
 800389c:	0800385d 	.word	0x0800385d
 80038a0:	080039ed 	.word	0x080039ed
 80038a4:	08003911 	.word	0x08003911
 80038a8:	080039cf 	.word	0x080039cf
 80038ac:	0800385d 	.word	0x0800385d
 80038b0:	0800385d 	.word	0x0800385d
 80038b4:	08003a0f 	.word	0x08003a0f
 80038b8:	0800385d 	.word	0x0800385d
 80038bc:	08003911 	.word	0x08003911
 80038c0:	0800385d 	.word	0x0800385d
 80038c4:	0800385d 	.word	0x0800385d
 80038c8:	080039d7 	.word	0x080039d7
 80038cc:	680b      	ldr	r3, [r1, #0]
 80038ce:	1d1a      	adds	r2, r3, #4
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	600a      	str	r2, [r1, #0]
 80038d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80038d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038dc:	2301      	movs	r3, #1
 80038de:	e0a3      	b.n	8003a28 <_printf_i+0x1f4>
 80038e0:	6825      	ldr	r5, [r4, #0]
 80038e2:	6808      	ldr	r0, [r1, #0]
 80038e4:	062e      	lsls	r6, r5, #24
 80038e6:	f100 0304 	add.w	r3, r0, #4
 80038ea:	d50a      	bpl.n	8003902 <_printf_i+0xce>
 80038ec:	6805      	ldr	r5, [r0, #0]
 80038ee:	600b      	str	r3, [r1, #0]
 80038f0:	2d00      	cmp	r5, #0
 80038f2:	da03      	bge.n	80038fc <_printf_i+0xc8>
 80038f4:	232d      	movs	r3, #45	; 0x2d
 80038f6:	426d      	negs	r5, r5
 80038f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038fc:	485e      	ldr	r0, [pc, #376]	; (8003a78 <_printf_i+0x244>)
 80038fe:	230a      	movs	r3, #10
 8003900:	e019      	b.n	8003936 <_printf_i+0x102>
 8003902:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003906:	6805      	ldr	r5, [r0, #0]
 8003908:	600b      	str	r3, [r1, #0]
 800390a:	bf18      	it	ne
 800390c:	b22d      	sxthne	r5, r5
 800390e:	e7ef      	b.n	80038f0 <_printf_i+0xbc>
 8003910:	680b      	ldr	r3, [r1, #0]
 8003912:	6825      	ldr	r5, [r4, #0]
 8003914:	1d18      	adds	r0, r3, #4
 8003916:	6008      	str	r0, [r1, #0]
 8003918:	0628      	lsls	r0, r5, #24
 800391a:	d501      	bpl.n	8003920 <_printf_i+0xec>
 800391c:	681d      	ldr	r5, [r3, #0]
 800391e:	e002      	b.n	8003926 <_printf_i+0xf2>
 8003920:	0669      	lsls	r1, r5, #25
 8003922:	d5fb      	bpl.n	800391c <_printf_i+0xe8>
 8003924:	881d      	ldrh	r5, [r3, #0]
 8003926:	4854      	ldr	r0, [pc, #336]	; (8003a78 <_printf_i+0x244>)
 8003928:	2f6f      	cmp	r7, #111	; 0x6f
 800392a:	bf0c      	ite	eq
 800392c:	2308      	moveq	r3, #8
 800392e:	230a      	movne	r3, #10
 8003930:	2100      	movs	r1, #0
 8003932:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003936:	6866      	ldr	r6, [r4, #4]
 8003938:	60a6      	str	r6, [r4, #8]
 800393a:	2e00      	cmp	r6, #0
 800393c:	bfa2      	ittt	ge
 800393e:	6821      	ldrge	r1, [r4, #0]
 8003940:	f021 0104 	bicge.w	r1, r1, #4
 8003944:	6021      	strge	r1, [r4, #0]
 8003946:	b90d      	cbnz	r5, 800394c <_printf_i+0x118>
 8003948:	2e00      	cmp	r6, #0
 800394a:	d04d      	beq.n	80039e8 <_printf_i+0x1b4>
 800394c:	4616      	mov	r6, r2
 800394e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003952:	fb03 5711 	mls	r7, r3, r1, r5
 8003956:	5dc7      	ldrb	r7, [r0, r7]
 8003958:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800395c:	462f      	mov	r7, r5
 800395e:	42bb      	cmp	r3, r7
 8003960:	460d      	mov	r5, r1
 8003962:	d9f4      	bls.n	800394e <_printf_i+0x11a>
 8003964:	2b08      	cmp	r3, #8
 8003966:	d10b      	bne.n	8003980 <_printf_i+0x14c>
 8003968:	6823      	ldr	r3, [r4, #0]
 800396a:	07df      	lsls	r7, r3, #31
 800396c:	d508      	bpl.n	8003980 <_printf_i+0x14c>
 800396e:	6923      	ldr	r3, [r4, #16]
 8003970:	6861      	ldr	r1, [r4, #4]
 8003972:	4299      	cmp	r1, r3
 8003974:	bfde      	ittt	le
 8003976:	2330      	movle	r3, #48	; 0x30
 8003978:	f806 3c01 	strble.w	r3, [r6, #-1]
 800397c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003980:	1b92      	subs	r2, r2, r6
 8003982:	6122      	str	r2, [r4, #16]
 8003984:	f8cd a000 	str.w	sl, [sp]
 8003988:	464b      	mov	r3, r9
 800398a:	aa03      	add	r2, sp, #12
 800398c:	4621      	mov	r1, r4
 800398e:	4640      	mov	r0, r8
 8003990:	f7ff fee2 	bl	8003758 <_printf_common>
 8003994:	3001      	adds	r0, #1
 8003996:	d14c      	bne.n	8003a32 <_printf_i+0x1fe>
 8003998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800399c:	b004      	add	sp, #16
 800399e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a2:	4835      	ldr	r0, [pc, #212]	; (8003a78 <_printf_i+0x244>)
 80039a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	680e      	ldr	r6, [r1, #0]
 80039ac:	061f      	lsls	r7, r3, #24
 80039ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80039b2:	600e      	str	r6, [r1, #0]
 80039b4:	d514      	bpl.n	80039e0 <_printf_i+0x1ac>
 80039b6:	07d9      	lsls	r1, r3, #31
 80039b8:	bf44      	itt	mi
 80039ba:	f043 0320 	orrmi.w	r3, r3, #32
 80039be:	6023      	strmi	r3, [r4, #0]
 80039c0:	b91d      	cbnz	r5, 80039ca <_printf_i+0x196>
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	f023 0320 	bic.w	r3, r3, #32
 80039c8:	6023      	str	r3, [r4, #0]
 80039ca:	2310      	movs	r3, #16
 80039cc:	e7b0      	b.n	8003930 <_printf_i+0xfc>
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	f043 0320 	orr.w	r3, r3, #32
 80039d4:	6023      	str	r3, [r4, #0]
 80039d6:	2378      	movs	r3, #120	; 0x78
 80039d8:	4828      	ldr	r0, [pc, #160]	; (8003a7c <_printf_i+0x248>)
 80039da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039de:	e7e3      	b.n	80039a8 <_printf_i+0x174>
 80039e0:	065e      	lsls	r6, r3, #25
 80039e2:	bf48      	it	mi
 80039e4:	b2ad      	uxthmi	r5, r5
 80039e6:	e7e6      	b.n	80039b6 <_printf_i+0x182>
 80039e8:	4616      	mov	r6, r2
 80039ea:	e7bb      	b.n	8003964 <_printf_i+0x130>
 80039ec:	680b      	ldr	r3, [r1, #0]
 80039ee:	6826      	ldr	r6, [r4, #0]
 80039f0:	6960      	ldr	r0, [r4, #20]
 80039f2:	1d1d      	adds	r5, r3, #4
 80039f4:	600d      	str	r5, [r1, #0]
 80039f6:	0635      	lsls	r5, r6, #24
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	d501      	bpl.n	8003a00 <_printf_i+0x1cc>
 80039fc:	6018      	str	r0, [r3, #0]
 80039fe:	e002      	b.n	8003a06 <_printf_i+0x1d2>
 8003a00:	0671      	lsls	r1, r6, #25
 8003a02:	d5fb      	bpl.n	80039fc <_printf_i+0x1c8>
 8003a04:	8018      	strh	r0, [r3, #0]
 8003a06:	2300      	movs	r3, #0
 8003a08:	6123      	str	r3, [r4, #16]
 8003a0a:	4616      	mov	r6, r2
 8003a0c:	e7ba      	b.n	8003984 <_printf_i+0x150>
 8003a0e:	680b      	ldr	r3, [r1, #0]
 8003a10:	1d1a      	adds	r2, r3, #4
 8003a12:	600a      	str	r2, [r1, #0]
 8003a14:	681e      	ldr	r6, [r3, #0]
 8003a16:	6862      	ldr	r2, [r4, #4]
 8003a18:	2100      	movs	r1, #0
 8003a1a:	4630      	mov	r0, r6
 8003a1c:	f7fc fbe8 	bl	80001f0 <memchr>
 8003a20:	b108      	cbz	r0, 8003a26 <_printf_i+0x1f2>
 8003a22:	1b80      	subs	r0, r0, r6
 8003a24:	6060      	str	r0, [r4, #4]
 8003a26:	6863      	ldr	r3, [r4, #4]
 8003a28:	6123      	str	r3, [r4, #16]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a30:	e7a8      	b.n	8003984 <_printf_i+0x150>
 8003a32:	6923      	ldr	r3, [r4, #16]
 8003a34:	4632      	mov	r2, r6
 8003a36:	4649      	mov	r1, r9
 8003a38:	4640      	mov	r0, r8
 8003a3a:	47d0      	blx	sl
 8003a3c:	3001      	adds	r0, #1
 8003a3e:	d0ab      	beq.n	8003998 <_printf_i+0x164>
 8003a40:	6823      	ldr	r3, [r4, #0]
 8003a42:	079b      	lsls	r3, r3, #30
 8003a44:	d413      	bmi.n	8003a6e <_printf_i+0x23a>
 8003a46:	68e0      	ldr	r0, [r4, #12]
 8003a48:	9b03      	ldr	r3, [sp, #12]
 8003a4a:	4298      	cmp	r0, r3
 8003a4c:	bfb8      	it	lt
 8003a4e:	4618      	movlt	r0, r3
 8003a50:	e7a4      	b.n	800399c <_printf_i+0x168>
 8003a52:	2301      	movs	r3, #1
 8003a54:	4632      	mov	r2, r6
 8003a56:	4649      	mov	r1, r9
 8003a58:	4640      	mov	r0, r8
 8003a5a:	47d0      	blx	sl
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	d09b      	beq.n	8003998 <_printf_i+0x164>
 8003a60:	3501      	adds	r5, #1
 8003a62:	68e3      	ldr	r3, [r4, #12]
 8003a64:	9903      	ldr	r1, [sp, #12]
 8003a66:	1a5b      	subs	r3, r3, r1
 8003a68:	42ab      	cmp	r3, r5
 8003a6a:	dcf2      	bgt.n	8003a52 <_printf_i+0x21e>
 8003a6c:	e7eb      	b.n	8003a46 <_printf_i+0x212>
 8003a6e:	2500      	movs	r5, #0
 8003a70:	f104 0619 	add.w	r6, r4, #25
 8003a74:	e7f5      	b.n	8003a62 <_printf_i+0x22e>
 8003a76:	bf00      	nop
 8003a78:	08003d31 	.word	0x08003d31
 8003a7c:	08003d42 	.word	0x08003d42

08003a80 <memcpy>:
 8003a80:	440a      	add	r2, r1
 8003a82:	4291      	cmp	r1, r2
 8003a84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003a88:	d100      	bne.n	8003a8c <memcpy+0xc>
 8003a8a:	4770      	bx	lr
 8003a8c:	b510      	push	{r4, lr}
 8003a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a96:	4291      	cmp	r1, r2
 8003a98:	d1f9      	bne.n	8003a8e <memcpy+0xe>
 8003a9a:	bd10      	pop	{r4, pc}

08003a9c <memmove>:
 8003a9c:	4288      	cmp	r0, r1
 8003a9e:	b510      	push	{r4, lr}
 8003aa0:	eb01 0402 	add.w	r4, r1, r2
 8003aa4:	d902      	bls.n	8003aac <memmove+0x10>
 8003aa6:	4284      	cmp	r4, r0
 8003aa8:	4623      	mov	r3, r4
 8003aaa:	d807      	bhi.n	8003abc <memmove+0x20>
 8003aac:	1e43      	subs	r3, r0, #1
 8003aae:	42a1      	cmp	r1, r4
 8003ab0:	d008      	beq.n	8003ac4 <memmove+0x28>
 8003ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003aba:	e7f8      	b.n	8003aae <memmove+0x12>
 8003abc:	4402      	add	r2, r0
 8003abe:	4601      	mov	r1, r0
 8003ac0:	428a      	cmp	r2, r1
 8003ac2:	d100      	bne.n	8003ac6 <memmove+0x2a>
 8003ac4:	bd10      	pop	{r4, pc}
 8003ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003aca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ace:	e7f7      	b.n	8003ac0 <memmove+0x24>

08003ad0 <_free_r>:
 8003ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ad2:	2900      	cmp	r1, #0
 8003ad4:	d048      	beq.n	8003b68 <_free_r+0x98>
 8003ad6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ada:	9001      	str	r0, [sp, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f1a1 0404 	sub.w	r4, r1, #4
 8003ae2:	bfb8      	it	lt
 8003ae4:	18e4      	addlt	r4, r4, r3
 8003ae6:	f000 f8d3 	bl	8003c90 <__malloc_lock>
 8003aea:	4a20      	ldr	r2, [pc, #128]	; (8003b6c <_free_r+0x9c>)
 8003aec:	9801      	ldr	r0, [sp, #4]
 8003aee:	6813      	ldr	r3, [r2, #0]
 8003af0:	4615      	mov	r5, r2
 8003af2:	b933      	cbnz	r3, 8003b02 <_free_r+0x32>
 8003af4:	6063      	str	r3, [r4, #4]
 8003af6:	6014      	str	r4, [r2, #0]
 8003af8:	b003      	add	sp, #12
 8003afa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003afe:	f000 b8cd 	b.w	8003c9c <__malloc_unlock>
 8003b02:	42a3      	cmp	r3, r4
 8003b04:	d90b      	bls.n	8003b1e <_free_r+0x4e>
 8003b06:	6821      	ldr	r1, [r4, #0]
 8003b08:	1862      	adds	r2, r4, r1
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	bf04      	itt	eq
 8003b0e:	681a      	ldreq	r2, [r3, #0]
 8003b10:	685b      	ldreq	r3, [r3, #4]
 8003b12:	6063      	str	r3, [r4, #4]
 8003b14:	bf04      	itt	eq
 8003b16:	1852      	addeq	r2, r2, r1
 8003b18:	6022      	streq	r2, [r4, #0]
 8003b1a:	602c      	str	r4, [r5, #0]
 8003b1c:	e7ec      	b.n	8003af8 <_free_r+0x28>
 8003b1e:	461a      	mov	r2, r3
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	b10b      	cbz	r3, 8003b28 <_free_r+0x58>
 8003b24:	42a3      	cmp	r3, r4
 8003b26:	d9fa      	bls.n	8003b1e <_free_r+0x4e>
 8003b28:	6811      	ldr	r1, [r2, #0]
 8003b2a:	1855      	adds	r5, r2, r1
 8003b2c:	42a5      	cmp	r5, r4
 8003b2e:	d10b      	bne.n	8003b48 <_free_r+0x78>
 8003b30:	6824      	ldr	r4, [r4, #0]
 8003b32:	4421      	add	r1, r4
 8003b34:	1854      	adds	r4, r2, r1
 8003b36:	42a3      	cmp	r3, r4
 8003b38:	6011      	str	r1, [r2, #0]
 8003b3a:	d1dd      	bne.n	8003af8 <_free_r+0x28>
 8003b3c:	681c      	ldr	r4, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	6053      	str	r3, [r2, #4]
 8003b42:	4421      	add	r1, r4
 8003b44:	6011      	str	r1, [r2, #0]
 8003b46:	e7d7      	b.n	8003af8 <_free_r+0x28>
 8003b48:	d902      	bls.n	8003b50 <_free_r+0x80>
 8003b4a:	230c      	movs	r3, #12
 8003b4c:	6003      	str	r3, [r0, #0]
 8003b4e:	e7d3      	b.n	8003af8 <_free_r+0x28>
 8003b50:	6825      	ldr	r5, [r4, #0]
 8003b52:	1961      	adds	r1, r4, r5
 8003b54:	428b      	cmp	r3, r1
 8003b56:	bf04      	itt	eq
 8003b58:	6819      	ldreq	r1, [r3, #0]
 8003b5a:	685b      	ldreq	r3, [r3, #4]
 8003b5c:	6063      	str	r3, [r4, #4]
 8003b5e:	bf04      	itt	eq
 8003b60:	1949      	addeq	r1, r1, r5
 8003b62:	6021      	streq	r1, [r4, #0]
 8003b64:	6054      	str	r4, [r2, #4]
 8003b66:	e7c7      	b.n	8003af8 <_free_r+0x28>
 8003b68:	b003      	add	sp, #12
 8003b6a:	bd30      	pop	{r4, r5, pc}
 8003b6c:	20000090 	.word	0x20000090

08003b70 <_malloc_r>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	1ccd      	adds	r5, r1, #3
 8003b74:	f025 0503 	bic.w	r5, r5, #3
 8003b78:	3508      	adds	r5, #8
 8003b7a:	2d0c      	cmp	r5, #12
 8003b7c:	bf38      	it	cc
 8003b7e:	250c      	movcc	r5, #12
 8003b80:	2d00      	cmp	r5, #0
 8003b82:	4606      	mov	r6, r0
 8003b84:	db01      	blt.n	8003b8a <_malloc_r+0x1a>
 8003b86:	42a9      	cmp	r1, r5
 8003b88:	d903      	bls.n	8003b92 <_malloc_r+0x22>
 8003b8a:	230c      	movs	r3, #12
 8003b8c:	6033      	str	r3, [r6, #0]
 8003b8e:	2000      	movs	r0, #0
 8003b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b92:	f000 f87d 	bl	8003c90 <__malloc_lock>
 8003b96:	4921      	ldr	r1, [pc, #132]	; (8003c1c <_malloc_r+0xac>)
 8003b98:	680a      	ldr	r2, [r1, #0]
 8003b9a:	4614      	mov	r4, r2
 8003b9c:	b99c      	cbnz	r4, 8003bc6 <_malloc_r+0x56>
 8003b9e:	4f20      	ldr	r7, [pc, #128]	; (8003c20 <_malloc_r+0xb0>)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	b923      	cbnz	r3, 8003bae <_malloc_r+0x3e>
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	f000 f862 	bl	8003c70 <_sbrk_r>
 8003bac:	6038      	str	r0, [r7, #0]
 8003bae:	4629      	mov	r1, r5
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	f000 f85d 	bl	8003c70 <_sbrk_r>
 8003bb6:	1c43      	adds	r3, r0, #1
 8003bb8:	d123      	bne.n	8003c02 <_malloc_r+0x92>
 8003bba:	230c      	movs	r3, #12
 8003bbc:	6033      	str	r3, [r6, #0]
 8003bbe:	4630      	mov	r0, r6
 8003bc0:	f000 f86c 	bl	8003c9c <__malloc_unlock>
 8003bc4:	e7e3      	b.n	8003b8e <_malloc_r+0x1e>
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	1b5b      	subs	r3, r3, r5
 8003bca:	d417      	bmi.n	8003bfc <_malloc_r+0x8c>
 8003bcc:	2b0b      	cmp	r3, #11
 8003bce:	d903      	bls.n	8003bd8 <_malloc_r+0x68>
 8003bd0:	6023      	str	r3, [r4, #0]
 8003bd2:	441c      	add	r4, r3
 8003bd4:	6025      	str	r5, [r4, #0]
 8003bd6:	e004      	b.n	8003be2 <_malloc_r+0x72>
 8003bd8:	6863      	ldr	r3, [r4, #4]
 8003bda:	42a2      	cmp	r2, r4
 8003bdc:	bf0c      	ite	eq
 8003bde:	600b      	streq	r3, [r1, #0]
 8003be0:	6053      	strne	r3, [r2, #4]
 8003be2:	4630      	mov	r0, r6
 8003be4:	f000 f85a 	bl	8003c9c <__malloc_unlock>
 8003be8:	f104 000b 	add.w	r0, r4, #11
 8003bec:	1d23      	adds	r3, r4, #4
 8003bee:	f020 0007 	bic.w	r0, r0, #7
 8003bf2:	1ac2      	subs	r2, r0, r3
 8003bf4:	d0cc      	beq.n	8003b90 <_malloc_r+0x20>
 8003bf6:	1a1b      	subs	r3, r3, r0
 8003bf8:	50a3      	str	r3, [r4, r2]
 8003bfa:	e7c9      	b.n	8003b90 <_malloc_r+0x20>
 8003bfc:	4622      	mov	r2, r4
 8003bfe:	6864      	ldr	r4, [r4, #4]
 8003c00:	e7cc      	b.n	8003b9c <_malloc_r+0x2c>
 8003c02:	1cc4      	adds	r4, r0, #3
 8003c04:	f024 0403 	bic.w	r4, r4, #3
 8003c08:	42a0      	cmp	r0, r4
 8003c0a:	d0e3      	beq.n	8003bd4 <_malloc_r+0x64>
 8003c0c:	1a21      	subs	r1, r4, r0
 8003c0e:	4630      	mov	r0, r6
 8003c10:	f000 f82e 	bl	8003c70 <_sbrk_r>
 8003c14:	3001      	adds	r0, #1
 8003c16:	d1dd      	bne.n	8003bd4 <_malloc_r+0x64>
 8003c18:	e7cf      	b.n	8003bba <_malloc_r+0x4a>
 8003c1a:	bf00      	nop
 8003c1c:	20000090 	.word	0x20000090
 8003c20:	20000094 	.word	0x20000094

08003c24 <_realloc_r>:
 8003c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c26:	4607      	mov	r7, r0
 8003c28:	4614      	mov	r4, r2
 8003c2a:	460e      	mov	r6, r1
 8003c2c:	b921      	cbnz	r1, 8003c38 <_realloc_r+0x14>
 8003c2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c32:	4611      	mov	r1, r2
 8003c34:	f7ff bf9c 	b.w	8003b70 <_malloc_r>
 8003c38:	b922      	cbnz	r2, 8003c44 <_realloc_r+0x20>
 8003c3a:	f7ff ff49 	bl	8003ad0 <_free_r>
 8003c3e:	4625      	mov	r5, r4
 8003c40:	4628      	mov	r0, r5
 8003c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c44:	f000 f830 	bl	8003ca8 <_malloc_usable_size_r>
 8003c48:	42a0      	cmp	r0, r4
 8003c4a:	d20f      	bcs.n	8003c6c <_realloc_r+0x48>
 8003c4c:	4621      	mov	r1, r4
 8003c4e:	4638      	mov	r0, r7
 8003c50:	f7ff ff8e 	bl	8003b70 <_malloc_r>
 8003c54:	4605      	mov	r5, r0
 8003c56:	2800      	cmp	r0, #0
 8003c58:	d0f2      	beq.n	8003c40 <_realloc_r+0x1c>
 8003c5a:	4631      	mov	r1, r6
 8003c5c:	4622      	mov	r2, r4
 8003c5e:	f7ff ff0f 	bl	8003a80 <memcpy>
 8003c62:	4631      	mov	r1, r6
 8003c64:	4638      	mov	r0, r7
 8003c66:	f7ff ff33 	bl	8003ad0 <_free_r>
 8003c6a:	e7e9      	b.n	8003c40 <_realloc_r+0x1c>
 8003c6c:	4635      	mov	r5, r6
 8003c6e:	e7e7      	b.n	8003c40 <_realloc_r+0x1c>

08003c70 <_sbrk_r>:
 8003c70:	b538      	push	{r3, r4, r5, lr}
 8003c72:	4d06      	ldr	r5, [pc, #24]	; (8003c8c <_sbrk_r+0x1c>)
 8003c74:	2300      	movs	r3, #0
 8003c76:	4604      	mov	r4, r0
 8003c78:	4608      	mov	r0, r1
 8003c7a:	602b      	str	r3, [r5, #0]
 8003c7c:	f7fd f8ea 	bl	8000e54 <_sbrk>
 8003c80:	1c43      	adds	r3, r0, #1
 8003c82:	d102      	bne.n	8003c8a <_sbrk_r+0x1a>
 8003c84:	682b      	ldr	r3, [r5, #0]
 8003c86:	b103      	cbz	r3, 8003c8a <_sbrk_r+0x1a>
 8003c88:	6023      	str	r3, [r4, #0]
 8003c8a:	bd38      	pop	{r3, r4, r5, pc}
 8003c8c:	20000228 	.word	0x20000228

08003c90 <__malloc_lock>:
 8003c90:	4801      	ldr	r0, [pc, #4]	; (8003c98 <__malloc_lock+0x8>)
 8003c92:	f000 b811 	b.w	8003cb8 <__retarget_lock_acquire_recursive>
 8003c96:	bf00      	nop
 8003c98:	20000230 	.word	0x20000230

08003c9c <__malloc_unlock>:
 8003c9c:	4801      	ldr	r0, [pc, #4]	; (8003ca4 <__malloc_unlock+0x8>)
 8003c9e:	f000 b80c 	b.w	8003cba <__retarget_lock_release_recursive>
 8003ca2:	bf00      	nop
 8003ca4:	20000230 	.word	0x20000230

08003ca8 <_malloc_usable_size_r>:
 8003ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cac:	1f18      	subs	r0, r3, #4
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	bfbc      	itt	lt
 8003cb2:	580b      	ldrlt	r3, [r1, r0]
 8003cb4:	18c0      	addlt	r0, r0, r3
 8003cb6:	4770      	bx	lr

08003cb8 <__retarget_lock_acquire_recursive>:
 8003cb8:	4770      	bx	lr

08003cba <__retarget_lock_release_recursive>:
 8003cba:	4770      	bx	lr

08003cbc <_init>:
 8003cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cbe:	bf00      	nop
 8003cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc2:	bc08      	pop	{r3}
 8003cc4:	469e      	mov	lr, r3
 8003cc6:	4770      	bx	lr

08003cc8 <_fini>:
 8003cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cca:	bf00      	nop
 8003ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cce:	bc08      	pop	{r3}
 8003cd0:	469e      	mov	lr, r3
 8003cd2:	4770      	bx	lr
